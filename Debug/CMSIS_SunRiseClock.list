
CMSIS_SunRiseClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002144  08002144  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08002144  08002144  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002144  08002144  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002144  08002144  00012144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002148  08002148  00012148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0800214c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  200001a8  080022f4  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001f0  080022f4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001562  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003f4  00000000  00000000  00021775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00021b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f7  00000000  00000000  00021ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008fce  00000000  00000000  00021da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001487  00000000  00000000  0002ad6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000301bc  00000000  00000000  0002c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000480  00000000  00000000  0005c3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001a8 	.word	0x200001a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f7c 	.word	0x08001f7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ac 	.word	0x200001ac
 8000104:	08001f7c 	.word	0x08001f7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	; 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
  }
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b7f      	cmp	r3, #127	; 0x7f
 8000268:	d828      	bhi.n	80002bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800026a:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <__NVIC_SetPriority+0xd4>)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	089b      	lsrs	r3, r3, #2
 8000274:	33c0      	adds	r3, #192	; 0xc0
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	589b      	ldr	r3, [r3, r2]
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	0011      	movs	r1, r2
 8000280:	2203      	movs	r2, #3
 8000282:	400a      	ands	r2, r1
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	21ff      	movs	r1, #255	; 0xff
 8000288:	4091      	lsls	r1, r2
 800028a:	000a      	movs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	401a      	ands	r2, r3
 8000290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	22ff      	movs	r2, #255	; 0xff
 8000298:	401a      	ands	r2, r3
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	2303      	movs	r3, #3
 80002a2:	4003      	ands	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <__NVIC_SetPriority+0xd4>)
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	089b      	lsrs	r3, r3, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	33c0      	adds	r3, #192	; 0xc0
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ba:	e031      	b.n	8000320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <__NVIC_SetPriority+0xd8>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230f      	movs	r3, #15
 80002c6:	400b      	ands	r3, r1
 80002c8:	3b08      	subs	r3, #8
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	3306      	adds	r3, #6
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	400a      	ands	r2, r1
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	21ff      	movs	r1, #255	; 0xff
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	401a      	ands	r2, r3
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	2303      	movs	r3, #3
 80002fe:	4003      	ands	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <__NVIC_SetPriority+0xd8>)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	001c      	movs	r4, r3
 800030c:	230f      	movs	r3, #15
 800030e:	4023      	ands	r3, r4
 8000310:	3b08      	subs	r3, #8
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18c3      	adds	r3, r0, r3
 800031c:	3304      	adds	r3, #4
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b003      	add	sp, #12
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <main>:
void sound(uint16_t freq, uint16_t time_ms);



uint16_t main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash uint16_terface and the Systick. */
//	WWDG_Init(0x7F, 0x50, 1);
	CMSIS_FullInit(); // 1ms
 8000336:	f000 f8d5 	bl	80004e4 <CMSIS_FullInit>

	SystemClock_Config();
 800033a:	f000 f90f 	bl	800055c <SystemClock_Config>

	GPIO_Init();
 800033e:	f000 fbaf 	bl	8000aa0 <GPIO_Init>
	RTC_Init();
 8000342:	f000 f9b7 	bl	80006b4 <RTC_Init>
	TIM2_Init();
 8000346:	f000 fa25 	bl	8000794 <TIM2_Init>
	TIM21_Init();
 800034a:	f000 faf7 	bl	800093c <TIM21_Init>

	writeCHARSEG(' ', ' ');
 800034e:	2120      	movs	r1, #32
 8000350:	2020      	movs	r0, #32
 8000352:	f000 fe5d 	bl	8001010 <writeCHARSEG>
	pinEN_OFF();
 8000356:	4b47      	ldr	r3, [pc, #284]	; (8000474 <main+0x144>)
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	0612      	lsls	r2, r2, #24
 800035c:	619a      	str	r2, [r3, #24]
	writeCHARSEG('8', 1);
 800035e:	2101      	movs	r1, #1
 8000360:	2038      	movs	r0, #56	; 0x38
 8000362:	f000 fe55 	bl	8001010 <writeCHARSEG>
	pinEN_ON();
 8000366:	4b43      	ldr	r3, [pc, #268]	; (8000474 <main+0x144>)
 8000368:	2280      	movs	r2, #128	; 0x80
 800036a:	0212      	lsls	r2, r2, #8
 800036c:	619a      	str	r2, [r3, #24]

	uint16_t vmenu = 0; // Змінна, що зберігає дію по вертикалі 1 - вхід в меню, -1 - вихід з меню
 800036e:	230e      	movs	r3, #14
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	2200      	movs	r2, #0
 8000374:	801a      	strh	r2, [r3, #0]
	uint16_t hmenu = 0; // Змінна, що зберігає дію по горизонталі 1 - вправо, -1 - вліво
 8000376:	230c      	movs	r3, #12
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2200      	movs	r2, #0
 800037c:	801a      	strh	r2, [r3, #0]
	char *tmpValue;

	while (1)
	{
		if (flagDecrementButton)
 800037e:	4b3e      	ldr	r3, [pc, #248]	; (8000478 <main+0x148>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d007      	beq.n	8000396 <main+0x66>
		{
			hmenu = 1;					 // Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 8000386:	230c      	movs	r3, #12
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	2201      	movs	r2, #1
 800038c:	801a      	strh	r2, [r3, #0]
			flagDecrementButton = false; // Действие обработано - сбрасываем флаг
 800038e:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <main+0x148>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
 8000394:	e00a      	b.n	80003ac <main+0x7c>
		}
		else if(flagDecrementButtonLong){
 8000396:	4b39      	ldr	r3, [pc, #228]	; (800047c <main+0x14c>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d006      	beq.n	80003ac <main+0x7c>
			hmenu = 5;					 // Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 800039e:	230c      	movs	r3, #12
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	2205      	movs	r2, #5
 80003a4:	801a      	strh	r2, [r3, #0]
			flagDecrementButtonLong = false; // Действие обработано - сбрасываем флаг
 80003a6:	4b35      	ldr	r3, [pc, #212]	; (800047c <main+0x14c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
		}

		if (flagIncrementButton)
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <main+0x150>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d008      	beq.n	80003c6 <main+0x96>
		{
			hmenu = -1;					 // Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 80003b4:	230c      	movs	r3, #12
 80003b6:	18fb      	adds	r3, r7, r3
 80003b8:	2201      	movs	r2, #1
 80003ba:	4252      	negs	r2, r2
 80003bc:	801a      	strh	r2, [r3, #0]
			flagIncrementButton = false; // Действие обработано - сбрасываем флаг
 80003be:	4b30      	ldr	r3, [pc, #192]	; (8000480 <main+0x150>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
 80003c4:	e00b      	b.n	80003de <main+0xae>
		}
		else if(flagIncrementButtonLong){
 80003c6:	4b2f      	ldr	r3, [pc, #188]	; (8000484 <main+0x154>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d007      	beq.n	80003de <main+0xae>
			hmenu = -5;					 // Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 80003ce:	230c      	movs	r3, #12
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	2205      	movs	r2, #5
 80003d4:	4252      	negs	r2, r2
 80003d6:	801a      	strh	r2, [r3, #0]
			flagIncrementButtonLong = false; // Действие обработано - сбрасываем флаг
 80003d8:	4b2a      	ldr	r3, [pc, #168]	; (8000484 <main+0x154>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
		}

		if (flagEnterButton)
 80003de:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <main+0x158>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <main+0xc6>
		{							 // Кнопка нажата
			vmenu = 1;				 // По нажатию кнопки - переходим на уровень вниз
 80003e6:	230e      	movs	r3, #14
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	2201      	movs	r2, #1
 80003ec:	801a      	strh	r2, [r3, #0]
			flagEnterButton = false; // Действие обработано - сбрасываем флаг
 80003ee:	4b26      	ldr	r3, [pc, #152]	; (8000488 <main+0x158>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
 80003f4:	e00b      	b.n	800040e <main+0xde>
		}
		else if (flagEnterButtonLong)
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <main+0x15c>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d007      	beq.n	800040e <main+0xde>
		{
			vmenu = -1;
 80003fe:	230e      	movs	r3, #14
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	2201      	movs	r2, #1
 8000404:	4252      	negs	r2, r2
 8000406:	801a      	strh	r2, [r3, #0]
			flagEnterButtonLong = false; // Действие обработано - сбрасываем флаг
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <main+0x15c>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
		}
		if (vmenu != 0 || hmenu != 0)
 800040e:	230e      	movs	r3, #14
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d104      	bne.n	8000422 <main+0xf2>
 8000418:	230c      	movs	r3, #12
 800041a:	18fb      	adds	r3, r7, r3
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00b      	beq.n	800043a <main+0x10a>
			tmpValue = setActualMenu(vmenu, hmenu); // Если было действие - реагируем на него
 8000422:	230c      	movs	r3, #12
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	230e      	movs	r3, #14
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f001 f99d 	bl	8001770 <setActualMenu>
 8000436:	0003      	movs	r3, r0
 8000438:	60bb      	str	r3, [r7, #8]
		for (uint16_t i = 0; i < 4; i++)
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	2200      	movs	r2, #0
 800043e:	801a      	strh	r2, [r3, #0]
 8000440:	e012      	b.n	8000468 <main+0x138>
		{
			writeCHARSEG(tmpValue[i], i);
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	18d3      	adds	r3, r2, r3
 800044a:	781a      	ldrb	r2, [r3, #0]
 800044c:	1dbb      	adds	r3, r7, #6
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	0019      	movs	r1, r3
 8000452:	0010      	movs	r0, r2
 8000454:	f000 fddc 	bl	8001010 <writeCHARSEG>
			Delay_ms(50);
 8000458:	2032      	movs	r0, #50	; 0x32
 800045a:	f000 fd97 	bl	8000f8c <Delay_ms>
		for (uint16_t i = 0; i < 4; i++)
 800045e:	1dbb      	adds	r3, r7, #6
 8000460:	881a      	ldrh	r2, [r3, #0]
 8000462:	1dbb      	adds	r3, r7, #6
 8000464:	3201      	adds	r2, #1
 8000466:	801a      	strh	r2, [r3, #0]
 8000468:	1dbb      	adds	r3, r7, #6
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d9e8      	bls.n	8000442 <main+0x112>
		if (flagDecrementButton)
 8000470:	e785      	b.n	800037e <main+0x4e>
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	50000800 	.word	0x50000800
 8000478:	200001c4 	.word	0x200001c4
 800047c:	200001c7 	.word	0x200001c7
 8000480:	200001c6 	.word	0x200001c6
 8000484:	200001c9 	.word	0x200001c9
 8000488:	200001c5 	.word	0x200001c5
 800048c:	200001c8 	.word	0x200001c8

08000490 <SysTickTimerInit>:
		}
	}
}

uint32_t SysTickTimerInit(uint32_t ticks)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]

  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	1e5a      	subs	r2, r3, #1
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	045b      	lsls	r3, r3, #17
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d301      	bcc.n	80004a8 <SysTickTimerInit+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004a4:	2301      	movs	r3, #1
 80004a6:	e016      	b.n	80004d6 <SysTickTimerInit+0x46>
  }
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Msk);					/* Disenable SysTick Timer */
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <SysTickTimerInit+0x50>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <SysTickTimerInit+0x50>)
 80004ae:	2101      	movs	r1, #1
 80004b0:	438a      	bics	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <SysTickTimerInit+0x50>)
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	3a01      	subs	r2, #1
 80004ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick uint16_terrupt */
 80004bc:	2301      	movs	r3, #1
 80004be:	425b      	negs	r3, r3
 80004c0:	2103      	movs	r1, #3
 80004c2:	0018      	movs	r0, r3
 80004c4:	f7ff fec6 	bl	8000254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <SysTickTimerInit+0x50>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <SysTickTimerInit+0x50>)
 80004d0:	2207      	movs	r2, #7
 80004d2:	601a      	str	r2, [r3, #0]
		  	  	  	SysTick_CTRL_TICKINT_Msk   |
					SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	0018      	movs	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	e000e010 	.word	0xe000e010

080004e4 <CMSIS_FullInit>:


void CMSIS_FullInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
    // *** Налаштування кешу, передвибірки і попереднього читання *** //

    // Вимкнути буфер кешу, якщо це налаштовано
		CLEAR_BIT(FLASH->ACR,FLASH_ACR_DISAB_BUF);
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <CMSIS_FullInit+0x74>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <CMSIS_FullInit+0x74>)
 80004f0:	2120      	movs	r1, #32
 80004f2:	438a      	bics	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
    // Включити попереднє читання, якщо це налаштовано
		SET_BIT(FLASH->ACR,FLASH_ACR_PRE_READ);
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <CMSIS_FullInit+0x74>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <CMSIS_FullInit+0x74>)
 80004fc:	2140      	movs	r1, #64	; 0x40
 80004fe:	430a      	orrs	r2, r1
 8000500:	601a      	str	r2, [r3, #0]
    // Включити буфер передвибірки, якщо це налаштовано
		SET_BIT(FLASH->ACR,FLASH_ACR_PRFTEN);
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <CMSIS_FullInit+0x74>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <CMSIS_FullInit+0x74>)
 8000508:	2102      	movs	r1, #2
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
		SET_BIT(FLASH->ACR,FLASH_ACR_LATENCY);
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <CMSIS_FullInit+0x74>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <CMSIS_FullInit+0x74>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]

    // *** Налаштування SysTick для переривань кожну 1 мс *** //

    uint32_t ticks = SYSCLK / 1000U;  // Розрахунок кількості тактів для 1 мс
 800051a:	23fa      	movs	r3, #250	; 0xfa
 800051c:	01db      	lsls	r3, r3, #7
 800051e:	607b      	str	r3, [r7, #4]

    // Використовуємо SysTick_Config для налаштування таймера
    if (ticks > SysTick_LOAD_RELOAD_Msk) // Якщо кількість тактів більше дозволеного
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	045b      	lsls	r3, r3, #17
 8000526:	429a      	cmp	r2, r3
 8000528:	d300      	bcc.n	800052c <CMSIS_FullInit+0x48>
    {
        while (1); // Помилка, зациклюємося
 800052a:	e7fe      	b.n	800052a <CMSIS_FullInit+0x46>
    }

    SysTickTimerInit(ticks);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ffae 	bl	8000490 <SysTickTimerInit>

    // Встановлення пріоритету для переривання SysTick
    uint32_t tickPriority = 0;  // Пріоритет для SysTick (без макросів)
 8000534:	2300      	movs	r3, #0
 8000536:	603b      	str	r3, [r7, #0]
    if (tickPriority < (1UL << __NVIC_PRIO_BITS))
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d807      	bhi.n	800054e <CMSIS_FullInit+0x6a>
    {
        NVIC_SetPriority(SysTick_IRQn, tickPriority);
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	2301      	movs	r3, #1
 8000542:	425b      	negs	r3, r3
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff fe84 	bl	8000254 <__NVIC_SetPriority>
    }
    else
    {
        while (1);  // Помилка пріоритету
    }
}
 800054c:	e000      	b.n	8000550 <CMSIS_FullInit+0x6c>
        while (1);  // Помилка пріоритету
 800054e:	e7fe      	b.n	800054e <CMSIS_FullInit+0x6a>
}
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40022000 	.word	0x40022000

0800055c <SystemClock_Config>:
//    // Увімкнемо переривання WWDG у NVIC
//    NVIC_EnableIRQ(WWDG_IRQn);  // Увімкнемо переривання WWDG у контролері NVIC
}

void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	// Налаштування PWR CR для регулювання напруги
	MODIFY_REG(PWR->CR, PWR_CR_VOS_Msk, 0b01 << PWR_CR_VOS_Pos);
 8000560:	4b49      	ldr	r3, [pc, #292]	; (8000688 <SystemClock_Config+0x12c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a49      	ldr	r2, [pc, #292]	; (800068c <SystemClock_Config+0x130>)
 8000566:	401a      	ands	r2, r3
 8000568:	4b47      	ldr	r3, [pc, #284]	; (8000688 <SystemClock_Config+0x12c>)
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	0109      	lsls	r1, r1, #4
 800056e:	430a      	orrs	r2, r1
 8000570:	601a      	str	r2, [r3, #0]

	// Вимкнення HSI16DIV
	CLEAR_BIT(RCC->CR, RCC_CR_HSIDIVEN);
 8000572:	4b47      	ldr	r3, [pc, #284]	; (8000690 <SystemClock_Config+0x134>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <SystemClock_Config+0x134>)
 8000578:	2108      	movs	r1, #8
 800057a:	438a      	bics	r2, r1
 800057c:	601a      	str	r2, [r3, #0]

	// Вимкнення MSI
	CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800057e:	4b44      	ldr	r3, [pc, #272]	; (8000690 <SystemClock_Config+0x134>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b43      	ldr	r3, [pc, #268]	; (8000690 <SystemClock_Config+0x134>)
 8000584:	4943      	ldr	r1, [pc, #268]	; (8000694 <SystemClock_Config+0x138>)
 8000586:	400a      	ands	r2, r1
 8000588:	601a      	str	r2, [r3, #0]

	// Якщо джерело системної частоти не HSI16
	if ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI)
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <SystemClock_Config+0x134>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	220c      	movs	r2, #12
 8000590:	4013      	ands	r3, r2
 8000592:	2b04      	cmp	r3, #4
 8000594:	d01b      	beq.n	80005ce <SystemClock_Config+0x72>
	{
		// Увімкнення HSI16
		SET_BIT(RCC->CR, RCC_CR_HSION);
 8000596:	4b3e      	ldr	r3, [pc, #248]	; (8000690 <SystemClock_Config+0x134>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <SystemClock_Config+0x134>)
 800059c:	2101      	movs	r1, #1
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]

		// Очікування стабілізації HSI16
		while (!(RCC->CR & RCC_CR_HSIRDY))
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <SystemClock_Config+0x134>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	d0fa      	beq.n	80005a4 <SystemClock_Config+0x48>
		{
		}

		// Перемикання системної тактової частоти на HSI16
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_HSI);
 80005ae:	4b38      	ldr	r3, [pc, #224]	; (8000690 <SystemClock_Config+0x134>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2203      	movs	r2, #3
 80005b4:	4393      	bics	r3, r2
 80005b6:	001a      	movs	r2, r3
 80005b8:	4b35      	ldr	r3, [pc, #212]	; (8000690 <SystemClock_Config+0x134>)
 80005ba:	2101      	movs	r1, #1
 80005bc:	430a      	orrs	r2, r1
 80005be:	60da      	str	r2, [r3, #12]

		// Очікування завершення перемикання
		while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI)
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	4b33      	ldr	r3, [pc, #204]	; (8000690 <SystemClock_Config+0x134>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	220c      	movs	r2, #12
 80005c8:	4013      	ands	r3, r2
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d1f9      	bne.n	80005c2 <SystemClock_Config+0x66>
		{
		}
	}

	// Налаштування MCO prescaler і джерела сигналу
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOPRE_Msk, 0b000 << RCC_CFGR_MCOPRE_Pos);
 80005ce:	4b30      	ldr	r3, [pc, #192]	; (8000690 <SystemClock_Config+0x134>)
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <SystemClock_Config+0x134>)
 80005d4:	4930      	ldr	r1, [pc, #192]	; (8000698 <SystemClock_Config+0x13c>)
 80005d6:	400a      	ands	r2, r1
 80005d8:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL_Msk, 0b000 << RCC_CFGR_MCOSEL_Pos);
 80005da:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <SystemClock_Config+0x134>)
 80005dc:	68da      	ldr	r2, [r3, #12]
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <SystemClock_Config+0x134>)
 80005e0:	492e      	ldr	r1, [pc, #184]	; (800069c <SystemClock_Config+0x140>)
 80005e2:	400a      	ands	r2, r1
 80005e4:	60da      	str	r2, [r3, #12]

	// Налаштування PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLDIV_Msk, 0b01 << RCC_CFGR_PLLDIV_Pos);
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <SystemClock_Config+0x134>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <SystemClock_Config+0x144>)
 80005ec:	401a      	ands	r2, r3
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0x134>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	03c9      	lsls	r1, r1, #15
 80005f4:	430a      	orrs	r2, r1
 80005f6:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL_Msk, 0b0001 << RCC_CFGR_PLLMUL_Pos);
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0x134>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <SystemClock_Config+0x148>)
 80005fe:	401a      	ands	r2, r3
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0x134>)
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	02c9      	lsls	r1, r1, #11
 8000606:	430a      	orrs	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC_Msk, 0b0 << RCC_CFGR_PLLSRC_Pos);
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <SystemClock_Config+0x134>)
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <SystemClock_Config+0x134>)
 8000610:	4925      	ldr	r1, [pc, #148]	; (80006a8 <SystemClock_Config+0x14c>)
 8000612:	400a      	ands	r2, r1
 8000614:	60da      	str	r2, [r3, #12]

	// Вимкнення системного пробудження від MSI після STOP режиму
	SET_BIT(RCC->CFGR, RCC_CFGR_STOPWUCK);
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0x134>)
 8000618:	68da      	ldr	r2, [r3, #12]
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <SystemClock_Config+0x134>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	0209      	lsls	r1, r1, #8
 8000620:	430a      	orrs	r2, r1
 8000622:	60da      	str	r2, [r3, #12]

	// Налаштування прескалерів для шин APB1, APB2 та AHB
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2_Msk, 0b000 << RCC_CFGR_PPRE2_Pos);
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <SystemClock_Config+0x134>)
 8000626:	68da      	ldr	r2, [r3, #12]
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <SystemClock_Config+0x134>)
 800062a:	4920      	ldr	r1, [pc, #128]	; (80006ac <SystemClock_Config+0x150>)
 800062c:	400a      	ands	r2, r1
 800062e:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1_Msk, 0b000 << RCC_CFGR_PPRE1_Pos);
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <SystemClock_Config+0x134>)
 8000632:	68da      	ldr	r2, [r3, #12]
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <SystemClock_Config+0x134>)
 8000636:	491e      	ldr	r1, [pc, #120]	; (80006b0 <SystemClock_Config+0x154>)
 8000638:	400a      	ands	r2, r1
 800063a:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE_Msk, 0b0000 << RCC_CFGR_HPRE_Pos);
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <SystemClock_Config+0x134>)
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <SystemClock_Config+0x134>)
 8000642:	21f0      	movs	r1, #240	; 0xf0
 8000644:	438a      	bics	r2, r1
 8000646:	60da      	str	r2, [r3, #12]

	// Перемикання на PLL
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <SystemClock_Config+0x134>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <SystemClock_Config+0x134>)
 800064e:	2180      	movs	r1, #128	; 0x80
 8000650:	0449      	lsls	r1, r1, #17
 8000652:	430a      	orrs	r2, r1
 8000654:	601a      	str	r2, [r3, #0]

	// Очікування стабілізації PLL
	while (!(RCC->CR & RCC_CR_PLLRDY))
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <SystemClock_Config+0x134>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	049b      	lsls	r3, r3, #18
 8000660:	4013      	ands	r3, r2
 8000662:	d0f9      	beq.n	8000658 <SystemClock_Config+0xfc>
	{
	}

	// Перемикання системної частоти на PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_PLL);
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SystemClock_Config+0x134>)
 8000666:	68da      	ldr	r2, [r3, #12]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <SystemClock_Config+0x134>)
 800066a:	2103      	movs	r1, #3
 800066c:	430a      	orrs	r2, r1
 800066e:	60da      	str	r2, [r3, #12]

	// Очікування завершення перемикання
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL)
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <SystemClock_Config+0x134>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	220c      	movs	r2, #12
 8000678:	4013      	ands	r3, r2
 800067a:	2b0c      	cmp	r3, #12
 800067c:	d1f9      	bne.n	8000672 <SystemClock_Config+0x116>
	{
	}
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40007000 	.word	0x40007000
 800068c:	ffffe7ff 	.word	0xffffe7ff
 8000690:	40021000 	.word	0x40021000
 8000694:	fffffeff 	.word	0xfffffeff
 8000698:	8fffffff 	.word	0x8fffffff
 800069c:	f0ffffff 	.word	0xf0ffffff
 80006a0:	ff3fffff 	.word	0xff3fffff
 80006a4:	ffc3ffff 	.word	0xffc3ffff
 80006a8:	fffeffff 	.word	0xfffeffff
 80006ac:	ffffc7ff 	.word	0xffffc7ff
 80006b0:	fffff8ff 	.word	0xfffff8ff

080006b4 <RTC_Init>:

/*READ INIT*/
void RTC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	// 1. Enable power and backup domain access
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 80006b8:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <RTC_Init+0xc0>)
 80006ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006bc:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <RTC_Init+0xc0>)
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	0549      	lsls	r1, r1, #21
 80006c2:	430a      	orrs	r2, r1
 80006c4:	639a      	str	r2, [r3, #56]	; 0x38
	SET_BIT(PWR->CR, PWR_CR_DBP);
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <RTC_Init+0xc4>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <RTC_Init+0xc4>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	0049      	lsls	r1, r1, #1
 80006d0:	430a      	orrs	r2, r1
 80006d2:	601a      	str	r2, [r3, #0]

	// 2. Enable LSE Oscillator
	SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <RTC_Init+0xc0>)
 80006d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <RTC_Init+0xc0>)
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	0049      	lsls	r1, r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	651a      	str	r2, [r3, #80]	; 0x50
	while (!(READ_BIT(RCC->CSR, RCC_CSR_LSERDY)))
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <RTC_Init+0xc0>)
 80006e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4013      	ands	r3, r2
 80006ee:	d0f9      	beq.n	80006e4 <RTC_Init+0x30>
	{
	}

	// 3. Set LSE as RTC clock source and enable RTC
	MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL_Msk, 0b01 << RCC_CSR_RTCSEL_Pos); // LSE selected as RTC clock
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <RTC_Init+0xc0>)
 80006f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <RTC_Init+0xc8>)
 80006f6:	401a      	ands	r2, r3
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <RTC_Init+0xc0>)
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	0249      	lsls	r1, r1, #9
 80006fe:	430a      	orrs	r2, r1
 8000700:	651a      	str	r2, [r3, #80]	; 0x50
	SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <RTC_Init+0xc0>)
 8000704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <RTC_Init+0xc0>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	02c9      	lsls	r1, r1, #11
 800070c:	430a      	orrs	r2, r1
 800070e:	651a      	str	r2, [r3, #80]	; 0x50

	// 4. Disable RTC write protection
	RTC->WPR = 0xCA; // Step 1
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <RTC_Init+0xcc>)
 8000712:	22ca      	movs	r2, #202	; 0xca
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53; // Step 2
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <RTC_Init+0xcc>)
 8000718:	2253      	movs	r2, #83	; 0x53
 800071a:	625a      	str	r2, [r3, #36]	; 0x24

	// 5. Enter initialization mode
	SET_BIT(RTC->ISR, RTC_ISR_INIT);
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <RTC_Init+0xcc>)
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <RTC_Init+0xcc>)
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	430a      	orrs	r2, r1
 8000726:	60da      	str	r2, [r3, #12]
	while (!(READ_BIT(RTC->ISR, RTC_ISR_INITF)))
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <RTC_Init+0xcc>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	2240      	movs	r2, #64	; 0x40
 8000730:	4013      	ands	r3, r2
 8000732:	d0fa      	beq.n	800072a <RTC_Init+0x76>
	{
	}

	// 6. Set the time in BCD format (17:36:00)
	MODIFY_REG(RTC->TR,
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <RTC_Init+0xcc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <RTC_Init+0xd0>)
 800073a:	401a      	ands	r2, r3
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <RTC_Init+0xcc>)
 800073e:	4912      	ldr	r1, [pc, #72]	; (8000788 <RTC_Init+0xd4>)
 8000740:	430a      	orrs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
				   (0x6 << RTC_TR_MNU_Pos) | // Minute units (6 -> 36)
				   (0x0 << RTC_TR_ST_Pos) |	 // Second tens (0 -> 00)
				   (0x0 << RTC_TR_SU_Pos));	 // Second units (0 -> 00)

	// 7. Set the date in BCD format (01/02/2024, Monday)
	MODIFY_REG(RTC->DR,
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <RTC_Init+0xcc>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <RTC_Init+0xd8>)
 800074a:	401a      	ands	r2, r3
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <RTC_Init+0xcc>)
 800074e:	4910      	ldr	r1, [pc, #64]	; (8000790 <RTC_Init+0xdc>)
 8000750:	430a      	orrs	r2, r1
 8000752:	605a      	str	r2, [r3, #4]
				   (0x0 << RTC_DR_DT_Pos) |	 // Day tens (0 -> 01)
				   (0x1 << RTC_DR_DU_Pos) |	 // Day units (1 -> 01)
				   (0x2 << RTC_DR_WDU_Pos)); // Weekday (3 -> Monday)

	// 8. Exit initialization mode
	CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <RTC_Init+0xcc>)
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <RTC_Init+0xcc>)
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	438a      	bics	r2, r1
 800075e:	60da      	str	r2, [r3, #12]

	// 9. Re-enable RTC write protection
	RTC->WPR = 0xFE; // Disable write access for RTC register
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <RTC_Init+0xcc>)
 8000762:	22fe      	movs	r2, #254	; 0xfe
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x64; //				-||-
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <RTC_Init+0xcc>)
 8000768:	2264      	movs	r2, #100	; 0x64
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000
 8000778:	40007000 	.word	0x40007000
 800077c:	fffcffff 	.word	0xfffcffff
 8000780:	40002800 	.word	0x40002800
 8000784:	ffc08080 	.word	0xffc08080
 8000788:	00173600 	.word	0x00173600
 800078c:	ff0000c0 	.word	0xff0000c0
 8000790:	00244401 	.word	0x00244401

08000794 <TIM2_Init>:

void TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

	// Увімкнення тактування GPIOA (для PA15, як PWM вихід)
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 8000798:	4b61      	ldr	r3, [pc, #388]	; (8000920 <TIM2_Init+0x18c>)
 800079a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800079c:	4b60      	ldr	r3, [pc, #384]	; (8000920 <TIM2_Init+0x18c>)
 800079e:	2101      	movs	r1, #1
 80007a0:	430a      	orrs	r2, r1
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин 15 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 15, 0b10, 0, 0b11); // BuzzerPin
 80007a4:	4b5f      	ldr	r3, [pc, #380]	; (8000924 <TIM2_Init+0x190>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	089a      	lsrs	r2, r3, #2
 80007ac:	4b5d      	ldr	r3, [pc, #372]	; (8000924 <TIM2_Init+0x190>)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0609      	lsls	r1, r1, #24
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <TIM2_Init+0x190>)
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4b5a      	ldr	r3, [pc, #360]	; (8000924 <TIM2_Init+0x190>)
 80007bc:	495a      	ldr	r1, [pc, #360]	; (8000928 <TIM2_Init+0x194>)
 80007be:	400a      	ands	r2, r1
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	4b58      	ldr	r3, [pc, #352]	; (8000924 <TIM2_Init+0x190>)
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	4b57      	ldr	r3, [pc, #348]	; (8000924 <TIM2_Init+0x190>)
 80007c8:	21c0      	movs	r1, #192	; 0xc0
 80007ca:	0609      	lsls	r1, r1, #24
 80007cc:	430a      	orrs	r2, r1
 80007ce:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AF1 для пина 15
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL15_Msk, 0b0101 << GPIO_AFRH_AFSEL15_Pos);
 80007d0:	23a0      	movs	r3, #160	; 0xa0
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d6:	011b      	lsls	r3, r3, #4
 80007d8:	091a      	lsrs	r2, r3, #4
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	21a0      	movs	r1, #160	; 0xa0
 80007e0:	05c9      	lsls	r1, r1, #23
 80007e2:	430a      	orrs	r2, r1
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24

	// Увімкнення тактування TIM2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80007e6:	4b4e      	ldr	r3, [pc, #312]	; (8000920 <TIM2_Init+0x18c>)
 80007e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ea:	4b4d      	ldr	r3, [pc, #308]	; (8000920 <TIM2_Init+0x18c>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	639a      	str	r2, [r3, #56]	; 0x38
	CLEAR_BIT(TIM2->CR1, TIM_CR1_CEN);
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	2101      	movs	r1, #1
 80007fe:	438a      	bics	r2, r1
 8000800:	601a      	str	r2, [r3, #0]

	/*Настройка таймера 2*/
	// TIMx control register 1 (TIMx_CR1)
	// SET_BIT(TIM2->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM2->CR1, TIM_CR1_UDIS);								 // Генерировать событие Update
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2102      	movs	r1, #2
 800080e:	438a      	bics	r2, r1
 8000810:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_URS);								 // Генерировать прерывание
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2104      	movs	r1, #4
 800081e:	438a      	bics	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_OPM);								 // One pulse mode off(Счетчик не останавливается при обновлении)
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	2108      	movs	r1, #8
 800082e:	438a      	bics	r2, r1
 8000830:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_DIR);								 // Считаем вверх
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2110      	movs	r1, #16
 800083e:	438a      	bics	r2, r1
 8000840:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM2->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); // Выравнивание по краю
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	2160      	movs	r1, #96	; 0x60
 800084e:	438a      	bics	r2, r1
 8000850:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM2->CR1, TIM_CR1_ARPE);								 // Auto-reload preload enable
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	430a      	orrs	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM2->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); // Предделение выключено
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	492f      	ldr	r1, [pc, #188]	; (800092c <TIM2_Init+0x198>)
 800086e:	400a      	ands	r2, r1
 8000870:	601a      	str	r2, [r3, #0]

	/*Настройка прерываний*/
	// TIMx DMA/uint16_terrupt enable register (TIMx_DIER)
	SET_BIT(TIM2->DIER, TIM_DIER_UIE); // Update uint16_terrupt enable
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	2101      	movs	r1, #1
 800087e:	430a      	orrs	r2, r1
 8000880:	60da      	str	r2, [r3, #12]

	// TIMx status register (TIMx_SR) - Статусные регистры

	TIM2->PSC = 3200 - 1;
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <TIM2_Init+0x19c>)
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10000 - 1;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	4a29      	ldr	r2, [pc, #164]	; (8000934 <TIM2_Init+0x1a0>)
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM2_IRQn); // Разрешить прерывания по таймеру 2
 8000892:	200f      	movs	r0, #15
 8000894:	f7ff fcc4 	bl	8000220 <__NVIC_EnableIRQ>
	/*Настройка шим(Канал 1)*/
	MODIFY_REG(TIM2->CCMR1, TIM_CCMR1_CC1S_Msk, 0b00 << TIM_CCMR1_CC1S_Pos);  // CC1 channel is configured as output
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2103      	movs	r1, #3
 80008a4:	438a      	bics	r2, r1
 80008a6:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM2->CCMR1, TIM_CCMR1_OC1FE);								  // Fast mode disable
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	699a      	ldr	r2, [r3, #24]
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2104      	movs	r1, #4
 80008b4:	438a      	bics	r2, r1
 80008b6:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM2->CCMR1, TIM_CCMR1_OC1PE);									  // Preload enable
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2108      	movs	r1, #8
 80008c4:	430a      	orrs	r2, r1
 80008c6:	619a      	str	r2, [r3, #24]
	MODIFY_REG(TIM2->CCMR1, TIM_CCMR1_OC1M_Msk, 0b110 << TIM_CCMR1_OC1M_Pos); // PWM MODE 1
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	2270      	movs	r2, #112	; 0x70
 80008d0:	4393      	bics	r3, r2
 80008d2:	001a      	movs	r2, r3
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	2160      	movs	r1, #96	; 0x60
 80008da:	430a      	orrs	r2, r1
 80008dc:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM2->CCMR1, TIM_CCMR1_OC1CE);								  // OC1Ref is not affected by the ETRF input
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	699a      	ldr	r2, [r3, #24]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	438a      	bics	r2, r1
 80008ec:	619a      	str	r2, [r3, #24]

	/*Запуск ШИМ*/
	// 15.4.9 TIMx capture/compare enable register (TIMx_CCER)
	SET_BIT(TIM2->CCER, TIM_CCER_CC1E);	   // On - OC1 signal is output on the corresponding output pin.
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	6a1a      	ldr	r2, [r3, #32]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2101      	movs	r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(TIM21->CCER, TIM_CCER_CC1P); // OC1 active high.
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <TIM2_Init+0x1a4>)
 8000900:	6a1a      	ldr	r2, [r3, #32]
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <TIM2_Init+0x1a4>)
 8000904:	2102      	movs	r1, #2
 8000906:	438a      	bics	r2, r1
 8000908:	621a      	str	r2, [r3, #32]

	SET_BIT(TIM2->CR1, TIM_CR1_CEN);
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	50000400 	.word	0x50000400
 8000928:	ffff7fff 	.word	0xffff7fff
 800092c:	fffffcff 	.word	0xfffffcff
 8000930:	00000c7f 	.word	0x00000c7f
 8000934:	0000270f 	.word	0x0000270f
 8000938:	40010800 	.word	0x40010800

0800093c <TIM21_Init>:

void TIM21_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	// Увімкнення тактування GPIOB (для PB5, як PWM вихід)
	RCC->IOPENR |= RCC_IOPENR_IOPBEN;
 8000940:	4b4f      	ldr	r3, [pc, #316]	; (8000a80 <TIM21_Init+0x144>)
 8000942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000944:	4b4e      	ldr	r3, [pc, #312]	; (8000a80 <TIM21_Init+0x144>)
 8000946:	2102      	movs	r1, #2
 8000948:	430a      	orrs	r2, r1
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин 5 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 5, 0b10, 0, 0b11); // mainLED
 800094c:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <TIM21_Init+0x148>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a4d      	ldr	r2, [pc, #308]	; (8000a88 <TIM21_Init+0x14c>)
 8000952:	401a      	ands	r2, r3
 8000954:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <TIM21_Init+0x148>)
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	0109      	lsls	r1, r1, #4
 800095a:	430a      	orrs	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <TIM21_Init+0x148>)
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	4b48      	ldr	r3, [pc, #288]	; (8000a84 <TIM21_Init+0x148>)
 8000964:	2120      	movs	r1, #32
 8000966:	438a      	bics	r2, r1
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	4b46      	ldr	r3, [pc, #280]	; (8000a84 <TIM21_Init+0x148>)
 800096c:	689a      	ldr	r2, [r3, #8]
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <TIM21_Init+0x148>)
 8000970:	21c0      	movs	r1, #192	; 0xc0
 8000972:	0109      	lsls	r1, r1, #4
 8000974:	430a      	orrs	r2, r1
 8000976:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AF1 для пина 5
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL5_Msk, 0b0101 << GPIO_AFRL_AFSEL5_Pos);
 8000978:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <TIM21_Init+0x148>)
 800097a:	6a1b      	ldr	r3, [r3, #32]
 800097c:	4a43      	ldr	r2, [pc, #268]	; (8000a8c <TIM21_Init+0x150>)
 800097e:	401a      	ands	r2, r3
 8000980:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <TIM21_Init+0x148>)
 8000982:	21a0      	movs	r1, #160	; 0xa0
 8000984:	03c9      	lsls	r1, r1, #15
 8000986:	430a      	orrs	r2, r1
 8000988:	621a      	str	r2, [r3, #32]

	// Увімкнення тактування TIM21
	RCC->APB2ENR |= RCC_APB2ENR_TIM21EN;
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <TIM21_Init+0x144>)
 800098c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800098e:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <TIM21_Init+0x144>)
 8000990:	2104      	movs	r1, #4
 8000992:	430a      	orrs	r2, r1
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
	CLEAR_BIT(TIM21->CR1, TIM_CR1_CEN);
 8000996:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <TIM21_Init+0x154>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <TIM21_Init+0x154>)
 800099c:	2101      	movs	r1, #1
 800099e:	438a      	bics	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]

	/*Настройка таймера 21*/
	// TIMx control register 1 (TIMx_CR1)
	// SET_BIT(TIM21->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM21->CR1, TIM_CR1_UDIS);							  // Генерировать событие Update
 80009a2:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <TIM21_Init+0x154>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <TIM21_Init+0x154>)
 80009a8:	2102      	movs	r1, #2
 80009aa:	438a      	bics	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_URS);								  // Генерировать прерывание
 80009ae:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <TIM21_Init+0x154>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <TIM21_Init+0x154>)
 80009b4:	2104      	movs	r1, #4
 80009b6:	438a      	bics	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_OPM);								  // One pulse mode off(Счетчик не останавливается при обновлении)
 80009ba:	4b35      	ldr	r3, [pc, #212]	; (8000a90 <TIM21_Init+0x154>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <TIM21_Init+0x154>)
 80009c0:	2108      	movs	r1, #8
 80009c2:	438a      	bics	r2, r1
 80009c4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_DIR);								  // Считаем вверх
 80009c6:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <TIM21_Init+0x154>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <TIM21_Init+0x154>)
 80009cc:	2110      	movs	r1, #16
 80009ce:	438a      	bics	r2, r1
 80009d0:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM21->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); // Выравнивание по краю
 80009d2:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <TIM21_Init+0x154>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <TIM21_Init+0x154>)
 80009d8:	2160      	movs	r1, #96	; 0x60
 80009da:	438a      	bics	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM21->CR1, TIM_CR1_ARPE);								  // Auto-reload preload enable
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <TIM21_Init+0x154>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <TIM21_Init+0x154>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	430a      	orrs	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM21->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); // Предделение выключено
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <TIM21_Init+0x154>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <TIM21_Init+0x154>)
 80009f0:	4928      	ldr	r1, [pc, #160]	; (8000a94 <TIM21_Init+0x158>)
 80009f2:	400a      	ands	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]

	/*Настройка прерываний*/
	// TIMx DMA/uint16_terrupt enable register (TIMx_DIER)
	SET_BIT(TIM21->DIER, TIM_DIER_UIE); // Update uint16_terrupt enable
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <TIM21_Init+0x154>)
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <TIM21_Init+0x154>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	60da      	str	r2, [r3, #12]

	// TIMx status register (TIMx_SR) - Статусные регистры
	TIM21->PSC = 3200 - 1;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <TIM21_Init+0x154>)
 8000a04:	4a24      	ldr	r2, [pc, #144]	; (8000a98 <TIM21_Init+0x15c>)
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
	TIM21->ARR = 10000 - 1;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <TIM21_Init+0x154>)
 8000a0a:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <TIM21_Init+0x160>)
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM21_IRQn); // Разрешить прерывания по таймеру 21
 8000a0e:	2014      	movs	r0, #20
 8000a10:	f7ff fc06 	bl	8000220 <__NVIC_EnableIRQ>

	/*Настройка шим(Канал 1)*/
	MODIFY_REG(TIM21->CCMR1, TIM_CCMR1_CC1S_Msk, 0b00 << TIM_CCMR1_CC1S_Pos);  // CC1 channel is configured as output
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <TIM21_Init+0x154>)
 8000a16:	699a      	ldr	r2, [r3, #24]
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <TIM21_Init+0x154>)
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	438a      	bics	r2, r1
 8000a1e:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM21->CCMR1, TIM_CCMR1_OC1FE);								   // Fast mode disable
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <TIM21_Init+0x154>)
 8000a22:	699a      	ldr	r2, [r3, #24]
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <TIM21_Init+0x154>)
 8000a26:	2104      	movs	r1, #4
 8000a28:	438a      	bics	r2, r1
 8000a2a:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM21->CCMR1, TIM_CCMR1_OC1PE);									   // Preload enable
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <TIM21_Init+0x154>)
 8000a2e:	699a      	ldr	r2, [r3, #24]
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <TIM21_Init+0x154>)
 8000a32:	2108      	movs	r1, #8
 8000a34:	430a      	orrs	r2, r1
 8000a36:	619a      	str	r2, [r3, #24]
	MODIFY_REG(TIM21->CCMR1, TIM_CCMR1_OC1M_Msk, 0b110 << TIM_CCMR1_OC1M_Pos); // PWM MODE 1
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <TIM21_Init+0x154>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	2270      	movs	r2, #112	; 0x70
 8000a3e:	4393      	bics	r3, r2
 8000a40:	001a      	movs	r2, r3
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <TIM21_Init+0x154>)
 8000a44:	2160      	movs	r1, #96	; 0x60
 8000a46:	430a      	orrs	r2, r1
 8000a48:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM21->CCMR1, TIM_CCMR1_OC1CE);								   // OC1Ref is not affected by the ETRF input
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <TIM21_Init+0x154>)
 8000a4c:	699a      	ldr	r2, [r3, #24]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <TIM21_Init+0x154>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	438a      	bics	r2, r1
 8000a54:	619a      	str	r2, [r3, #24]

	/*Запуск ШИМ*/
	// TIMx capture/compare enable register (TIMx_CCER)
	SET_BIT(TIM21->CCER, TIM_CCER_CC1E); // On - OC1 signal is output on the corresponding output pin.
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <TIM21_Init+0x154>)
 8000a58:	6a1a      	ldr	r2, [r3, #32]
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <TIM21_Init+0x154>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	621a      	str	r2, [r3, #32]
	SET_BIT(TIM21->CCER, TIM_CCER_CC1P); // OC1 active high.
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <TIM21_Init+0x154>)
 8000a64:	6a1a      	ldr	r2, [r3, #32]
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <TIM21_Init+0x154>)
 8000a68:	2102      	movs	r1, #2
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	621a      	str	r2, [r3, #32]

	SET_BIT(TIM21->CR1, TIM_CR1_CEN);
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <TIM21_Init+0x154>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <TIM21_Init+0x154>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	50000400 	.word	0x50000400
 8000a88:	fffff3ff 	.word	0xfffff3ff
 8000a8c:	ff0fffff 	.word	0xff0fffff
 8000a90:	40010800 	.word	0x40010800
 8000a94:	fffffcff 	.word	0xfffffcff
 8000a98:	00000c7f 	.word	0x00000c7f
 8000a9c:	0000270f 	.word	0x0000270f

08000aa0 <GPIO_Init>:

void GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	// Включення тактування портів A, B, C
	RCC->IOPENR |= RCC_IOPENR_IOPAEN | RCC_IOPENR_IOPBEN | RCC_IOPENR_IOPCEN;
 8000aa4:	4bfd      	ldr	r3, [pc, #1012]	; (8000e9c <GPIO_Init+0x3fc>)
 8000aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa8:	4bfc      	ldr	r3, [pc, #1008]	; (8000e9c <GPIO_Init+0x3fc>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	430a      	orrs	r2, r1
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c

	// Налаштування світлодіодів (виводи PA, PB)
	CONFIGURE_GPIO(GPIOA, 7, 0b01, 0, 0b11);  // LEDa
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4afa      	ldr	r2, [pc, #1000]	; (8000ea0 <GPIO_Init+0x400>)
 8000ab8:	401a      	ands	r2, r3
 8000aba:	23a0      	movs	r3, #160	; 0xa0
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	01c9      	lsls	r1, r1, #7
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	23a0      	movs	r3, #160	; 0xa0
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	438a      	bics	r2, r1
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	23a0      	movs	r3, #160	; 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	23a0      	movs	r3, #160	; 0xa0
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	21c0      	movs	r1, #192	; 0xc0
 8000ae2:	0209      	lsls	r1, r1, #8
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 1, 0b01, 0, 0b11);  // LEDb
 8000ae8:	4bee      	ldr	r3, [pc, #952]	; (8000ea4 <GPIO_Init+0x404>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	220c      	movs	r2, #12
 8000aee:	4393      	bics	r3, r2
 8000af0:	001a      	movs	r2, r3
 8000af2:	4bec      	ldr	r3, [pc, #944]	; (8000ea4 <GPIO_Init+0x404>)
 8000af4:	2104      	movs	r1, #4
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	4bea      	ldr	r3, [pc, #936]	; (8000ea4 <GPIO_Init+0x404>)
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	4be9      	ldr	r3, [pc, #932]	; (8000ea4 <GPIO_Init+0x404>)
 8000b00:	2102      	movs	r1, #2
 8000b02:	438a      	bics	r2, r1
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	4be7      	ldr	r3, [pc, #924]	; (8000ea4 <GPIO_Init+0x404>)
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	4be6      	ldr	r3, [pc, #920]	; (8000ea4 <GPIO_Init+0x404>)
 8000b0c:	210c      	movs	r1, #12
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 6, 0b01, 0, 0b11);  // LEDc
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4ae3      	ldr	r2, [pc, #908]	; (8000ea8 <GPIO_Init+0x408>)
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0149      	lsls	r1, r1, #5
 8000b24:	430a      	orrs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	23a0      	movs	r3, #160	; 0xa0
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	438a      	bics	r2, r1
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	23a0      	movs	r3, #160	; 0xa0
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	23a0      	movs	r3, #160	; 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	21c0      	movs	r1, #192	; 0xc0
 8000b44:	0189      	lsls	r1, r1, #6
 8000b46:	430a      	orrs	r2, r1
 8000b48:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 5, 0b01, 0, 0b11);  // LEDd
 8000b4a:	23a0      	movs	r3, #160	; 0xa0
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4ad6      	ldr	r2, [pc, #856]	; (8000eac <GPIO_Init+0x40c>)
 8000b52:	401a      	ands	r2, r3
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	00c9      	lsls	r1, r1, #3
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	23a0      	movs	r3, #160	; 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	438a      	bics	r2, r1
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	23a0      	movs	r3, #160	; 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	23a0      	movs	r3, #160	; 0xa0
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	21c0      	movs	r1, #192	; 0xc0
 8000b7c:	0109      	lsls	r1, r1, #4
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 11, 0b01, 0, 0b11); // LEDe
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4ac9      	ldr	r2, [pc, #804]	; (8000eb0 <GPIO_Init+0x410>)
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	23a0      	movs	r3, #160	; 0xa0
 8000b8e:	05db      	lsls	r3, r3, #23
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	03c9      	lsls	r1, r1, #15
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	23a0      	movs	r3, #160	; 0xa0
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	23a0      	movs	r3, #160	; 0xa0
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	49c4      	ldr	r1, [pc, #784]	; (8000eb4 <GPIO_Init+0x414>)
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	23a0      	movs	r3, #160	; 0xa0
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	23a0      	movs	r3, #160	; 0xa0
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	21c0      	movs	r1, #192	; 0xc0
 8000bb4:	0409      	lsls	r1, r1, #16
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 9, 0b01, 0, 0b11);  // LEDf
 8000bba:	23a0      	movs	r3, #160	; 0xa0
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4abd      	ldr	r2, [pc, #756]	; (8000eb8 <GPIO_Init+0x418>)
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	23a0      	movs	r3, #160	; 0xa0
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	02c9      	lsls	r1, r1, #11
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	49b8      	ldr	r1, [pc, #736]	; (8000ebc <GPIO_Init+0x41c>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	23a0      	movs	r3, #160	; 0xa0
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	23a0      	movs	r3, #160	; 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	21c0      	movs	r1, #192	; 0xc0
 8000bec:	0309      	lsls	r1, r1, #12
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 0, 0b01, 0, 0b11);  // LEDg
 8000bf2:	4bac      	ldr	r3, [pc, #688]	; (8000ea4 <GPIO_Init+0x404>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	4393      	bics	r3, r2
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	4ba9      	ldr	r3, [pc, #676]	; (8000ea4 <GPIO_Init+0x404>)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	4ba7      	ldr	r3, [pc, #668]	; (8000ea4 <GPIO_Init+0x404>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4ba6      	ldr	r3, [pc, #664]	; (8000ea4 <GPIO_Init+0x404>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	438a      	bics	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	4ba4      	ldr	r3, [pc, #656]	; (8000ea4 <GPIO_Init+0x404>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	4ba3      	ldr	r3, [pc, #652]	; (8000ea4 <GPIO_Init+0x404>)
 8000c16:	2103      	movs	r1, #3
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 3, 0b01, 0, 0b11);  // LEDdp
 8000c1c:	4ba1      	ldr	r3, [pc, #644]	; (8000ea4 <GPIO_Init+0x404>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	22c0      	movs	r2, #192	; 0xc0
 8000c22:	4393      	bics	r3, r2
 8000c24:	001a      	movs	r2, r3
 8000c26:	4b9f      	ldr	r3, [pc, #636]	; (8000ea4 <GPIO_Init+0x404>)
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	4b9d      	ldr	r3, [pc, #628]	; (8000ea4 <GPIO_Init+0x404>)
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	4b9c      	ldr	r3, [pc, #624]	; (8000ea4 <GPIO_Init+0x404>)
 8000c34:	2108      	movs	r1, #8
 8000c36:	438a      	bics	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	4b9a      	ldr	r3, [pc, #616]	; (8000ea4 <GPIO_Init+0x404>)
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	4b99      	ldr	r3, [pc, #612]	; (8000ea4 <GPIO_Init+0x404>)
 8000c40:	21c0      	movs	r1, #192	; 0xc0
 8000c42:	430a      	orrs	r2, r1
 8000c44:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 3, 0b01, 0, 0b11);  // LEDD1
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	22c0      	movs	r2, #192	; 0xc0
 8000c4e:	4393      	bics	r3, r2
 8000c50:	001a      	movs	r2, r3
 8000c52:	23a0      	movs	r3, #160	; 0xa0
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	23a0      	movs	r3, #160	; 0xa0
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2108      	movs	r1, #8
 8000c68:	438a      	bics	r2, r1
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	23a0      	movs	r3, #160	; 0xa0
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	23a0      	movs	r3, #160	; 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	21c0      	movs	r1, #192	; 0xc0
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 4, 0b01, 0, 0b11);  // LEDD2
 8000c7c:	23a0      	movs	r3, #160	; 0xa0
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a8f      	ldr	r2, [pc, #572]	; (8000ec0 <GPIO_Init+0x420>)
 8000c84:	401a      	ands	r2, r3
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	0049      	lsls	r1, r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	23a0      	movs	r3, #160	; 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	23a0      	movs	r3, #160	; 0xa0
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	21c0      	movs	r1, #192	; 0xc0
 8000cae:	0089      	lsls	r1, r1, #2
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 12, 0b01, 0, 0b11); // LEDD3
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a82      	ldr	r2, [pc, #520]	; (8000ec4 <GPIO_Init+0x424>)
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	23a0      	movs	r3, #160	; 0xa0
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	0449      	lsls	r1, r1, #17
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	23a0      	movs	r3, #160	; 0xa0
 8000ccc:	05db      	lsls	r3, r3, #23
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	23a0      	movs	r3, #160	; 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	497c      	ldr	r1, [pc, #496]	; (8000ec8 <GPIO_Init+0x428>)
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	23a0      	movs	r3, #160	; 0xa0
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	23a0      	movs	r3, #160	; 0xa0
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	21c0      	movs	r1, #192	; 0xc0
 8000ce6:	0489      	lsls	r1, r1, #18
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 4, 0b01, 0, 0b11);  // LEDD4
 8000cec:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <GPIO_Init+0x404>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a73      	ldr	r2, [pc, #460]	; (8000ec0 <GPIO_Init+0x420>)
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <GPIO_Init+0x404>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0049      	lsls	r1, r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	4b69      	ldr	r3, [pc, #420]	; (8000ea4 <GPIO_Init+0x404>)
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <GPIO_Init+0x404>)
 8000d04:	2110      	movs	r1, #16
 8000d06:	438a      	bics	r2, r1
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	4b66      	ldr	r3, [pc, #408]	; (8000ea4 <GPIO_Init+0x404>)
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	4b65      	ldr	r3, [pc, #404]	; (8000ea4 <GPIO_Init+0x404>)
 8000d10:	21c0      	movs	r1, #192	; 0xc0
 8000d12:	0089      	lsls	r1, r1, #2
 8000d14:	430a      	orrs	r2, r1
 8000d16:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 10, 0b01, 0, 0b11); // LEDl1l2
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a6b      	ldr	r2, [pc, #428]	; (8000ecc <GPIO_Init+0x42c>)
 8000d20:	401a      	ands	r2, r3
 8000d22:	23a0      	movs	r3, #160	; 0xa0
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0349      	lsls	r1, r1, #13
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	23a0      	movs	r3, #160	; 0xa0
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	23a0      	movs	r3, #160	; 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	4965      	ldr	r1, [pc, #404]	; (8000ed0 <GPIO_Init+0x430>)
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	23a0      	movs	r3, #160	; 0xa0
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	23a0      	movs	r3, #160	; 0xa0
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	21c0      	movs	r1, #192	; 0xc0
 8000d4a:	0389      	lsls	r1, r1, #14
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 8, 0b01, 0, 0b11);  // LEDalarm
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a5f      	ldr	r2, [pc, #380]	; (8000ed4 <GPIO_Init+0x434>)
 8000d58:	401a      	ands	r2, r3
 8000d5a:	23a0      	movs	r3, #160	; 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0249      	lsls	r1, r1, #9
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	23a0      	movs	r3, #160	; 0xa0
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	4959      	ldr	r1, [pc, #356]	; (8000ed8 <GPIO_Init+0x438>)
 8000d72:	400a      	ands	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	23a0      	movs	r3, #160	; 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	23a0      	movs	r3, #160	; 0xa0
 8000d7e:	05db      	lsls	r3, r3, #23
 8000d80:	21c0      	movs	r1, #192	; 0xc0
 8000d82:	0289      	lsls	r1, r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOC, 15, 0b01, 0, 0b11); // pinEN
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <GPIO_Init+0x43c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	089a      	lsrs	r2, r3, #2
 8000d90:	4b52      	ldr	r3, [pc, #328]	; (8000edc <GPIO_Init+0x43c>)
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	05c9      	lsls	r1, r1, #23
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <GPIO_Init+0x43c>)
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	4b4f      	ldr	r3, [pc, #316]	; (8000edc <GPIO_Init+0x43c>)
 8000da0:	494f      	ldr	r1, [pc, #316]	; (8000ee0 <GPIO_Init+0x440>)
 8000da2:	400a      	ands	r2, r1
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	4b4d      	ldr	r3, [pc, #308]	; (8000edc <GPIO_Init+0x43c>)
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <GPIO_Init+0x43c>)
 8000dac:	21c0      	movs	r1, #192	; 0xc0
 8000dae:	0609      	lsls	r1, r1, #24
 8000db0:	430a      	orrs	r2, r1
 8000db2:	609a      	str	r2, [r3, #8]

	// Налаштування кнопок із EXTI
	CONFIGURE_GPIO(GPIOA, 0, 0b00, 0, 0b11); // decrement
 8000db4:	23a0      	movs	r3, #160	; 0xa0
 8000db6:	05db      	lsls	r3, r3, #23
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	438a      	bics	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	23a0      	movs	r3, #160	; 0xa0
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	23a0      	movs	r3, #160	; 0xa0
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	2101      	movs	r1, #1
 8000dd0:	438a      	bics	r2, r1
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	23a0      	movs	r3, #160	; 0xa0
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	2103      	movs	r1, #3
 8000de0:	430a      	orrs	r2, r1
 8000de2:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(0, 0b000, 0, 1, 0);		 // EXTI для decrement
 8000de4:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <GPIO_Init+0x444>)
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <GPIO_Init+0x444>)
 8000dea:	210f      	movs	r1, #15
 8000dec:	438a      	bics	r2, r1
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <GPIO_Init+0x448>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <GPIO_Init+0x448>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ee8 <GPIO_Init+0x448>)
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <GPIO_Init+0x448>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOA, 1, 0b00, 0, 0b11); // enter
 8000e08:	23a0      	movs	r3, #160	; 0xa0
 8000e0a:	05db      	lsls	r3, r3, #23
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	23a0      	movs	r3, #160	; 0xa0
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	210c      	movs	r1, #12
 8000e14:	438a      	bics	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	23a0      	movs	r3, #160	; 0xa0
 8000e1a:	05db      	lsls	r3, r3, #23
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	2102      	movs	r1, #2
 8000e24:	438a      	bics	r2, r1
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	23a0      	movs	r3, #160	; 0xa0
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	210c      	movs	r1, #12
 8000e34:	430a      	orrs	r2, r1
 8000e36:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(1, 0b000, 0, 1, 0);		 // EXTI для enter
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <GPIO_Init+0x444>)
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <GPIO_Init+0x444>)
 8000e3e:	21f0      	movs	r1, #240	; 0xf0
 8000e40:	438a      	bics	r2, r1
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <GPIO_Init+0x448>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <GPIO_Init+0x448>)
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <GPIO_Init+0x448>)
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <GPIO_Init+0x448>)
 8000e56:	2102      	movs	r1, #2
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOA, 2, 0b00, 0, 0b11); // increment
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	23a0      	movs	r3, #160	; 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2130      	movs	r1, #48	; 0x30
 8000e68:	438a      	bics	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	2104      	movs	r1, #4
 8000e78:	438a      	bics	r2, r1
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	23a0      	movs	r3, #160	; 0xa0
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	2130      	movs	r1, #48	; 0x30
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(2, 0b000, 0, 1, 0);		 // EXTI для increment
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <GPIO_Init+0x444>)
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <GPIO_Init+0x444>)
 8000e92:	4916      	ldr	r1, [pc, #88]	; (8000eec <GPIO_Init+0x44c>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	e02a      	b.n	8000ef0 <GPIO_Init+0x450>
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	ffff3fff 	.word	0xffff3fff
 8000ea4:	50000400 	.word	0x50000400
 8000ea8:	ffffcfff 	.word	0xffffcfff
 8000eac:	fffff3ff 	.word	0xfffff3ff
 8000eb0:	ff3fffff 	.word	0xff3fffff
 8000eb4:	fffff7ff 	.word	0xfffff7ff
 8000eb8:	fff3ffff 	.word	0xfff3ffff
 8000ebc:	fffffdff 	.word	0xfffffdff
 8000ec0:	fffffcff 	.word	0xfffffcff
 8000ec4:	fcffffff 	.word	0xfcffffff
 8000ec8:	ffffefff 	.word	0xffffefff
 8000ecc:	ffcfffff 	.word	0xffcfffff
 8000ed0:	fffffbff 	.word	0xfffffbff
 8000ed4:	fffcffff 	.word	0xfffcffff
 8000ed8:	fffffeff 	.word	0xfffffeff
 8000edc:	50000800 	.word	0x50000800
 8000ee0:	ffff7fff 	.word	0xffff7fff
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40010400 	.word	0x40010400
 8000eec:	fffff0ff 	.word	0xfffff0ff
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <GPIO_Init+0x4d8>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <GPIO_Init+0x4d8>)
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <GPIO_Init+0x4d8>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <GPIO_Init+0x4d8>)
 8000f02:	2104      	movs	r1, #4
 8000f04:	430a      	orrs	r2, r1
 8000f06:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOB, 9, 0b00, 0, 0b11); // pwr
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <GPIO_Init+0x4dc>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <GPIO_Init+0x4dc>)
 8000f0e:	491c      	ldr	r1, [pc, #112]	; (8000f80 <GPIO_Init+0x4e0>)
 8000f10:	400a      	ands	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <GPIO_Init+0x4dc>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <GPIO_Init+0x4dc>)
 8000f1a:	491a      	ldr	r1, [pc, #104]	; (8000f84 <GPIO_Init+0x4e4>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <GPIO_Init+0x4dc>)
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <GPIO_Init+0x4dc>)
 8000f26:	21c0      	movs	r1, #192	; 0xc0
 8000f28:	0309      	lsls	r1, r1, #12
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(9, 0b000, 2, 3, 1);		 // EXTI для pwr з обробкою по зростанню
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <GPIO_Init+0x4e8>)
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <GPIO_Init+0x4e8>)
 8000f34:	21f0      	movs	r1, #240	; 0xf0
 8000f36:	438a      	bics	r2, r1
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <GPIO_Init+0x4d8>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <GPIO_Init+0x4d8>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0089      	lsls	r1, r1, #2
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <GPIO_Init+0x4d8>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <GPIO_Init+0x4d8>)
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	0089      	lsls	r1, r1, #2
 8000f52:	430a      	orrs	r2, r1
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <GPIO_Init+0x4d8>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <GPIO_Init+0x4d8>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0089      	lsls	r1, r1, #2
 8000f60:	430a      	orrs	r2, r1
 8000f62:	609a      	str	r2, [r3, #8]

	/* Включення переривання */                                                                                                   \
	NVIC_EnableIRQ(EXTI0_1_IRQn);                                                                                                  \
 8000f64:	2005      	movs	r0, #5
 8000f66:	f7ff f95b 	bl	8000220 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f7ff f958 	bl	8000220 <__NVIC_EnableIRQ>
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40010400 	.word	0x40010400
 8000f7c:	50000400 	.word	0x50000400
 8000f80:	fff3ffff 	.word	0xfff3ffff
 8000f84:	fffffdff 	.word	0xfffffdff
 8000f88:	40010000 	.word	0x40010000

08000f8c <Delay_ms>:

void Delay_ms(uint32_t Milliseconds)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <Delay_ms+0x2c>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
	while (Delay_counter_ms != 0)
 8000f9a:	e004      	b.n	8000fa6 <Delay_ms+0x1a>
	{
		Delay_counter_ms--;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <Delay_ms+0x2c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <Delay_ms+0x2c>)
 8000fa4:	601a      	str	r2, [r3, #0]
	while (Delay_counter_ms != 0)
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <Delay_ms+0x2c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f6      	bne.n	8000f9c <Delay_ms+0x10>
	}
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200001e0 	.word	0x200001e0

08000fbc <uint16_tToChar>:

	return result * fractionalMultiplier;
}

char uint16_tToChar(uint16_t num)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	1dbb      	adds	r3, r7, #6
 8000fc6:	801a      	strh	r2, [r3, #0]
	switch (num)
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	d818      	bhi.n	8001002 <uint16_tToChar+0x46>
 8000fd0:	009a      	lsls	r2, r3, #2
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <uint16_tToChar+0x50>)
 8000fd4:	18d3      	adds	r3, r2, r3
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	469f      	mov	pc, r3
	{
	case 0:
		return '0';
 8000fda:	2330      	movs	r3, #48	; 0x30
 8000fdc:	e012      	b.n	8001004 <uint16_tToChar+0x48>
	case 1:
		return '1';
 8000fde:	2331      	movs	r3, #49	; 0x31
 8000fe0:	e010      	b.n	8001004 <uint16_tToChar+0x48>
	case 2:
		return '2';
 8000fe2:	2332      	movs	r3, #50	; 0x32
 8000fe4:	e00e      	b.n	8001004 <uint16_tToChar+0x48>
	case 3:
		return '3';
 8000fe6:	2333      	movs	r3, #51	; 0x33
 8000fe8:	e00c      	b.n	8001004 <uint16_tToChar+0x48>
	case 4:
		return '4';
 8000fea:	2334      	movs	r3, #52	; 0x34
 8000fec:	e00a      	b.n	8001004 <uint16_tToChar+0x48>
	case 5:
		return '5';
 8000fee:	2335      	movs	r3, #53	; 0x35
 8000ff0:	e008      	b.n	8001004 <uint16_tToChar+0x48>
	case 6:
		return '6';
 8000ff2:	2336      	movs	r3, #54	; 0x36
 8000ff4:	e006      	b.n	8001004 <uint16_tToChar+0x48>
	case 7:
		return '7';
 8000ff6:	2337      	movs	r3, #55	; 0x37
 8000ff8:	e004      	b.n	8001004 <uint16_tToChar+0x48>
	case 8:
		return '8';
 8000ffa:	2338      	movs	r3, #56	; 0x38
 8000ffc:	e002      	b.n	8001004 <uint16_tToChar+0x48>
	case 9:
		return '9';
 8000ffe:	2339      	movs	r3, #57	; 0x39
 8001000:	e000      	b.n	8001004 <uint16_tToChar+0x48>
	default:
		return '?'; // Повертаємо '?' для невідомого числа
 8001002:	233f      	movs	r3, #63	; 0x3f
	}
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	08002054 	.word	0x08002054

08001010 <writeCHARSEG>:

void writeCHARSEG(char CHAR, uint16_t seg)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	0002      	movs	r2, r0
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	1c0a      	adds	r2, r1, #0
 8001020:	801a      	strh	r2, [r3, #0]
	switch (seg)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d042      	beq.n	80010b0 <writeCHARSEG+0xa0>
 800102a:	dc54      	bgt.n	80010d6 <writeCHARSEG+0xc6>
 800102c:	2b02      	cmp	r3, #2
 800102e:	d02b      	beq.n	8001088 <writeCHARSEG+0x78>
 8001030:	dc51      	bgt.n	80010d6 <writeCHARSEG+0xc6>
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <writeCHARSEG+0x2c>
 8001036:	2b01      	cmp	r3, #1
 8001038:	d013      	beq.n	8001062 <writeCHARSEG+0x52>
 800103a:	e04c      	b.n	80010d6 <writeCHARSEG+0xc6>
	{
	case 0:
		LEDD1_ON();
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2208      	movs	r2, #8
 8001042:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 8001044:	23a0      	movs	r3, #160	; 0xa0
 8001046:	05db      	lsls	r3, r3, #23
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	0352      	lsls	r2, r2, #13
 800104c:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	0552      	lsls	r2, r2, #21
 8001056:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 8001058:	4bef      	ldr	r3, [pc, #956]	; (8001418 <writeCHARSEG+0x408>)
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	0352      	lsls	r2, r2, #13
 800105e:	619a      	str	r2, [r3, #24]
		break;
 8001060:	e04d      	b.n	80010fe <writeCHARSEG+0xee>
	case 1:
		LEDD1_OFF();
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	0312      	lsls	r2, r2, #12
 800106a:	619a      	str	r2, [r3, #24]
		LEDD2_ON();
 800106c:	23a0      	movs	r3, #160	; 0xa0
 800106e:	05db      	lsls	r3, r3, #23
 8001070:	2210      	movs	r2, #16
 8001072:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0552      	lsls	r2, r2, #21
 800107c:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 800107e:	4be6      	ldr	r3, [pc, #920]	; (8001418 <writeCHARSEG+0x408>)
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	0352      	lsls	r2, r2, #13
 8001084:	619a      	str	r2, [r3, #24]
		break;
 8001086:	e03a      	b.n	80010fe <writeCHARSEG+0xee>
	case 2:
		LEDD1_OFF();
 8001088:	23a0      	movs	r3, #160	; 0xa0
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	0312      	lsls	r2, r2, #12
 8001090:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	0352      	lsls	r2, r2, #13
 800109a:	619a      	str	r2, [r3, #24]
		LEDD3_ON();
 800109c:	23a0      	movs	r3, #160	; 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	0152      	lsls	r2, r2, #5
 80010a4:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 80010a6:	4bdc      	ldr	r3, [pc, #880]	; (8001418 <writeCHARSEG+0x408>)
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	0352      	lsls	r2, r2, #13
 80010ac:	619a      	str	r2, [r3, #24]
		break;
 80010ae:	e026      	b.n	80010fe <writeCHARSEG+0xee>
	case 3:
		LEDD1_OFF();
 80010b0:	23a0      	movs	r3, #160	; 0xa0
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	0312      	lsls	r2, r2, #12
 80010b8:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 80010ba:	23a0      	movs	r3, #160	; 0xa0
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	0352      	lsls	r2, r2, #13
 80010c2:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 80010c4:	23a0      	movs	r3, #160	; 0xa0
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	0552      	lsls	r2, r2, #21
 80010cc:	619a      	str	r2, [r3, #24]
		LEDD4_ON();
 80010ce:	4bd2      	ldr	r3, [pc, #840]	; (8001418 <writeCHARSEG+0x408>)
 80010d0:	2210      	movs	r2, #16
 80010d2:	619a      	str	r2, [r3, #24]
		break;
 80010d4:	e013      	b.n	80010fe <writeCHARSEG+0xee>
	default:
		LEDD1_OFF();
 80010d6:	23a0      	movs	r3, #160	; 0xa0
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	0312      	lsls	r2, r2, #12
 80010de:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 80010e0:	23a0      	movs	r3, #160	; 0xa0
 80010e2:	05db      	lsls	r3, r3, #23
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	0352      	lsls	r2, r2, #13
 80010e8:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 80010ea:	23a0      	movs	r3, #160	; 0xa0
 80010ec:	05db      	lsls	r3, r3, #23
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	0552      	lsls	r2, r2, #21
 80010f2:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 80010f4:	4bc8      	ldr	r3, [pc, #800]	; (8001418 <writeCHARSEG+0x408>)
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0352      	lsls	r2, r2, #13
 80010fa:	619a      	str	r2, [r3, #24]
		break;
 80010fc:	46c0      	nop			; (mov r8, r8)
	}
	switch (CHAR)
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3b2e      	subs	r3, #46	; 0x2e
 8001104:	2b31      	cmp	r3, #49	; 0x31
 8001106:	d900      	bls.n	800110a <writeCHARSEG+0xfa>
 8001108:	e1cc      	b.n	80014a4 <writeCHARSEG+0x494>
 800110a:	009a      	lsls	r2, r3, #2
 800110c:	4bc3      	ldr	r3, [pc, #780]	; (800141c <writeCHARSEG+0x40c>)
 800110e:	18d3      	adds	r3, r2, r3
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	469f      	mov	pc, r3
	{
	case 'P':
		LEDa_ON();
 8001114:	23a0      	movs	r3, #160	; 0xa0
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 800111c:	4bbe      	ldr	r3, [pc, #760]	; (8001418 <writeCHARSEG+0x408>)
 800111e:	2202      	movs	r2, #2
 8001120:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 8001122:	23a0      	movs	r3, #160	; 0xa0
 8001124:	05db      	lsls	r3, r3, #23
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	03d2      	lsls	r2, r2, #15
 800112a:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 800112c:	23a0      	movs	r3, #160	; 0xa0
 800112e:	05db      	lsls	r3, r3, #23
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	0392      	lsls	r2, r2, #14
 8001134:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 8001136:	23a0      	movs	r3, #160	; 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001140:	23a0      	movs	r3, #160	; 0xa0
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 800114a:	4bb3      	ldr	r3, [pc, #716]	; (8001418 <writeCHARSEG+0x408>)
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	0252      	lsls	r2, r2, #9
 8001150:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001152:	4bb1      	ldr	r3, [pc, #708]	; (8001418 <writeCHARSEG+0x408>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	0312      	lsls	r2, r2, #12
 8001158:	619a      	str	r2, [r3, #24]
		break;
 800115a:	e1c9      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '_':
		LEDa_OFF();
 800115c:	23a0      	movs	r3, #160	; 0xa0
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0412      	lsls	r2, r2, #16
 8001164:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001166:	4bac      	ldr	r3, [pc, #688]	; (8001418 <writeCHARSEG+0x408>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	0292      	lsls	r2, r2, #10
 800116c:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	2240      	movs	r2, #64	; 0x40
 8001174:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 8001176:	23a0      	movs	r3, #160	; 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	0392      	lsls	r2, r2, #14
 800117e:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001180:	23a0      	movs	r3, #160	; 0xa0
 8001182:	05db      	lsls	r3, r3, #23
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	0512      	lsls	r2, r2, #20
 8001188:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 800118a:	23a0      	movs	r3, #160	; 0xa0
 800118c:	05db      	lsls	r3, r3, #23
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0492      	lsls	r2, r2, #18
 8001192:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001194:	4ba0      	ldr	r3, [pc, #640]	; (8001418 <writeCHARSEG+0x408>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	0252      	lsls	r2, r2, #9
 800119a:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800119c:	4b9e      	ldr	r3, [pc, #632]	; (8001418 <writeCHARSEG+0x408>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	0312      	lsls	r2, r2, #12
 80011a2:	619a      	str	r2, [r3, #24]
		break;
 80011a4:	e1a4      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '.':
		LEDa_OFF();
 80011a6:	23a0      	movs	r3, #160	; 0xa0
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	0412      	lsls	r2, r2, #16
 80011ae:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 80011b0:	4b99      	ldr	r3, [pc, #612]	; (8001418 <writeCHARSEG+0x408>)
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	0292      	lsls	r2, r2, #10
 80011b6:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 80011b8:	23a0      	movs	r3, #160	; 0xa0
 80011ba:	05db      	lsls	r3, r3, #23
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	03d2      	lsls	r2, r2, #15
 80011c0:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	0392      	lsls	r2, r2, #14
 80011ca:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	0512      	lsls	r2, r2, #20
 80011d4:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80011d6:	23a0      	movs	r3, #160	; 0xa0
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	0492      	lsls	r2, r2, #18
 80011de:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80011e0:	4b8d      	ldr	r3, [pc, #564]	; (8001418 <writeCHARSEG+0x408>)
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	0252      	lsls	r2, r2, #9
 80011e6:	619a      	str	r2, [r3, #24]
		LEDdp_ON();
 80011e8:	4b8b      	ldr	r3, [pc, #556]	; (8001418 <writeCHARSEG+0x408>)
 80011ea:	2208      	movs	r2, #8
 80011ec:	619a      	str	r2, [r3, #24]
		break;
 80011ee:	e17f      	b.n	80014f0 <writeCHARSEG+0x4e0>

	case '0':
		LEDa_ON();
 80011f0:	23a0      	movs	r3, #160	; 0xa0
 80011f2:	05db      	lsls	r3, r3, #23
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80011f8:	4b87      	ldr	r3, [pc, #540]	; (8001418 <writeCHARSEG+0x408>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80011fe:	23a0      	movs	r3, #160	; 0xa0
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	2240      	movs	r2, #64	; 0x40
 8001204:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001206:	23a0      	movs	r3, #160	; 0xa0
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	2220      	movs	r2, #32
 800120c:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800120e:	23a0      	movs	r3, #160	; 0xa0
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001218:	23a0      	movs	r3, #160	; 0xa0
 800121a:	05db      	lsls	r3, r3, #23
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001222:	4b7d      	ldr	r3, [pc, #500]	; (8001418 <writeCHARSEG+0x408>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	0252      	lsls	r2, r2, #9
 8001228:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800122a:	4b7b      	ldr	r3, [pc, #492]	; (8001418 <writeCHARSEG+0x408>)
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	0312      	lsls	r2, r2, #12
 8001230:	619a      	str	r2, [r3, #24]
		break;
 8001232:	e15d      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '1':
		LEDa_OFF();
 8001234:	23a0      	movs	r3, #160	; 0xa0
 8001236:	05db      	lsls	r3, r3, #23
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	0412      	lsls	r2, r2, #16
 800123c:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <writeCHARSEG+0x408>)
 8001240:	2202      	movs	r2, #2
 8001242:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001244:	23a0      	movs	r3, #160	; 0xa0
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	2240      	movs	r2, #64	; 0x40
 800124a:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 800124c:	23a0      	movs	r3, #160	; 0xa0
 800124e:	05db      	lsls	r3, r3, #23
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	0392      	lsls	r2, r2, #14
 8001254:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001256:	23a0      	movs	r3, #160	; 0xa0
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	0512      	lsls	r2, r2, #20
 800125e:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001260:	23a0      	movs	r3, #160	; 0xa0
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0492      	lsls	r2, r2, #18
 8001268:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 800126a:	4b6b      	ldr	r3, [pc, #428]	; (8001418 <writeCHARSEG+0x408>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	0252      	lsls	r2, r2, #9
 8001270:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001272:	4b69      	ldr	r3, [pc, #420]	; (8001418 <writeCHARSEG+0x408>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	0312      	lsls	r2, r2, #12
 8001278:	619a      	str	r2, [r3, #24]
		break;
 800127a:	e139      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '2':
		LEDa_ON();
 800127c:	23a0      	movs	r3, #160	; 0xa0
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001284:	4b64      	ldr	r3, [pc, #400]	; (8001418 <writeCHARSEG+0x408>)
 8001286:	2202      	movs	r2, #2
 8001288:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	03d2      	lsls	r2, r2, #15
 8001292:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001294:	23a0      	movs	r3, #160	; 0xa0
 8001296:	05db      	lsls	r3, r3, #23
 8001298:	2220      	movs	r2, #32
 800129a:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	0492      	lsls	r2, r2, #18
 80012ae:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <writeCHARSEG+0x408>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80012b6:	4b58      	ldr	r3, [pc, #352]	; (8001418 <writeCHARSEG+0x408>)
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	619a      	str	r2, [r3, #24]
		break;
 80012be:	e117      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '3':
		LEDa_ON();
 80012c0:	23a0      	movs	r3, #160	; 0xa0
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <writeCHARSEG+0x408>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80012ce:	23a0      	movs	r3, #160	; 0xa0
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 80012d6:	23a0      	movs	r3, #160	; 0xa0
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	2220      	movs	r2, #32
 80012dc:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80012de:	23a0      	movs	r3, #160	; 0xa0
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	0512      	lsls	r2, r2, #20
 80012e6:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80012e8:	23a0      	movs	r3, #160	; 0xa0
 80012ea:	05db      	lsls	r3, r3, #23
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	0492      	lsls	r2, r2, #18
 80012f0:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <writeCHARSEG+0x408>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <writeCHARSEG+0x408>)
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0312      	lsls	r2, r2, #12
 80012fe:	619a      	str	r2, [r3, #24]
		break;
 8001300:	e0f6      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '4':
		LEDa_OFF();
 8001302:	23a0      	movs	r3, #160	; 0xa0
 8001304:	05db      	lsls	r3, r3, #23
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	0412      	lsls	r2, r2, #16
 800130a:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <writeCHARSEG+0x408>)
 800130e:	2202      	movs	r2, #2
 8001310:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001312:	23a0      	movs	r3, #160	; 0xa0
 8001314:	05db      	lsls	r3, r3, #23
 8001316:	2240      	movs	r2, #64	; 0x40
 8001318:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 800131a:	23a0      	movs	r3, #160	; 0xa0
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	0392      	lsls	r2, r2, #14
 8001322:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001324:	23a0      	movs	r3, #160	; 0xa0
 8001326:	05db      	lsls	r3, r3, #23
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	0512      	lsls	r2, r2, #20
 800132c:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 800132e:	23a0      	movs	r3, #160	; 0xa0
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <writeCHARSEG+0x408>)
 800133a:	2201      	movs	r2, #1
 800133c:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <writeCHARSEG+0x408>)
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	0312      	lsls	r2, r2, #12
 8001344:	619a      	str	r2, [r3, #24]
		break;
 8001346:	e0d3      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '5':
		LEDa_ON();
 8001348:	23a0      	movs	r3, #160	; 0xa0
 800134a:	05db      	lsls	r3, r3, #23
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <writeCHARSEG+0x408>)
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	0292      	lsls	r2, r2, #10
 8001356:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001358:	23a0      	movs	r3, #160	; 0xa0
 800135a:	05db      	lsls	r3, r3, #23
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	2220      	movs	r2, #32
 8001366:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001368:	23a0      	movs	r3, #160	; 0xa0
 800136a:	05db      	lsls	r3, r3, #23
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	0512      	lsls	r2, r2, #20
 8001370:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001372:	23a0      	movs	r3, #160	; 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <writeCHARSEG+0x408>)
 800137e:	2201      	movs	r2, #1
 8001380:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <writeCHARSEG+0x408>)
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	0312      	lsls	r2, r2, #12
 8001388:	619a      	str	r2, [r3, #24]
		break;
 800138a:	e0b1      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '6':
		LEDa_ON();
 800138c:	23a0      	movs	r3, #160	; 0xa0
 800138e:	05db      	lsls	r3, r3, #23
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <writeCHARSEG+0x408>)
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	0292      	lsls	r2, r2, #10
 800139a:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800139c:	23a0      	movs	r3, #160	; 0xa0
 800139e:	05db      	lsls	r3, r3, #23
 80013a0:	2240      	movs	r2, #64	; 0x40
 80013a2:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 80013a4:	23a0      	movs	r3, #160	; 0xa0
 80013a6:	05db      	lsls	r3, r3, #23
 80013a8:	2220      	movs	r2, #32
 80013aa:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 80013ac:	23a0      	movs	r3, #160	; 0xa0
 80013ae:	05db      	lsls	r3, r3, #23
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 80013b6:	23a0      	movs	r3, #160	; 0xa0
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <writeCHARSEG+0x408>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <writeCHARSEG+0x408>)
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	0312      	lsls	r2, r2, #12
 80013cc:	619a      	str	r2, [r3, #24]
		break;
 80013ce:	e08f      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '7':
		LEDa_ON();
 80013d0:	23a0      	movs	r3, #160	; 0xa0
 80013d2:	05db      	lsls	r3, r3, #23
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <writeCHARSEG+0x408>)
 80013da:	2202      	movs	r2, #2
 80013dc:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80013de:	23a0      	movs	r3, #160	; 0xa0
 80013e0:	05db      	lsls	r3, r3, #23
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80013e6:	23a0      	movs	r3, #160	; 0xa0
 80013e8:	05db      	lsls	r3, r3, #23
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	0392      	lsls	r2, r2, #14
 80013ee:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80013f0:	23a0      	movs	r3, #160	; 0xa0
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	0512      	lsls	r2, r2, #20
 80013f8:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80013fa:	23a0      	movs	r3, #160	; 0xa0
 80013fc:	05db      	lsls	r3, r3, #23
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0492      	lsls	r2, r2, #18
 8001402:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <writeCHARSEG+0x408>)
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	0252      	lsls	r2, r2, #9
 800140a:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <writeCHARSEG+0x408>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	0312      	lsls	r2, r2, #12
 8001412:	619a      	str	r2, [r3, #24]
		break;
 8001414:	e06c      	b.n	80014f0 <writeCHARSEG+0x4e0>
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	50000400 	.word	0x50000400
 800141c:	0800207c 	.word	0x0800207c
	case '8':
		LEDa_ON();
 8001420:	23a0      	movs	r3, #160	; 0xa0
 8001422:	05db      	lsls	r3, r3, #23
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <writeCHARSEG+0x4e8>)
 800142a:	2202      	movs	r2, #2
 800142c:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800142e:	23a0      	movs	r3, #160	; 0xa0
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	2240      	movs	r2, #64	; 0x40
 8001434:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	2220      	movs	r2, #32
 800143c:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800143e:	23a0      	movs	r3, #160	; 0xa0
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001448:	23a0      	movs	r3, #160	; 0xa0
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <writeCHARSEG+0x4e8>)
 8001454:	2201      	movs	r2, #1
 8001456:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <writeCHARSEG+0x4e8>)
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0312      	lsls	r2, r2, #12
 800145e:	619a      	str	r2, [r3, #24]
		break;
 8001460:	e046      	b.n	80014f0 <writeCHARSEG+0x4e0>
	case '9':
		LEDa_ON();
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <writeCHARSEG+0x4e8>)
 800146c:	2202      	movs	r2, #2
 800146e:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	2240      	movs	r2, #64	; 0x40
 8001476:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001478:	23a0      	movs	r3, #160	; 0xa0
 800147a:	05db      	lsls	r3, r3, #23
 800147c:	2220      	movs	r2, #32
 800147e:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	0512      	lsls	r2, r2, #20
 8001488:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 800148a:	23a0      	movs	r3, #160	; 0xa0
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <writeCHARSEG+0x4e8>)
 8001496:	2201      	movs	r2, #1
 8001498:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <writeCHARSEG+0x4e8>)
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	0312      	lsls	r2, r2, #12
 80014a0:	619a      	str	r2, [r3, #24]
		break;
 80014a2:	e025      	b.n	80014f0 <writeCHARSEG+0x4e0>
	default:
		LEDa_OFF();
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	05db      	lsls	r3, r3, #23
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0412      	lsls	r2, r2, #16
 80014ac:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <writeCHARSEG+0x4e8>)
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	0292      	lsls	r2, r2, #10
 80014b4:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 80014b6:	23a0      	movs	r3, #160	; 0xa0
 80014b8:	05db      	lsls	r3, r3, #23
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80014c0:	23a0      	movs	r3, #160	; 0xa0
 80014c2:	05db      	lsls	r3, r3, #23
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	0392      	lsls	r2, r2, #14
 80014c8:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80014ca:	23a0      	movs	r3, #160	; 0xa0
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	0512      	lsls	r2, r2, #20
 80014d2:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80014d4:	23a0      	movs	r3, #160	; 0xa0
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	0492      	lsls	r2, r2, #18
 80014dc:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <writeCHARSEG+0x4e8>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	0252      	lsls	r2, r2, #9
 80014e4:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <writeCHARSEG+0x4e8>)
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	0312      	lsls	r2, r2, #12
 80014ec:	619a      	str	r2, [r3, #24]
		break;
 80014ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	50000400 	.word	0x50000400

080014fc <Clock>:
		TIM21->CCR1 = 0;
	}
}

uint16_t Clock()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
	char tmpClock[4] = {};
 8001502:	003b      	movs	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
	uint16_t j = 0;
 8001508:	1dbb      	adds	r3, r7, #6
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
	tmpClock[0] = READ_BIT(RTC->TR, RTC_TR_HT);
 800150e:	4b41      	ldr	r3, [pc, #260]	; (8001614 <Clock+0x118>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	003b      	movs	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
	if (tmpClock[0] == 0)
 8001518:	003b      	movs	r3, r7
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <Clock+0x2a>
	{
		j = 1;
 8001520:	1dbb      	adds	r3, r7, #6
 8001522:	2201      	movs	r2, #1
 8001524:	801a      	strh	r2, [r3, #0]
	}
	tmpClock[1] = READ_BIT(RTC->TR, RTC_TR_HU);
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <Clock+0x118>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	003b      	movs	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	705a      	strb	r2, [r3, #1]
	tmpClock[2] = READ_BIT(RTC->TR, RTC_TR_MNT);
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <Clock+0x118>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	003b      	movs	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	709a      	strb	r2, [r3, #2]
	tmpClock[3] = READ_BIT(RTC->TR, RTC_TR_MNU);
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <Clock+0x118>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	003b      	movs	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	70da      	strb	r2, [r3, #3]

	if (((READ_BIT(RTC->TR, RTC_TR_HT) * 10 + READ_BIT(RTC->TR, RTC_TR_HU) > 5) && (READ_BIT(RTC->TR, RTC_TR_HT) * 10 + READ_BIT(RTC->TR, RTC_TR_HU) < 22)) || flagDecrementButton || flagEnterButton || flagIncrementButton || flagDecrementButtonLong || flagEnterButtonLong || flagIncrementButtonLong)
 8001544:	4b33      	ldr	r3, [pc, #204]	; (8001614 <Clock+0x118>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	23c0      	movs	r3, #192	; 0xc0
 800154a:	039b      	lsls	r3, r3, #14
 800154c:	401a      	ands	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	189b      	adds	r3, r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	0019      	movs	r1, r3
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <Clock+0x118>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	23f0      	movs	r3, #240	; 0xf0
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	4013      	ands	r3, r2
 8001562:	18cb      	adds	r3, r1, r3
 8001564:	2b05      	cmp	r3, #5
 8001566:	d911      	bls.n	800158c <Clock+0x90>
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <Clock+0x118>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	23c0      	movs	r3, #192	; 0xc0
 800156e:	039b      	lsls	r3, r3, #14
 8001570:	401a      	ands	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	189b      	adds	r3, r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	0019      	movs	r1, r3
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <Clock+0x118>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	23f0      	movs	r3, #240	; 0xf0
 8001582:	031b      	lsls	r3, r3, #12
 8001584:	4013      	ands	r3, r2
 8001586:	18cb      	adds	r3, r1, r3
 8001588:	2b15      	cmp	r3, #21
 800158a:	d917      	bls.n	80015bc <Clock+0xc0>
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <Clock+0x11c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d113      	bne.n	80015bc <Clock+0xc0>
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <Clock+0x120>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10f      	bne.n	80015bc <Clock+0xc0>
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <Clock+0x124>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10b      	bne.n	80015bc <Clock+0xc0>
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <Clock+0x128>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d107      	bne.n	80015bc <Clock+0xc0>
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <Clock+0x12c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <Clock+0xc0>
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <Clock+0x130>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01a      	beq.n	80015f2 <Clock+0xf6>
	{
		for (uint16_t i = 0 + j; i < 4; i++)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	1dba      	adds	r2, r7, #6
 80015c0:	8812      	ldrh	r2, [r2, #0]
 80015c2:	801a      	strh	r2, [r3, #0]
 80015c4:	e011      	b.n	80015ea <Clock+0xee>
		{
			writeCHARSEG(tmpClock[i], i);
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	003a      	movs	r2, r7
 80015cc:	5cd2      	ldrb	r2, [r2, r3]
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	0019      	movs	r1, r3
 80015d4:	0010      	movs	r0, r2
 80015d6:	f7ff fd1b 	bl	8001010 <writeCHARSEG>
			Delay_ms(50);
 80015da:	2032      	movs	r0, #50	; 0x32
 80015dc:	f7ff fcd6 	bl	8000f8c <Delay_ms>
		for (uint16_t i = 0 + j; i < 4; i++)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	881a      	ldrh	r2, [r3, #0]
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	3201      	adds	r2, #1
 80015e8:	801a      	strh	r2, [r3, #0]
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d9e9      	bls.n	80015c6 <Clock+0xca>
		}
	}
	return flagDecrementButtonLong && flagIncrementButtonLong ? 0 : 1;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <Clock+0x128>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <Clock+0x106>
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <Clock+0x130>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <Clock+0x10a>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <Clock+0x10c>
 8001606:	2300      	movs	r3, #0
 8001608:	b29b      	uxth	r3, r3
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	40002800 	.word	0x40002800
 8001618:	200001c4 	.word	0x200001c4
 800161c:	200001c5 	.word	0x200001c5
 8001620:	200001c6 	.word	0x200001c6
 8001624:	200001c7 	.word	0x200001c7
 8001628:	200001c8 	.word	0x200001c8
 800162c:	200001c9 	.word	0x200001c9

08001630 <setTimeNow>:

void setTimeNow()
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	af00      	add	r7, sp, #0
	MODIFY_REG(RTC->TR,
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <setTimeNow+0x130>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <setTimeNow+0x134>)
 800163a:	4013      	ands	r3, r2
 800163c:	001c      	movs	r4, r3
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <setTimeNow+0x138>)
 8001640:	8b5b      	ldrh	r3, [r3, #26]
 8001642:	210a      	movs	r1, #10
 8001644:	0018      	movs	r0, r3
 8001646:	f7fe fd5f 	bl	8000108 <__udivsi3>
 800164a:	0003      	movs	r3, r0
 800164c:	b29b      	uxth	r3, r3
 800164e:	051d      	lsls	r5, r3, #20
 8001650:	4b45      	ldr	r3, [pc, #276]	; (8001768 <setTimeNow+0x138>)
 8001652:	8b5b      	ldrh	r3, [r3, #26]
 8001654:	210a      	movs	r1, #10
 8001656:	0018      	movs	r0, r3
 8001658:	f7fe fddc 	bl	8000214 <__aeabi_uidivmod>
 800165c:	000b      	movs	r3, r1
 800165e:	b29b      	uxth	r3, r3
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	431d      	orrs	r5, r3
 8001664:	4b40      	ldr	r3, [pc, #256]	; (8001768 <setTimeNow+0x138>)
 8001666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001668:	210a      	movs	r1, #10
 800166a:	0018      	movs	r0, r3
 800166c:	f7fe fd4c 	bl	8000108 <__udivsi3>
 8001670:	0003      	movs	r3, r0
 8001672:	b29b      	uxth	r3, r3
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	431d      	orrs	r5, r3
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <setTimeNow+0x138>)
 800167a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167c:	210a      	movs	r1, #10
 800167e:	0018      	movs	r0, r3
 8001680:	f7fe fdc8 	bl	8000214 <__aeabi_uidivmod>
 8001684:	000b      	movs	r3, r1
 8001686:	b29b      	uxth	r3, r3
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	431d      	orrs	r5, r3
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <setTimeNow+0x138>)
 800168e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001690:	210a      	movs	r1, #10
 8001692:	0018      	movs	r0, r3
 8001694:	f7fe fd38 	bl	8000108 <__udivsi3>
 8001698:	0003      	movs	r3, r0
 800169a:	b29b      	uxth	r3, r3
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	431d      	orrs	r5, r3
 80016a0:	4b31      	ldr	r3, [pc, #196]	; (8001768 <setTimeNow+0x138>)
 80016a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80016a4:	210a      	movs	r1, #10
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7fe fdb4 	bl	8000214 <__aeabi_uidivmod>
 80016ac:	000b      	movs	r3, r1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	432b      	orrs	r3, r5
 80016b2:	001a      	movs	r2, r3
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <setTimeNow+0x130>)
 80016b6:	4322      	orrs	r2, r4
 80016b8:	601a      	str	r2, [r3, #0]
				   (menu[1].value % 10 << RTC_TR_HU_Pos) |	// Hour units (7 -> 17)
				   (menu[2].value / 10 << RTC_TR_MNT_Pos) | // Minute tens (3 -> 36)
				   (menu[2].value % 10 << RTC_TR_MNU_Pos) | // Minute units (6 -> 36)
				   (menu[3].value / 10 << RTC_TR_ST_Pos) |	// Second tens (0 -> 00)
				   (menu[3].value % 10 << RTC_TR_SU_Pos));	// Second units (0 -> 00)
	MODIFY_REG(RTC->DR,
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <setTimeNow+0x130>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a2b      	ldr	r2, [pc, #172]	; (800176c <setTimeNow+0x13c>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	001c      	movs	r4, r3
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <setTimeNow+0x138>)
 80016c6:	226a      	movs	r2, #106	; 0x6a
 80016c8:	5a9b      	ldrh	r3, [r3, r2]
 80016ca:	210a      	movs	r1, #10
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7fe fd1b 	bl	8000108 <__udivsi3>
 80016d2:	0003      	movs	r3, r0
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	051d      	lsls	r5, r3, #20
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <setTimeNow+0x138>)
 80016da:	226a      	movs	r2, #106	; 0x6a
 80016dc:	5a9b      	ldrh	r3, [r3, r2]
 80016de:	210a      	movs	r1, #10
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7fe fd97 	bl	8000214 <__aeabi_uidivmod>
 80016e6:	000b      	movs	r3, r1
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	431d      	orrs	r5, r3
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <setTimeNow+0x138>)
 80016f0:	225a      	movs	r2, #90	; 0x5a
 80016f2:	5a9b      	ldrh	r3, [r3, r2]
 80016f4:	210a      	movs	r1, #10
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7fe fd06 	bl	8000108 <__udivsi3>
 80016fc:	0003      	movs	r3, r0
 80016fe:	b29b      	uxth	r3, r3
 8001700:	031b      	lsls	r3, r3, #12
 8001702:	431d      	orrs	r5, r3
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <setTimeNow+0x138>)
 8001706:	225a      	movs	r2, #90	; 0x5a
 8001708:	5a9b      	ldrh	r3, [r3, r2]
 800170a:	210a      	movs	r1, #10
 800170c:	0018      	movs	r0, r3
 800170e:	f7fe fd81 	bl	8000214 <__aeabi_uidivmod>
 8001712:	000b      	movs	r3, r1
 8001714:	b29b      	uxth	r3, r3
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	431d      	orrs	r5, r3
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <setTimeNow+0x138>)
 800171c:	224a      	movs	r2, #74	; 0x4a
 800171e:	5a9b      	ldrh	r3, [r3, r2]
 8001720:	210a      	movs	r1, #10
 8001722:	0018      	movs	r0, r3
 8001724:	f7fe fcf0 	bl	8000108 <__udivsi3>
 8001728:	0003      	movs	r3, r0
 800172a:	b29b      	uxth	r3, r3
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	431d      	orrs	r5, r3
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <setTimeNow+0x138>)
 8001732:	224a      	movs	r2, #74	; 0x4a
 8001734:	5a9b      	ldrh	r3, [r3, r2]
 8001736:	210a      	movs	r1, #10
 8001738:	0018      	movs	r0, r3
 800173a:	f7fe fd6b 	bl	8000214 <__aeabi_uidivmod>
 800173e:	000b      	movs	r3, r1
 8001740:	b29b      	uxth	r3, r3
 8001742:	002a      	movs	r2, r5
 8001744:	431a      	orrs	r2, r3
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <setTimeNow+0x138>)
 8001748:	217a      	movs	r1, #122	; 0x7a
 800174a:	5a5b      	ldrh	r3, [r3, r1]
 800174c:	035b      	lsls	r3, r3, #13
 800174e:	4313      	orrs	r3, r2
 8001750:	001a      	movs	r2, r3
 8001752:	4b03      	ldr	r3, [pc, #12]	; (8001760 <setTimeNow+0x130>)
 8001754:	4322      	orrs	r2, r4
 8001756:	605a      	str	r2, [r3, #4]
				   (menu[5].value / 10 << RTC_DR_MT_Pos) | // Month tens (1 -> April)
				   (menu[5].value % 10 << RTC_DR_MU_Pos) | // Month units (0 -> April)
				   (menu[4].value / 10 << RTC_DR_DT_Pos) | // Day tens (0 -> 01)
				   (menu[4].value % 10 << RTC_DR_DU_Pos) | // Day units (1 -> 01)
				   (menu[7].value << RTC_DR_WDU_Pos));	   // Weekday (3 -> Monday)
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	bdb0      	pop	{r4, r5, r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40002800 	.word	0x40002800
 8001764:	ffc08080 	.word	0xffc08080
 8001768:	20000008 	.word	0x20000008
 800176c:	ff0000c0 	.word	0xff0000c0

08001770 <setActualMenu>:

char *setActualMenu(uint16_t v, uint16_t h)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	0002      	movs	r2, r0
 8001778:	1dbb      	adds	r3, r7, #6
 800177a:	801a      	strh	r2, [r3, #0]
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	1c0a      	adds	r2, r1, #0
 8001780:	801a      	strh	r2, [r3, #0]
	if (v != 0)
 8001782:	1dbb      	adds	r3, r7, #6
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d100      	bne.n	800178c <setActualMenu+0x1c>
 800178a:	e08d      	b.n	80018a8 <setActualMenu+0x138>
				}
			}
		}
		else
		{ // Якщо команда ВН�?З - входу/редагування
			if (menu[actualIndex].isParam && !isParamEditMode)
 800178c:	4bb9      	ldr	r3, [pc, #740]	; (8001a74 <setActualMenu+0x304>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	4ab9      	ldr	r2, [pc, #740]	; (8001a78 <setActualMenu+0x308>)
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	3304      	adds	r3, #4
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d013      	beq.n	80017c6 <setActualMenu+0x56>
 800179e:	4bb7      	ldr	r3, [pc, #732]	; (8001a7c <setActualMenu+0x30c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4053      	eors	r3, r2
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00c      	beq.n	80017c6 <setActualMenu+0x56>
			{										 // Якщо не в режимі редагування, то ...
				isParamEditMode = true;				 // Переходимо в режим редагування параметра
 80017ac:	4bb3      	ldr	r3, [pc, #716]	; (8001a7c <setActualMenu+0x30c>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
				tmpVValue = menu[actualIndex].value; // Тимчасовій змінній присвоюємо актуальне значення параметра
 80017b2:	4bb0      	ldr	r3, [pc, #704]	; (8001a74 <setActualMenu+0x304>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	4ab0      	ldr	r2, [pc, #704]	; (8001a78 <setActualMenu+0x308>)
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	330a      	adds	r3, #10
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	4baf      	ldr	r3, [pc, #700]	; (8001a80 <setActualMenu+0x310>)
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	e070      	b.n	80018a8 <setActualMenu+0x138>
			}
			else if (menu[actualIndex].isParam && isParamEditMode)
 80017c6:	4bab      	ldr	r3, [pc, #684]	; (8001a74 <setActualMenu+0x304>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	4aab      	ldr	r2, [pc, #684]	; (8001a78 <setActualMenu+0x308>)
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	3304      	adds	r3, #4
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d012      	beq.n	80017fe <setActualMenu+0x8e>
 80017d8:	4ba8      	ldr	r3, [pc, #672]	; (8001a7c <setActualMenu+0x30c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00e      	beq.n	80017fe <setActualMenu+0x8e>
			{										 // Якщо в режимі редагування
				menu[actualIndex].value = tmpVValue; // Зберігаємо задане значення
 80017e0:	4ba4      	ldr	r3, [pc, #656]	; (8001a74 <setActualMenu+0x304>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	0018      	movs	r0, r3
 80017e6:	4ba6      	ldr	r3, [pc, #664]	; (8001a80 <setActualMenu+0x310>)
 80017e8:	8819      	ldrh	r1, [r3, #0]
 80017ea:	4aa3      	ldr	r2, [pc, #652]	; (8001a78 <setActualMenu+0x308>)
 80017ec:	0103      	lsls	r3, r0, #4
 80017ee:	18d3      	adds	r3, r2, r3
 80017f0:	330a      	adds	r3, #10
 80017f2:	1c0a      	adds	r2, r1, #0
 80017f4:	801a      	strh	r2, [r3, #0]
				isParamEditMode = false;			 // І виходимо з режиму редагування
 80017f6:	4ba1      	ldr	r3, [pc, #644]	; (8001a7c <setActualMenu+0x30c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e054      	b.n	80018a8 <setActualMenu+0x138>
			}
			else
			{
				bool nochild = true; // Прапорець, чи є дочірні елементи
 80017fe:	230f      	movs	r3, #15
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
				for (uint16_t i = 0; i < menuArraySize; i++)
 8001806:	230c      	movs	r3, #12
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2200      	movs	r2, #0
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	e01e      	b.n	800184e <setActualMenu+0xde>
				{
					if (menu[i].parentid == menu[actualIndex].id)
 8001810:	200c      	movs	r0, #12
 8001812:	183b      	adds	r3, r7, r0
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	4a98      	ldr	r2, [pc, #608]	; (8001a78 <setActualMenu+0x308>)
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	18d3      	adds	r3, r2, r3
 800181c:	3302      	adds	r3, #2
 800181e:	881a      	ldrh	r2, [r3, #0]
 8001820:	4b94      	ldr	r3, [pc, #592]	; (8001a74 <setActualMenu+0x304>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	0019      	movs	r1, r3
 8001826:	4b94      	ldr	r3, [pc, #592]	; (8001a78 <setActualMenu+0x308>)
 8001828:	0109      	lsls	r1, r1, #4
 800182a:	5acb      	ldrh	r3, [r1, r3]
 800182c:	429a      	cmp	r2, r3
 800182e:	d108      	bne.n	8001842 <setActualMenu+0xd2>
					{
						actualIndex = i; // Якщо є, робимо перший попавшийся актуальним елементом
 8001830:	4b90      	ldr	r3, [pc, #576]	; (8001a74 <setActualMenu+0x304>)
 8001832:	183a      	adds	r2, r7, r0
 8001834:	8812      	ldrh	r2, [r2, #0]
 8001836:	801a      	strh	r2, [r3, #0]
						nochild = false; // Потомки є
 8001838:	230f      	movs	r3, #15
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
						break;			 // Виходимо з for
 8001840:	e00c      	b.n	800185c <setActualMenu+0xec>
				for (uint16_t i = 0; i < menuArraySize; i++)
 8001842:	210c      	movs	r1, #12
 8001844:	187b      	adds	r3, r7, r1
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	187b      	adds	r3, r7, r1
 800184a:	3201      	adds	r2, #1
 800184c:	801a      	strh	r2, [r3, #0]
 800184e:	4b8d      	ldr	r3, [pc, #564]	; (8001a84 <setActualMenu+0x314>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	220c      	movs	r2, #12
 8001854:	18ba      	adds	r2, r7, r2
 8001856:	8812      	ldrh	r2, [r2, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3d9      	bcc.n	8001810 <setActualMenu+0xa0>
					}
				}
				if (nochild)
 800185c:	230f      	movs	r3, #15
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d020      	beq.n	80018a8 <setActualMenu+0x138>
				{ // Якщо ж потомків немає, воспринимаємо як команду
					switch (menu[actualIndex].id)
 8001866:	4b83      	ldr	r3, [pc, #524]	; (8001a74 <setActualMenu+0x304>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	001a      	movs	r2, r3
 800186c:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <setActualMenu+0x308>)
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	5ad3      	ldrh	r3, [r2, r3]
 8001872:	2b11      	cmp	r3, #17
 8001874:	d012      	beq.n	800189c <setActualMenu+0x12c>
 8001876:	dc16      	bgt.n	80018a6 <setActualMenu+0x136>
 8001878:	2b04      	cmp	r3, #4
 800187a:	d002      	beq.n	8001882 <setActualMenu+0x112>
 800187c:	2b0d      	cmp	r3, #13
 800187e:	d003      	beq.n	8001888 <setActualMenu+0x118>
						{
							Clock();
						}
						break;
					default:
						break;
 8001880:	e011      	b.n	80018a6 <setActualMenu+0x136>
						setTimeNow();
 8001882:	f7ff fed5 	bl	8001630 <setTimeNow>
						break;
 8001886:	e00f      	b.n	80018a8 <setActualMenu+0x138>
						StartMusic(menu[19].value); // *19 		P_3.3	Alarm_Melody
 8001888:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <setActualMenu+0x308>)
 800188a:	239d      	movs	r3, #157	; 0x9d
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	5ad3      	ldrh	r3, [r2, r3]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f961 	bl	8001b58 <StartMusic>
						break;
 8001896:	e007      	b.n	80018a8 <setActualMenu+0x138>
							Clock();
 8001898:	f7ff fe30 	bl	80014fc <Clock>
						while (Clock())
 800189c:	f7ff fe2e 	bl	80014fc <Clock>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d1f9      	bne.n	8001898 <setActualMenu+0x128>
						break;
 80018a4:	e000      	b.n	80018a8 <setActualMenu+0x138>
						break;
 80018a6:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if (h != 0)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d04a      	beq.n	8001946 <setActualMenu+0x1d6>
	{ // Якщо горизонтальна навігація
		if (isParamEditMode)
 80018b0:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <setActualMenu+0x30c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d030      	beq.n	800191a <setActualMenu+0x1aa>
		{					// У режимі редагування параметра
			tmpVValue += h; // Змінюємо його значення і ...
 80018b8:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <setActualMenu+0x310>)
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	18d3      	adds	r3, r2, r3
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b6e      	ldr	r3, [pc, #440]	; (8001a80 <setActualMenu+0x310>)
 80018c6:	801a      	strh	r2, [r3, #0]
			// ... контролюємо, щоб воно залишилося в заданому діапазоні
			if (tmpVValue > menu[actualIndex]._max)
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <setActualMenu+0x304>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	4a6a      	ldr	r2, [pc, #424]	; (8001a78 <setActualMenu+0x308>)
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	330e      	adds	r3, #14
 80018d4:	881a      	ldrh	r2, [r3, #0]
 80018d6:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <setActualMenu+0x310>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d208      	bcs.n	80018f0 <setActualMenu+0x180>
				tmpVValue = menu[actualIndex]._min;
 80018de:	4b65      	ldr	r3, [pc, #404]	; (8001a74 <setActualMenu+0x304>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	4a65      	ldr	r2, [pc, #404]	; (8001a78 <setActualMenu+0x308>)
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	18d3      	adds	r3, r2, r3
 80018e8:	330c      	adds	r3, #12
 80018ea:	881a      	ldrh	r2, [r3, #0]
 80018ec:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <setActualMenu+0x310>)
 80018ee:	801a      	strh	r2, [r3, #0]
			if (tmpVValue < menu[actualIndex]._min)
 80018f0:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <setActualMenu+0x304>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	4a60      	ldr	r2, [pc, #384]	; (8001a78 <setActualMenu+0x308>)
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	18d3      	adds	r3, r2, r3
 80018fa:	330c      	adds	r3, #12
 80018fc:	881a      	ldrh	r2, [r3, #0]
 80018fe:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <setActualMenu+0x310>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d91f      	bls.n	8001946 <setActualMenu+0x1d6>
				tmpVValue = menu[actualIndex]._max;
 8001906:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <setActualMenu+0x304>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	4a5b      	ldr	r2, [pc, #364]	; (8001a78 <setActualMenu+0x308>)
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	18d3      	adds	r3, r2, r3
 8001910:	330e      	adds	r3, #14
 8001912:	881a      	ldrh	r2, [r3, #0]
 8001914:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <setActualMenu+0x310>)
 8001916:	801a      	strh	r2, [r3, #0]
 8001918:	e015      	b.n	8001946 <setActualMenu+0x1d6>
		}
		else
		{ // Якщо режим редагування не активний, навігація серед дочірніх одного батька
			actualIndex = getNearMenuIndexByID(menu[actualIndex].parentid,
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <setActualMenu+0x304>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	4a56      	ldr	r2, [pc, #344]	; (8001a78 <setActualMenu+0x308>)
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	18d3      	adds	r3, r2, r3
 8001924:	3302      	adds	r3, #2
 8001926:	8818      	ldrh	r0, [r3, #0]
 8001928:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <setActualMenu+0x304>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	001a      	movs	r2, r3
 800192e:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <setActualMenu+0x308>)
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	5ad1      	ldrh	r1, [r2, r3]
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	f000 f8a7 	bl	8001a8c <getNearMenuIndexByID>
 800193e:	0003      	movs	r3, r0
 8001940:	001a      	movs	r2, r3
 8001942:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <setActualMenu+0x304>)
 8001944:	801a      	strh	r2, [r3, #0]
											   menu[actualIndex].id, h);
		}
	}
	// Отображаем информацию
	if (isParamEditMode)
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <setActualMenu+0x30c>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d100      	bne.n	8001950 <setActualMenu+0x1e0>
 800194e:	e086      	b.n	8001a5e <setActualMenu+0x2ee>
	{
		tmpV[0] = uint16_tToChar(tmpVValue / 1000);
 8001950:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <setActualMenu+0x310>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	22fa      	movs	r2, #250	; 0xfa
 8001956:	0091      	lsls	r1, r2, #2
 8001958:	0018      	movs	r0, r3
 800195a:	f7fe fbd5 	bl	8000108 <__udivsi3>
 800195e:	0003      	movs	r3, r0
 8001960:	b29b      	uxth	r3, r3
 8001962:	0018      	movs	r0, r3
 8001964:	f7ff fb2a 	bl	8000fbc <uint16_tToChar>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <setActualMenu+0x318>)
 800196e:	701a      	strb	r2, [r3, #0]
		tmpV[1] = uint16_tToChar(tmpVValue / 100 - tmpV[0] * 10);
 8001970:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <setActualMenu+0x310>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	2164      	movs	r1, #100	; 0x64
 8001976:	0018      	movs	r0, r3
 8001978:	f7fe fbc6 	bl	8000108 <__udivsi3>
 800197c:	0003      	movs	r3, r0
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <setActualMenu+0x318>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	1c19      	adds	r1, r3, #0
 8001988:	0349      	lsls	r1, r1, #13
 800198a:	1ac9      	subs	r1, r1, r3
 800198c:	0089      	lsls	r1, r1, #2
 800198e:	1acb      	subs	r3, r1, r3
 8001990:	18db      	adds	r3, r3, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	b29b      	uxth	r3, r3
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff fb0f 	bl	8000fbc <uint16_tToChar>
 800199e:	0003      	movs	r3, r0
 80019a0:	001a      	movs	r2, r3
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <setActualMenu+0x318>)
 80019a4:	705a      	strb	r2, [r3, #1]
		tmpV[2] = uint16_tToChar(tmpVValue / 10 - tmpV[0] * 100 - tmpV[1] * 10);
 80019a6:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <setActualMenu+0x310>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	210a      	movs	r1, #10
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7fe fbab 	bl	8000108 <__udivsi3>
 80019b2:	0003      	movs	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <setActualMenu+0x318>)
 80019b8:	785b      	ldrb	r3, [r3, #1]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	1c19      	adds	r1, r3, #0
 80019be:	0349      	lsls	r1, r1, #13
 80019c0:	1ac9      	subs	r1, r1, r3
 80019c2:	0089      	lsls	r1, r1, #2
 80019c4:	1acb      	subs	r3, r1, r3
 80019c6:	18db      	adds	r3, r3, r3
 80019c8:	b299      	uxth	r1, r3
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <setActualMenu+0x318>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	1c18      	adds	r0, r3, #0
 80019d2:	0240      	lsls	r0, r0, #9
 80019d4:	1ac0      	subs	r0, r0, r3
 80019d6:	0080      	lsls	r0, r0, #2
 80019d8:	18c0      	adds	r0, r0, r3
 80019da:	00c0      	lsls	r0, r0, #3
 80019dc:	1ac3      	subs	r3, r0, r3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	18cb      	adds	r3, r1, r3
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	18d3      	adds	r3, r2, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff fae6 	bl	8000fbc <uint16_tToChar>
 80019f0:	0003      	movs	r3, r0
 80019f2:	001a      	movs	r2, r3
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <setActualMenu+0x318>)
 80019f6:	709a      	strb	r2, [r3, #2]
		tmpV[3] = uint16_tToChar(tmpVValue - tmpV[0] * 1000 - tmpV[1] * 100 - tmpV[2] * 10);
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <setActualMenu+0x318>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	1c1a      	adds	r2, r3, #0
 8001a00:	0192      	lsls	r2, r2, #6
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0192      	lsls	r2, r2, #6
 8001a06:	18d2      	adds	r2, r2, r3
 8001a08:	1892      	adds	r2, r2, r2
 8001a0a:	18d3      	adds	r3, r2, r3
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <setActualMenu+0x318>)
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	1c19      	adds	r1, r3, #0
 8001a18:	0249      	lsls	r1, r1, #9
 8001a1a:	1ac9      	subs	r1, r1, r3
 8001a1c:	0089      	lsls	r1, r1, #2
 8001a1e:	18c9      	adds	r1, r1, r3
 8001a20:	00c9      	lsls	r1, r1, #3
 8001a22:	1acb      	subs	r3, r1, r3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	18d3      	adds	r3, r2, r3
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <setActualMenu+0x310>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	18d3      	adds	r3, r2, r3
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <setActualMenu+0x318>)
 8001a36:	789b      	ldrb	r3, [r3, #2]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	1c19      	adds	r1, r3, #0
 8001a3c:	0349      	lsls	r1, r1, #13
 8001a3e:	1ac9      	subs	r1, r1, r3
 8001a40:	0089      	lsls	r1, r1, #2
 8001a42:	1acb      	subs	r3, r1, r3
 8001a44:	18db      	adds	r3, r3, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	18d3      	adds	r3, r2, r3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff fab5 	bl	8000fbc <uint16_tToChar>
 8001a52:	0003      	movs	r3, r0
 8001a54:	001a      	movs	r2, r3
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <setActualMenu+0x318>)
 8001a58:	70da      	strb	r2, [r3, #3]
		return tmpV;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <setActualMenu+0x318>)
 8001a5c:	e005      	b.n	8001a6a <setActualMenu+0x2fa>
	}
	else
	{
		return menu[actualIndex]._name;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <setActualMenu+0x304>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	011a      	lsls	r2, r3, #4
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <setActualMenu+0x308>)
 8001a66:	18d3      	adds	r3, r2, r3
 8001a68:	3305      	adds	r3, #5
	}
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	200001d4 	.word	0x200001d4
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	200001d6 	.word	0x200001d6
 8001a80:	200001d8 	.word	0x200001d8
 8001a84:	20000004 	.word	0x20000004
 8001a88:	200001e4 	.word	0x200001e4

08001a8c <getNearMenuIndexByID>:
	}
	return -1;
}

uint16_t getNearMenuIndexByID(uint16_t parentid, uint16_t id, uint16_t side)
{					   // Функція отримання індексу пункту меню наступного або попереднього від актуального
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	0004      	movs	r4, r0
 8001a94:	0008      	movs	r0, r1
 8001a96:	0011      	movs	r1, r2
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	1c22      	adds	r2, r4, #0
 8001a9c:	801a      	strh	r2, [r3, #0]
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	1c02      	adds	r2, r0, #0
 8001aa2:	801a      	strh	r2, [r3, #0]
 8001aa4:	1cbb      	adds	r3, r7, #2
 8001aa6:	1c0a      	adds	r2, r1, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
	uint16_t prevID = -1;   // Змінна для зберігання індексу попереднього елемента
 8001aaa:	2314      	movs	r3, #20
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4252      	negs	r2, r2
 8001ab2:	801a      	strh	r2, [r3, #0]
	uint16_t nextID = -1;   // Змінна для зберігання індексу наступного елемента
 8001ab4:	2312      	movs	r3, #18
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4252      	negs	r2, r2
 8001abc:	801a      	strh	r2, [r3, #0]
	uint16_t actualID = -1; // Змінна для зберігання індексу актуального елемента
 8001abe:	2310      	movs	r3, #16
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4252      	negs	r2, r2
 8001ac6:	801a      	strh	r2, [r3, #0]

	uint16_t firstID = -1; // Змінна для зберігання індексу першого елемента
 8001ac8:	230e      	movs	r3, #14
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2201      	movs	r2, #1
 8001ace:	4252      	negs	r2, r2
 8001ad0:	801a      	strh	r2, [r3, #0]
	uint16_t lastID = -1;  // Змінна для зберігання індексу останнього елемента
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4252      	negs	r2, r2
 8001ada:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < menuArraySize; i++)
 8001adc:	2316      	movs	r3, #22
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	801a      	strh	r2, [r3, #0]
 8001ae4:	e025      	b.n	8001b32 <getNearMenuIndexByID+0xa6>
	{
		if (menu[i].parentid == parentid)
 8001ae6:	2116      	movs	r1, #22
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <getNearMenuIndexByID+0xc4>)
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	18d3      	adds	r3, r2, r3
 8001af2:	3302      	adds	r3, #2
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	1dba      	adds	r2, r7, #6
 8001af8:	8812      	ldrh	r2, [r2, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d113      	bne.n	8001b26 <getNearMenuIndexByID+0x9a>
		{ // Перебираємо всі елементи з одним батьківським ID
			if (firstID == -1)
				firstID = i; // Запам'ятовуємо перший елемент списку

			if (menu[i].id == id)
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <getNearMenuIndexByID+0xc4>)
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	5ad3      	ldrh	r3, [r2, r3]
 8001b08:	1d3a      	adds	r2, r7, #4
 8001b0a:	8812      	ldrh	r2, [r2, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d104      	bne.n	8001b1a <getNearMenuIndexByID+0x8e>
			{
				actualID = i; // Запам'ятовуємо актуальний елемент списку
 8001b10:	2310      	movs	r3, #16
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	187a      	adds	r2, r7, r1
 8001b16:	8812      	ldrh	r2, [r2, #0]
 8001b18:	801a      	strh	r2, [r3, #0]
				else if (actualID != -1 && nextID == -1)
				{ // Якщо зустрівся елемент після актуального, робимо його наступним
					nextID = i;
				}
			}
			lastID = i; // Кожний наступний елемент - останній
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2216      	movs	r2, #22
 8001b20:	18ba      	adds	r2, r7, r2
 8001b22:	8812      	ldrh	r2, [r2, #0]
 8001b24:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < menuArraySize; i++)
 8001b26:	2116      	movs	r1, #22
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	3201      	adds	r2, #1
 8001b30:	801a      	strh	r2, [r3, #0]
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <getNearMenuIndexByID+0xc8>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	2216      	movs	r2, #22
 8001b38:	18ba      	adds	r2, r7, r2
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3d2      	bcc.n	8001ae6 <getNearMenuIndexByID+0x5a>
	if (prevID == -1)
		prevID = lastID; // Якщо попереднього елемента немає - по колу видаємо останній
	if (side == -1)
		return prevID; // В залежності від напрямку обертання, видаємо потрібний індекс
	else
		return nextID;
 8001b40:	2312      	movs	r3, #18
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	881b      	ldrh	r3, [r3, #0]
	return -1;
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b007      	add	sp, #28
 8001b4c:	bd90      	pop	{r4, r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000004 	.word	0x20000004

08001b58 <StartMusic>:

void StartMusic(uint16_t melody)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	0002      	movs	r2, r0
 8001b60:	1dbb      	adds	r3, r7, #6
 8001b62:	801a      	strh	r2, [r3, #0]
	MusicStep = 0;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <StartMusic+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	801a      	strh	r2, [r3, #0]
	PlayMusic = 1;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <StartMusic+0x44>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
	sound(Music[MusicStep].freq, Music[MusicStep].time);
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <StartMusic+0x40>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	001a      	movs	r2, r3
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <StartMusic+0x48>)
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	5ad0      	ldrh	r0, [r2, r3]
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <StartMusic+0x40>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <StartMusic+0x48>)
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	18d3      	adds	r3, r2, r3
 8001b86:	3302      	adds	r3, #2
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	f000 f80a 	bl	8001ba4 <sound>
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b002      	add	sp, #8
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200001e8 	.word	0x200001e8
 8001b9c:	200001ea 	.word	0x200001ea
 8001ba0:	08001f94 	.word	0x08001f94

08001ba4 <sound>:

void sound(uint16_t freq, uint16_t time_ms)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	0002      	movs	r2, r0
 8001bac:	1dbb      	adds	r3, r7, #6
 8001bae:	801a      	strh	r2, [r3, #0]
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	1c0a      	adds	r2, r1, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
	if (freq > 0)
 8001bb6:	1dbb      	adds	r3, r7, #6
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d019      	beq.n	8001bf2 <sound+0x4e>
	{
		TIM2->ARR = SYSCLK / TIM2->PSC / freq;
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	4828      	ldr	r0, [pc, #160]	; (8001c68 <sound+0xc4>)
 8001bc8:	f7fe fa9e 	bl	8000108 <__udivsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	0018      	movs	r0, r3
 8001bd0:	1dbb      	adds	r3, r7, #6
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	05d4      	lsls	r4, r2, #23
 8001bd8:	0019      	movs	r1, r3
 8001bda:	f7fe fa95 	bl	8000108 <__udivsi3>
 8001bde:	0003      	movs	r3, r0
 8001be0:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->CCR1 = TIM2->ARR / 2;
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	05db      	lsls	r3, r3, #23
 8001be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	05db      	lsls	r3, r3, #23
 8001bec:	0852      	lsrs	r2, r2, #1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf0:	e008      	b.n	8001c04 <sound+0x60>
	}
	else
	{
		TIM2->ARR = 1000;
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	05db      	lsls	r3, r3, #23
 8001bf6:	22fa      	movs	r2, #250	; 0xfa
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->CCR1 = 0;
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	2200      	movs	r2, #0
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
	}
	TIM2->CNT = 0;
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	05db      	lsls	r3, r3, #23
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24

	sound_time = ((SYSCLK / TIM2->PSC / TIM2->ARR) * time_ms) / 1000;
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	05db      	lsls	r3, r3, #23
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	0019      	movs	r1, r3
 8001c14:	4814      	ldr	r0, [pc, #80]	; (8001c68 <sound+0xc4>)
 8001c16:	f7fe fa77 	bl	8000108 <__udivsi3>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	05db      	lsls	r3, r3, #23
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f7fe fa6e 	bl	8000108 <__udivsi3>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	001a      	movs	r2, r3
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	4353      	muls	r3, r2
 8001c36:	22fa      	movs	r2, #250	; 0xfa
 8001c38:	0091      	lsls	r1, r2, #2
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7fe fa64 	bl	8000108 <__udivsi3>
 8001c40:	0003      	movs	r3, r0
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <sound+0xc8>)
 8001c46:	801a      	strh	r2, [r3, #0]
	sound_counter = 0;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <sound+0xcc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
	SET_BIT(TIM2->CR1, TIM_CR1_CEN); // Запуск таймера;
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	05db      	lsls	r3, r3, #23
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	05db      	lsls	r3, r3, #23
 8001c58:	2101      	movs	r1, #1
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b003      	add	sp, #12
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	01e84800 	.word	0x01e84800
 8001c6c:	200001ec 	.word	0x200001ec
 8001c70:	200001ee 	.word	0x200001ee

08001c74 <SysTick_Handler>:
/* Handlers--------------------------------------------------------*/
void SysTick_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <SysTick_Handler+0x28>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <SysTick_Handler+0x28>)
 8001c80:	601a      	str	r2, [r3, #0]
	if (Delay_counter_ms)
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <SysTick_Handler+0x2c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d004      	beq.n	8001c94 <SysTick_Handler+0x20>
	{
		Delay_counter_ms--;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Handler+0x2c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <SysTick_Handler+0x2c>)
 8001c92:	601a      	str	r2, [r3, #0]
	}
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	200001dc 	.word	0x200001dc
 8001ca0:	200001e0 	.word	0x200001e0

08001ca4 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0)
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <EXTI0_1_IRQHandler+0xb8>)
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d025      	beq.n	8001cfe <EXTI0_1_IRQHandler+0x5a>
	{							// Перевірка, чи було переривання від лінії EXTI 0
		EXTI->PR = EXTI_PR_PR0; // Скидаємо прапорець EXTI 0
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <EXTI0_1_IRQHandler+0xb8>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	615a      	str	r2, [r3, #20]
		if (flagDecrementButtonDown)
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <EXTI0_1_IRQHandler+0xbc>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d018      	beq.n	8001cf2 <EXTI0_1_IRQHandler+0x4e>
		{ // Обробка кнопки decrement
			if ((/*HAL_GetTick()*/ -timeDecrementButtonDown) > timeButtonLongPressed)
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <EXTI0_1_IRQHandler+0xc0>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	425b      	negs	r3, r3
 8001cc6:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <EXTI0_1_IRQHandler+0xc4>)
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	dd03      	ble.n	8001cd6 <EXTI0_1_IRQHandler+0x32>
			{
				flagDecrementButtonLong = true;
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <EXTI0_1_IRQHandler+0xc8>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	e009      	b.n	8001cea <EXTI0_1_IRQHandler+0x46>
			}
			else if ((/**HAL_GetTick()*/ -timeDecrementButtonDown) > timeButtonPressed)
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <EXTI0_1_IRQHandler+0xc0>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <EXTI0_1_IRQHandler+0xcc>)
 8001cde:	8812      	ldrh	r2, [r2, #0]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	dd02      	ble.n	8001cea <EXTI0_1_IRQHandler+0x46>
			{
				flagDecrementButton = true;
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <EXTI0_1_IRQHandler+0xd0>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
			}
			flagDecrementButtonDown = false;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <EXTI0_1_IRQHandler+0xbc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e005      	b.n	8001cfe <EXTI0_1_IRQHandler+0x5a>
		}
		else
		{
			timeDecrementButtonDown = /*HAL_GetTick()*/ 0;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <EXTI0_1_IRQHandler+0xc0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	801a      	strh	r2, [r3, #0]
			flagDecrementButtonDown = true;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <EXTI0_1_IRQHandler+0xbc>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
		}
	}
	if (EXTI->PR & EXTI_PR_PR1)
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <EXTI0_1_IRQHandler+0xb8>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	d025      	beq.n	8001d54 <EXTI0_1_IRQHandler+0xb0>
	{							// Перевірка, чи було переривання від лінії EXTI 1
		EXTI->PR = EXTI_PR_PR1; // Скидаємо прапорець EXTI 1
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <EXTI0_1_IRQHandler+0xb8>)
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	615a      	str	r2, [r3, #20]
		if (flagEnterButtonDown)
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <EXTI0_1_IRQHandler+0xd4>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d018      	beq.n	8001d48 <EXTI0_1_IRQHandler+0xa4>
		{ // Обробка кнопки enter
			if ((/*HAL_GetTick()*/ -timeEnterButtonDown) > timeButtonLongPressed)
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <EXTI0_1_IRQHandler+0xd8>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	425b      	negs	r3, r3
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <EXTI0_1_IRQHandler+0xc4>)
 8001d1e:	8812      	ldrh	r2, [r2, #0]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	dd03      	ble.n	8001d2c <EXTI0_1_IRQHandler+0x88>
			{
				flagEnterButtonLong = true;
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <EXTI0_1_IRQHandler+0xdc>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e009      	b.n	8001d40 <EXTI0_1_IRQHandler+0x9c>
			}
			else if ((/*HAL_GetTick()*/ -timeEnterButtonDown) > timeButtonPressed)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <EXTI0_1_IRQHandler+0xd8>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	425b      	negs	r3, r3
 8001d32:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <EXTI0_1_IRQHandler+0xcc>)
 8001d34:	8812      	ldrh	r2, [r2, #0]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	dd02      	ble.n	8001d40 <EXTI0_1_IRQHandler+0x9c>
			{
				flagEnterButton = true;
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <EXTI0_1_IRQHandler+0xe0>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
			}
			flagEnterButtonDown = false;
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <EXTI0_1_IRQHandler+0xd4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
		{
			timeEnterButtonDown = /*HAL_GetTick()*/ 0;
			flagEnterButtonDown = true;
		}
	}
}
 8001d46:	e005      	b.n	8001d54 <EXTI0_1_IRQHandler+0xb0>
			timeEnterButtonDown = /*HAL_GetTick()*/ 0;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <EXTI0_1_IRQHandler+0xd8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
			flagEnterButtonDown = true;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <EXTI0_1_IRQHandler+0xd4>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40010400 	.word	0x40010400
 8001d60:	200001ca 	.word	0x200001ca
 8001d64:	200001ce 	.word	0x200001ce
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	200001c7 	.word	0x200001c7
 8001d70:	20000002 	.word	0x20000002
 8001d74:	200001c4 	.word	0x200001c4
 8001d78:	200001cb 	.word	0x200001cb
 8001d7c:	200001d0 	.word	0x200001d0
 8001d80:	200001c8 	.word	0x200001c8
 8001d84:	200001c5 	.word	0x200001c5

08001d88 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	// Перевірка, чи було переривання від лінії EXTI 2
	if (EXTI->PR & EXTI_PR_PR2)
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <EXTI2_3_IRQHandler+0x60>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	2204      	movs	r2, #4
 8001d92:	4013      	ands	r3, r2
 8001d94:	d025      	beq.n	8001de2 <EXTI2_3_IRQHandler+0x5a>
	{
		// Скидаємо прапорець EXTI 2
		EXTI->PR = EXTI_PR_PR2;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <EXTI2_3_IRQHandler+0x60>)
 8001d98:	2204      	movs	r2, #4
 8001d9a:	615a      	str	r2, [r3, #20]

		// Обробка кнопки increment
		if (flagIncrementButtonDown)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <EXTI2_3_IRQHandler+0x64>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d018      	beq.n	8001dd6 <EXTI2_3_IRQHandler+0x4e>
		{
			if ((/*HAL_GetTick()*/ -timeIncrementButtonDown) > timeButtonLongPressed)
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <EXTI2_3_IRQHandler+0x68>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	425b      	negs	r3, r3
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <EXTI2_3_IRQHandler+0x6c>)
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	dd03      	ble.n	8001dba <EXTI2_3_IRQHandler+0x32>
			{
				flagIncrementButtonLong = true;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <EXTI2_3_IRQHandler+0x70>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e009      	b.n	8001dce <EXTI2_3_IRQHandler+0x46>
			}
			else if ((/*HAL_GetTick()*/ -timeIncrementButtonDown) > timeButtonPressed)
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <EXTI2_3_IRQHandler+0x68>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	425b      	negs	r3, r3
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <EXTI2_3_IRQHandler+0x74>)
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	dd02      	ble.n	8001dce <EXTI2_3_IRQHandler+0x46>
			{
				flagIncrementButton = true;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <EXTI2_3_IRQHandler+0x78>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
			}
			flagIncrementButtonDown = false;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <EXTI2_3_IRQHandler+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
		{
			timeIncrementButtonDown = /*HAL_GetTick()*/ 0;
			flagIncrementButtonDown = true;
		}
	}
}
 8001dd4:	e005      	b.n	8001de2 <EXTI2_3_IRQHandler+0x5a>
			timeIncrementButtonDown = /*HAL_GetTick()*/ 0;
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <EXTI2_3_IRQHandler+0x68>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	801a      	strh	r2, [r3, #0]
			flagIncrementButtonDown = true;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <EXTI2_3_IRQHandler+0x64>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40010400 	.word	0x40010400
 8001dec:	200001cc 	.word	0x200001cc
 8001df0:	200001d2 	.word	0x200001d2
 8001df4:	20000000 	.word	0x20000000
 8001df8:	200001c9 	.word	0x200001c9
 8001dfc:	20000002 	.word	0x20000002
 8001e00:	200001c6 	.word	0x200001c6

08001e04 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	// Перевірка, чи було переривання від лінії EXTI 9
	if (EXTI->PR & EXTI_PR_PR9)
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <EXTI4_15_IRQHandler+0x20>)
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	d003      	beq.n	8001e1c <EXTI4_15_IRQHandler+0x18>
	{
/*
Обработка LPOWER
*/
		// Скидаємо прапорець EXTI 9
		EXTI->PR = EXTI_PR_PR9;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <EXTI4_15_IRQHandler+0x20>)
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	615a      	str	r2, [r3, #20]

		// Обробка подій, пов'язаних з EXTI 9
		// Код обробки може бути доданий тут
	}
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40010400 	.word	0x40010400

08001e28 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM2->SR, TIM_SR_UIF))
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	05db      	lsls	r3, r3, #23
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d007      	beq.n	8001e48 <TIM2_IRQHandler+0x20>
	{
		//		CounterTIM2++;
		CLEAR_BIT(TIM2->SR, TIM_SR_UIF); // Сбросим флаг прерывания
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	05db      	lsls	r3, r3, #23
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	05db      	lsls	r3, r3, #23
 8001e42:	2101      	movs	r1, #1
 8001e44:	438a      	bics	r2, r1
 8001e46:	611a      	str	r2, [r3, #16]
	}
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <TIM21_IRQHandler>:

void TIM21_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM21->SR, TIM_SR_UIF))
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <TIM21_IRQHandler+0x20>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d005      	beq.n	8001e6a <TIM21_IRQHandler+0x1a>
	{
		//		CounterTIM2++;
		CLEAR_BIT(TIM21->SR, TIM_SR_UIF); // Сбросим флаг прерывания
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <TIM21_IRQHandler+0x20>)
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <TIM21_IRQHandler+0x20>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	438a      	bics	r2, r1
 8001e68:	611a      	str	r2, [r3, #16]
	}
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40010800 	.word	0x40010800

08001e74 <WWDG_IRQHandler>:

void WWDG_IRQHandler(void){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
    // Перевіряємо, чи сталося переривання WWDG (флаг EWI - Early Wakeup uint16_terrupt)
    if (READ_BIT(WWDG->SR, WWDG_SR_EWIF) != 0) {
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <WWDG_IRQHandler+0x2c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d00a      	beq.n	8001e98 <WWDG_IRQHandler+0x24>
        // Очистимо флаг переривання EWIF (Early Wakeup uint16_terrupt Flag)
        CLEAR_BIT(WWDG->SR, WWDG_SR_EWIF);
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <WWDG_IRQHandler+0x2c>)
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <WWDG_IRQHandler+0x2c>)
 8001e88:	2101      	movs	r1, #1
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]

        // Додайте ваш код для обробки переривання тут
        // Наприклад, можна перезавантажити WWDG або виконати певні дії для обробки помилки

        // У даному прикладі просто перезавантажимо таймер, щоб уникнути системного ресету
        WWDG->CR = (WWDG->CR & WWDG_CR_T) | (0x7F); // Перезавантажуємо значення лічильника WWDG
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <WWDG_IRQHandler+0x2c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <WWDG_IRQHandler+0x2c>)
 8001e94:	227f      	movs	r2, #127	; 0x7f
 8001e96:	601a      	str	r2, [r3, #0]
    }
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	40002c00 	.word	0x40002c00

08001ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <Reset_Handler>:
 8001eb0:	4813      	ldr	r0, [pc, #76]	; (8001f00 <LoopForever+0x2>)
 8001eb2:	4685      	mov	sp, r0
 8001eb4:	f7ff fff6 	bl	8001ea4 <SystemInit>
 8001eb8:	4812      	ldr	r0, [pc, #72]	; (8001f04 <LoopForever+0x6>)
 8001eba:	6801      	ldr	r1, [r0, #0]
 8001ebc:	0e09      	lsrs	r1, r1, #24
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <LoopForever+0xa>)
 8001ec0:	4291      	cmp	r1, r2
 8001ec2:	d105      	bne.n	8001ed0 <ApplicationStart>
 8001ec4:	4811      	ldr	r0, [pc, #68]	; (8001f0c <LoopForever+0xe>)
 8001ec6:	4912      	ldr	r1, [pc, #72]	; (8001f10 <LoopForever+0x12>)
 8001ec8:	6001      	str	r1, [r0, #0]
 8001eca:	4812      	ldr	r0, [pc, #72]	; (8001f14 <LoopForever+0x16>)
 8001ecc:	4912      	ldr	r1, [pc, #72]	; (8001f18 <LoopForever+0x1a>)
 8001ece:	6001      	str	r1, [r0, #0]

08001ed0 <ApplicationStart>:
 8001ed0:	4812      	ldr	r0, [pc, #72]	; (8001f1c <LoopForever+0x1e>)
 8001ed2:	4913      	ldr	r1, [pc, #76]	; (8001f20 <LoopForever+0x22>)
 8001ed4:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <LoopForever+0x26>)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:
 8001eda:	58d4      	ldr	r4, [r2, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:
 8001ee0:	18c4      	adds	r4, r0, r3
 8001ee2:	428c      	cmp	r4, r1
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <LoopForever+0x2a>)
 8001ee8:	4c10      	ldr	r4, [pc, #64]	; (8001f2c <LoopForever+0x2e>)
 8001eea:	2300      	movs	r3, #0
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:
 8001ef2:	42a2      	cmp	r2, r4
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>
 8001ef6:	f000 f81d 	bl	8001f34 <__libc_init_array>
 8001efa:	f7fe fa19 	bl	8000330 <main>

08001efe <LoopForever>:
 8001efe:	e7fe      	b.n	8001efe <LoopForever>
 8001f00:	20000800 	.word	0x20000800
 8001f04:	00000004 	.word	0x00000004
 8001f08:	0000001f 	.word	0x0000001f
 8001f0c:	40021034 	.word	0x40021034
 8001f10:	00000001 	.word	0x00000001
 8001f14:	40010000 	.word	0x40010000
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	200001a8 	.word	0x200001a8
 8001f24:	0800214c 	.word	0x0800214c
 8001f28:	200001a8 	.word	0x200001a8
 8001f2c:	200001f0 	.word	0x200001f0

08001f30 <ADC1_IRQHandler>:
 8001f30:	e7fe      	b.n	8001f30 <ADC1_IRQHandler>
	...

08001f34 <__libc_init_array>:
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	2600      	movs	r6, #0
 8001f38:	4c0c      	ldr	r4, [pc, #48]	; (8001f6c <__libc_init_array+0x38>)
 8001f3a:	4d0d      	ldr	r5, [pc, #52]	; (8001f70 <__libc_init_array+0x3c>)
 8001f3c:	1b64      	subs	r4, r4, r5
 8001f3e:	10a4      	asrs	r4, r4, #2
 8001f40:	42a6      	cmp	r6, r4
 8001f42:	d109      	bne.n	8001f58 <__libc_init_array+0x24>
 8001f44:	2600      	movs	r6, #0
 8001f46:	f000 f819 	bl	8001f7c <_init>
 8001f4a:	4c0a      	ldr	r4, [pc, #40]	; (8001f74 <__libc_init_array+0x40>)
 8001f4c:	4d0a      	ldr	r5, [pc, #40]	; (8001f78 <__libc_init_array+0x44>)
 8001f4e:	1b64      	subs	r4, r4, r5
 8001f50:	10a4      	asrs	r4, r4, #2
 8001f52:	42a6      	cmp	r6, r4
 8001f54:	d105      	bne.n	8001f62 <__libc_init_array+0x2e>
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
 8001f58:	00b3      	lsls	r3, r6, #2
 8001f5a:	58eb      	ldr	r3, [r5, r3]
 8001f5c:	4798      	blx	r3
 8001f5e:	3601      	adds	r6, #1
 8001f60:	e7ee      	b.n	8001f40 <__libc_init_array+0xc>
 8001f62:	00b3      	lsls	r3, r6, #2
 8001f64:	58eb      	ldr	r3, [r5, r3]
 8001f66:	4798      	blx	r3
 8001f68:	3601      	adds	r6, #1
 8001f6a:	e7f2      	b.n	8001f52 <__libc_init_array+0x1e>
 8001f6c:	08002144 	.word	0x08002144
 8001f70:	08002144 	.word	0x08002144
 8001f74:	08002148 	.word	0x08002148
 8001f78:	08002144 	.word	0x08002144

08001f7c <_init>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f82:	bc08      	pop	{r3}
 8001f84:	469e      	mov	lr, r3
 8001f86:	4770      	bx	lr

08001f88 <_fini>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8e:	bc08      	pop	{r3}
 8001f90:	469e      	mov	lr, r3
 8001f92:	4770      	bx	lr
