
SunRiseClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001660  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001720  08001720  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001720  08001720  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001720  08001720  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001720  08001720  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001720  08001720  00011720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001724  08001724  00011724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  0800172c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800172c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003341  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bcd  00000000  00000000  000233b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  00023f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003f2  00000000  00000000  000244e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ac66  00000000  00000000  000248d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003d28  00000000  00000000  0002f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00038ba5  00000000  00000000  00033260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000012b8  00000000  00000000  0006be08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0006d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001708 	.word	0x08001708

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001708 	.word	0x08001708

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b7f      	cmp	r3, #127	; 0x7f
 8000234:	d828      	bhi.n	8000288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000236:	4a2f      	ldr	r2, [pc, #188]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b25b      	sxtb	r3, r3
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	33c0      	adds	r3, #192	; 0xc0
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	589b      	ldr	r3, [r3, r2]
 8000246:	1dfa      	adds	r2, r7, #7
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	0011      	movs	r1, r2
 800024c:	2203      	movs	r2, #3
 800024e:	400a      	ands	r2, r1
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	21ff      	movs	r1, #255	; 0xff
 8000254:	4091      	lsls	r1, r2
 8000256:	000a      	movs	r2, r1
 8000258:	43d2      	mvns	r2, r2
 800025a:	401a      	ands	r2, r3
 800025c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	019b      	lsls	r3, r3, #6
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	401a      	ands	r2, r3
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0018      	movs	r0, r3
 800026c:	2303      	movs	r3, #3
 800026e:	4003      	ands	r3, r0
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000274:	481f      	ldr	r0, [pc, #124]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b25b      	sxtb	r3, r3
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	430a      	orrs	r2, r1
 8000280:	33c0      	adds	r3, #192	; 0xc0
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000286:	e031      	b.n	80002ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	0019      	movs	r1, r3
 8000290:	230f      	movs	r3, #15
 8000292:	400b      	ands	r3, r1
 8000294:	3b08      	subs	r3, #8
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	3306      	adds	r3, #6
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	3304      	adds	r3, #4
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1dfa      	adds	r2, r7, #7
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	0011      	movs	r1, r2
 80002a8:	2203      	movs	r2, #3
 80002aa:	400a      	ands	r2, r1
 80002ac:	00d2      	lsls	r2, r2, #3
 80002ae:	21ff      	movs	r1, #255	; 0xff
 80002b0:	4091      	lsls	r1, r2
 80002b2:	000a      	movs	r2, r1
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	22ff      	movs	r2, #255	; 0xff
 80002c0:	401a      	ands	r2, r3
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	2303      	movs	r3, #3
 80002ca:	4003      	ands	r3, r0
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	001c      	movs	r4, r3
 80002d8:	230f      	movs	r3, #15
 80002da:	4023      	ands	r3, r4
 80002dc:	3b08      	subs	r3, #8
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	430a      	orrs	r2, r1
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18c3      	adds	r3, r0, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b003      	add	sp, #12
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <LL_LPTIM_SetUpdateMode+0x24>)
 800030c:	401a      	ands	r2, r3
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	431a      	orrs	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	60da      	str	r2, [r3, #12]
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	ffbfffff 	.word	0xffbfffff

08000324 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	4a05      	ldr	r2, [pc, #20]	; (8000348 <LL_LPTIM_SetCounterMode+0x24>)
 8000334:	401a      	ands	r2, r3
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	431a      	orrs	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	60da      	str	r2, [r3, #12]
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	ff7fffff 	.word	0xff7fffff

0800034c <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <LL_LPTIM_SetPolarity+0x24>)
 800035c:	401a      	ands	r2, r3
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	431a      	orrs	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	60da      	str	r2, [r3, #12]
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b002      	add	sp, #8
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	ffdfffff 	.word	0xffdfffff

08000374 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	4a05      	ldr	r2, [pc, #20]	; (8000398 <LL_LPTIM_SetPrescaler+0x24>)
 8000384:	401a      	ands	r2, r3
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	431a      	orrs	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	60da      	str	r2, [r3, #12]
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b002      	add	sp, #8
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	fffff1ff 	.word	0xfffff1ff

0800039c <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <LL_LPTIM_TrigSw+0x1c>)
 80003aa:	401a      	ands	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	60da      	str	r2, [r3, #12]
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b002      	add	sp, #8
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	fff9ffff 	.word	0xfff9ffff

080003bc <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	2201      	movs	r2, #1
 80003cc:	4393      	bics	r3, r2
 80003ce:	001a      	movs	r2, r3
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	431a      	orrs	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	60da      	str	r2, [r3, #12]
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b002      	add	sp, #8
 80003de:	bd80      	pop	{r7, pc}

080003e0 <LL_LPTIM_ConfigClock>:
  *         @arg @ref LL_LPTIM_CLK_POLARITY_FALLING
  *         @arg @ref LL_LPTIM_CLK_POLARITY_RISING_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ConfigClock(LPTIM_TypeDef *LPTIMx, uint32_t ClockFilter, uint32_t ClockPolarity)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKFLT | LPTIM_CFGR_CKPOL, ClockFilter | ClockPolarity);
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	221e      	movs	r2, #30
 80003f2:	4393      	bics	r3, r2
 80003f4:	001a      	movs	r2, r3
 80003f6:	68b9      	ldr	r1, [r7, #8]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	430b      	orrs	r3, r1
 80003fc:	431a      	orrs	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	60da      	str	r2, [r3, #12]
}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b004      	add	sp, #16
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <LL_RCC_HSI_Enable+0x18>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <LL_RCC_HSI_Enable+0x18>)
 8000416:	2101      	movs	r1, #1
 8000418:	430a      	orrs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	40021000 	.word	0x40021000

08000428 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <LL_RCC_HSI_IsReady+0x1c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2204      	movs	r2, #4
 8000432:	4013      	ands	r3, r2
 8000434:	2b04      	cmp	r3, #4
 8000436:	d101      	bne.n	800043c <LL_RCC_HSI_IsReady+0x14>
 8000438:	2301      	movs	r3, #1
 800043a:	e000      	b.n	800043e <LL_RCC_HSI_IsReady+0x16>
 800043c:	2300      	movs	r3, #0
}
 800043e:	0018      	movs	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000

08000448 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4a06      	ldr	r2, [pc, #24]	; (8000470 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000456:	4013      	ands	r3, r2
 8000458:	0019      	movs	r1, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	021a      	lsls	r2, r3, #8
 800045e:	4b03      	ldr	r3, [pc, #12]	; (800046c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000460:	430a      	orrs	r2, r1
 8000462:	605a      	str	r2, [r3, #4]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	ffffe0ff 	.word	0xffffe0ff

08000474 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CSR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <LL_RCC_LSE_Enable+0x18>)
 800047a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <LL_RCC_LSE_Enable+0x18>)
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	0049      	lsls	r1, r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000

08000490 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSEDRV, LSEDrive);
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <LL_RCC_LSE_SetDriveCapability+0x24>)
 800049a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800049c:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <LL_RCC_LSE_SetDriveCapability+0x28>)
 800049e:	4013      	ands	r3, r2
 80004a0:	0019      	movs	r1, r3
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <LL_RCC_LSE_SetDriveCapability+0x24>)
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	430a      	orrs	r2, r1
 80004a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000
 80004b8:	ffffe7ff 	.word	0xffffe7ff

080004bc <LL_RCC_LSE_EnableCSS>:
  * @brief  Enable Clock security system on LSE.
  * @rmtoll CSR         LSECSSON      LL_RCC_LSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableCSS(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON);
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <LL_RCC_LSE_EnableCSS+0x18>)
 80004c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <LL_RCC_LSE_EnableCSS+0x18>)
 80004c6:	2180      	movs	r1, #128	; 0x80
 80004c8:	0189      	lsls	r1, r1, #6
 80004ca:	430a      	orrs	r2, r1
 80004cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000

080004d8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <LL_RCC_LSE_IsReady+0x24>)
 80004de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	401a      	ands	r2, r3
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d101      	bne.n	80004f2 <LL_RCC_LSE_IsReady+0x1a>
 80004ee:	2301      	movs	r3, #1
 80004f0:	e000      	b.n	80004f4 <LL_RCC_LSE_IsReady+0x1c>
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <LL_RCC_SetSysClkSource+0x24>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	2203      	movs	r2, #3
 800050e:	4393      	bics	r3, r2
 8000510:	0019      	movs	r1, r3
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <LL_RCC_SetSysClkSource+0x24>)
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	430a      	orrs	r2, r1
 8000518:	60da      	str	r2, [r3, #12]
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	40021000 	.word	0x40021000

08000528 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <LL_RCC_GetSysClkSource+0x14>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	220c      	movs	r2, #12
 8000532:	4013      	ands	r3, r2
}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_RCC_SetAHBPrescaler+0x24>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	22f0      	movs	r2, #240	; 0xf0
 800054e:	4393      	bics	r3, r2
 8000550:	0019      	movs	r1, r3
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <LL_RCC_SetAHBPrescaler+0x24>)
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	430a      	orrs	r2, r1
 8000558:	60da      	str	r2, [r3, #12]
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000576:	4013      	ands	r3, r2
 8000578:	0019      	movs	r1, r3
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_RCC_SetAPB1Prescaler+0x24>)
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	430a      	orrs	r2, r1
 8000580:	60da      	str	r2, [r3, #12]
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	40021000 	.word	0x40021000
 8000590:	fffff8ff 	.word	0xfffff8ff

08000594 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <LL_RCC_SetAPB2Prescaler+0x28>)
 80005a2:	4013      	ands	r3, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	430a      	orrs	r2, r1
 80005ac:	60da      	str	r2, [r3, #12]
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000
 80005bc:	ffffc7ff 	.word	0xffffc7ff

080005c0 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <LL_RCC_SetLPTIMClockSource+0x24>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <LL_RCC_SetLPTIMClockSource+0x28>)
 80005ce:	4013      	ands	r3, r2
 80005d0:	0019      	movs	r1, r3
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <LL_RCC_SetLPTIMClockSource+0x24>)
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	430a      	orrs	r2, r1
 80005d8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000
 80005e8:	fff3ffff 	.word	0xfff3ffff

080005ec <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL, Source);
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <LL_RCC_SetRTCClockSource+0x24>)
 80005f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <LL_RCC_SetRTCClockSource+0x28>)
 80005fa:	4013      	ands	r3, r2
 80005fc:	0019      	movs	r1, r3
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <LL_RCC_SetRTCClockSource+0x24>)
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	430a      	orrs	r2, r1
 8000604:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000
 8000614:	fffcffff 	.word	0xfffcffff

08000618 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RTCSEL));
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <LL_RCC_GetRTCClockSource+0x14>)
 800061e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000620:	23c0      	movs	r3, #192	; 0xc0
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	4013      	ands	r3, r2
}
 8000626:	0018      	movs	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll CSR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <LL_RCC_EnableRTC+0x18>)
 8000636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <LL_RCC_EnableRTC+0x18>)
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	02c9      	lsls	r1, r1, #11
 800063e:	430a      	orrs	r2, r1
 8000640:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000

0800064c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll CSR         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RTCRST);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <LL_RCC_ForceBackupDomainReset+0x18>)
 8000652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <LL_RCC_ForceBackupDomainReset+0x18>)
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0309      	lsls	r1, r1, #12
 800065a:	430a      	orrs	r2, r1
 800065c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll CSR         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST);
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 800066e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 8000672:	4904      	ldr	r1, [pc, #16]	; (8000684 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8000674:	400a      	ands	r2, r1
 8000676:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40021000 	.word	0x40021000
 8000684:	fff7ffff 	.word	0xfff7ffff

08000688 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <LL_RCC_PLL_Enable+0x18>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <LL_RCC_PLL_Enable+0x18>)
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	0449      	lsls	r1, r1, #17
 8000696:	430a      	orrs	r2, r1
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000

080006a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <LL_RCC_PLL_IsReady+0x24>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	049b      	lsls	r3, r3, #18
 80006b0:	401a      	ands	r2, r3
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	049b      	lsls	r3, r3, #18
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d101      	bne.n	80006be <LL_RCC_PLL_IsReady+0x1a>
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <LL_RCC_PLL_IsReady+0x1c>
 80006be:	2300      	movs	r3, #0
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 80006de:	4013      	ands	r3, r2
 80006e0:	0019      	movs	r1, r3
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	431a      	orrs	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	431a      	orrs	r2, r3
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 80006ee:	430a      	orrs	r2, r1
 80006f0:	60da      	str	r2, [r3, #12]
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b004      	add	sp, #16
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000
 8000700:	ff02ffff 	.word	0xff02ffff

08000704 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <LL_APB1_GRP1_EnableClock+0x28>)
 800070e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <LL_APB1_GRP1_EnableClock+0x28>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	430a      	orrs	r2, r1
 8000716:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <LL_APB1_GRP1_EnableClock+0x28>)
 800071a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4013      	ands	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <LL_APB2_GRP1_EnableClock+0x28>)
 800073a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <LL_APB2_GRP1_EnableClock+0x28>)
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	430a      	orrs	r2, r1
 8000742:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <LL_APB2_GRP1_EnableClock+0x28>)
 8000746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4013      	ands	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b004      	add	sp, #16
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000

0800075c <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <LL_IOP_GRP1_EnableClock+0x28>)
 8000766:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <LL_IOP_GRP1_EnableClock+0x28>)
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	430a      	orrs	r2, r1
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <LL_IOP_GRP1_EnableClock+0x28>)
 8000772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4013      	ands	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800077a:	68fb      	ldr	r3, [r7, #12]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b004      	add	sp, #16
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <LL_SYSCFG_SetEXTISource+0x48>)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	21ff      	movs	r1, #255	; 0xff
 8000798:	400b      	ands	r3, r1
 800079a:	3302      	adds	r3, #2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	589b      	ldr	r3, [r3, r2]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	0c12      	lsrs	r2, r2, #16
 80007a4:	210f      	movs	r1, #15
 80007a6:	4091      	lsls	r1, r2
 80007a8:	000a      	movs	r2, r1
 80007aa:	43d2      	mvns	r2, r2
 80007ac:	401a      	ands	r2, r3
 80007ae:	0011      	movs	r1, r2
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	409a      	lsls	r2, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <LL_SYSCFG_SetEXTISource+0x48>)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	24ff      	movs	r4, #255	; 0xff
 80007be:	4023      	ands	r3, r4
 80007c0:	430a      	orrs	r2, r1
 80007c2:	3302      	adds	r3, #2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	501a      	str	r2, [r3, r0]
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b003      	add	sp, #12
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	40010000 	.word	0x40010000

080007d4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_FLASH_SetLatency+0x24>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4393      	bics	r3, r2
 80007e4:	0019      	movs	r1, r3
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <LL_FLASH_SetLatency+0x24>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40022000 	.word	0x40022000

080007fc <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <LL_FLASH_GetLatency+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2201      	movs	r2, #1
 8000806:	4013      	ands	r3, r2
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40022000 	.word	0x40022000

08000814 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000822:	4013      	ands	r3, r2
 8000824:	0019      	movs	r1, r3
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	430a      	orrs	r2, r1
 800082c:	601a      	str	r2, [r3, #0]
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40007000 	.word	0x40007000
 800083c:	ffffe7ff 	.word	0xffffe7ff

08000840 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <LL_PWR_EnableBkUpAccess+0x18>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <LL_PWR_EnableBkUpAccess+0x18>)
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	0049      	lsls	r1, r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40007000 	.word	0x40007000

0800085c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <LL_PWR_IsActiveFlag_VOS+0x1c>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2210      	movs	r2, #16
 8000866:	4013      	ands	r3, r2
 8000868:	3b10      	subs	r3, #16
 800086a:	425a      	negs	r2, r3
 800086c:	4153      	adcs	r3, r2
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	40007000 	.word	0x40007000

0800087c <LL_RTC_WAKEUP_Enable>:
  * @rmtoll CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	00d2      	lsls	r2, r2, #3
 800088c:	431a      	orrs	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	609a      	str	r2, [r3, #8]
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}

0800089a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	2207      	movs	r2, #7
 80008aa:	4393      	bics	r3, r2
 80008ac:	001a      	movs	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	609a      	str	r2, [r3, #8]
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}

080008be <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b084      	sub	sp, #16
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6819      	ldr	r1, [r3, #0]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	435b      	muls	r3, r3
 80008d2:	001a      	movs	r2, r3
 80008d4:	0013      	movs	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	189b      	adds	r3, r3, r2
 80008da:	43db      	mvns	r3, r3
 80008dc:	400b      	ands	r3, r1
 80008de:	001a      	movs	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	435b      	muls	r3, r3
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	434b      	muls	r3, r1
 80008e8:	431a      	orrs	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b004      	add	sp, #16
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	68d9      	ldr	r1, [r3, #12]
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	435b      	muls	r3, r3
 800090a:	001a      	movs	r2, r3
 800090c:	0013      	movs	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	189b      	adds	r3, r3, r2
 8000912:	43db      	mvns	r3, r3
 8000914:	400b      	ands	r3, r1
 8000916:	001a      	movs	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	435b      	muls	r3, r3
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	434b      	muls	r3, r1
 8000920:	431a      	orrs	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60da      	str	r2, [r3, #12]
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b004      	add	sp, #16
 800092c:	bd80      	pop	{r7, pc}

0800092e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}

08000946 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff fef0 	bl	8000730 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	055b      	lsls	r3, r3, #21
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff fed5 	bl	8000704 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 800095a:	2301      	movs	r3, #1
 800095c:	425b      	negs	r3, r3
 800095e:	2103      	movs	r1, #3
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff fc5d 	bl	8000220 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f807 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 f919 	bl	8000ba0 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800096e:	f000 f87d 	bl	8000a6c <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000972:	f000 f8eb 	bl	8000b4c <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000976:	e7fe      	b.n	8000976 <main+0x30>

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff ff29 	bl	80007d4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	f7ff ff3a 	bl	80007fc <LL_FLASH_GetLatency>
 8000988:	0003      	movs	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d1fa      	bne.n	8000984 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff ff3e 	bl	8000814 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	f7ff ff5f 	bl	800085c <LL_PWR_IsActiveFlag_VOS>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d1fb      	bne.n	800099a <SystemClock_Config+0x22>
  {
  }
  LL_RCC_HSI_Enable();
 80009a2:	f7ff fd33 	bl	800040c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	f7ff fd3e 	bl	8000428 <LL_RCC_HSI_IsReady>
 80009ac:	0003      	movs	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d1fa      	bne.n	80009a8 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80009b2:	2010      	movs	r0, #16
 80009b4:	f7ff fd48 	bl	8000448 <LL_RCC_HSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 80009b8:	f7ff ff42 	bl	8000840 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 80009bc:	f7ff fe2c 	bl	8000618 <LL_RCC_GetRTCClockSource>
 80009c0:	0002      	movs	r2, r0
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	025b      	lsls	r3, r3, #9
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d003      	beq.n	80009d2 <SystemClock_Config+0x5a>
  {
    LL_RCC_ForceBackupDomainReset();
 80009ca:	f7ff fe3f 	bl	800064c <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 80009ce:	f7ff fe4b 	bl	8000668 <LL_RCC_ReleaseBackupDomainReset>
  }
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fd5c 	bl	8000490 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 80009d8:	f7ff fd4c 	bl	8000474 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	f7ff fd7b 	bl	80004d8 <LL_RCC_LSE_IsReady>
 80009e2:	0003      	movs	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d1fa      	bne.n	80009de <SystemClock_Config+0x66>
  {

  }
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 80009e8:	f7ff fe16 	bl	8000618 <LL_RCC_GetRTCClockSource>
 80009ec:	0002      	movs	r2, r0
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	025b      	lsls	r3, r3, #9
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d004      	beq.n	8000a00 <SystemClock_Config+0x88>
  {
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	025b      	lsls	r3, r3, #9
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fdf6 	bl	80005ec <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8000a00:	f7ff fe16 	bl	8000630 <LL_RCC_EnableRTC>
  LL_RCC_LSE_EnableCSS();
 8000a04:	f7ff fd5a 	bl	80004bc <LL_RCC_LSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_3, LL_RCC_PLL_DIV_2);
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	03db      	lsls	r3, r3, #15
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fe5b 	bl	80006cc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a16:	f7ff fe37 	bl	8000688 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	f7ff fe42 	bl	80006a4 <LL_RCC_PLL_IsReady>
 8000a20:	0003      	movs	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d1fa      	bne.n	8000a1c <SystemClock_Config+0xa4>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fd8a 	bl	8000540 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fd9b 	bl	8000568 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fdae 	bl	8000594 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f7ff fd61 	bl	8000500 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	f7ff fd72 	bl	8000528 <LL_RCC_GetSysClkSource>
 8000a44:	0003      	movs	r3, r0
 8000a46:	2b0c      	cmp	r3, #12
 8000a48:	d1fa      	bne.n	8000a40 <SystemClock_Config+0xc8>
  {

  }

  LL_Init1msTick(24000000);
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <SystemClock_Config+0xf0>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 fe11 	bl	8001674 <LL_Init1msTick>

  LL_SetSystemCoreClock(24000000);
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SystemClock_Config+0xf0>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fe1d 	bl	8001694 <LL_SetSystemCoreClock>
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_PCLK1);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fdb0 	bl	80005c0 <LL_RCC_SetLPTIMClockSource>
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	016e3600 	.word	0x016e3600

08000a6c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	003b      	movs	r3, r7
 8000a74:	0018      	movs	r0, r3
 8000a76:	2318      	movs	r3, #24
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f000 fe18 	bl	80016b0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPTIM1);
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	061b      	lsls	r3, r3, #24
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff fe3d 	bl	8000704 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff fe66 	bl	800075c <LL_IOP_GRP1_EnableClock>
  /**LPTIM1 GPIO Configuration
  PA0-CK_IN   ------> LPTIM1_IN1
  PA1   ------> LPTIM1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000a90:	003b      	movs	r3, r7
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a96:	003b      	movs	r3, r7
 8000a98:	2202      	movs	r2, #2
 8000a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a9c:	003b      	movs	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	003a      	movs	r2, r7
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fc53 	bl	8001368 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2202      	movs	r2, #2
 8000acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ada:	003b      	movs	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	003a      	movs	r2, r7
 8000ae8:	23a0      	movs	r3, #160	; 0xa0
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fc3a 	bl	8001368 <LL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM1, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_LPTIM1_Init+0xdc>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff fc5f 	bl	80003bc <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM1, LL_LPTIM_PRESCALER_DIV1);
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_LPTIM1_Init+0xdc>)
 8000b00:	2100      	movs	r1, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff fc36 	bl	8000374 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM1, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_LPTIM1_Init+0xdc>)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fc1d 	bl	800034c <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM1, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MX_LPTIM1_Init+0xdc>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fbf0 	bl	80002fc <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM1, LL_LPTIM_COUNTER_MODE_EXTERNAL);
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <MX_LPTIM1_Init+0xdc>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	0010      	movs	r0, r2
 8000b26:	f7ff fbfd 	bl	8000324 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_ConfigClock(LPTIM1, LL_LPTIM_CLK_FILTER_NONE, LL_LPTIM_CLK_POLARITY_RISING);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_LPTIM1_Init+0xdc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fc55 	bl	80003e0 <LL_LPTIM_ConfigClock>
  LL_LPTIM_TrigSw(LPTIM1);
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <MX_LPTIM1_Init+0xdc>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fc2f 	bl	800039c <LL_LPTIM_TrigSw>
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b006      	add	sp, #24
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	40007c00 	.word	0x40007c00

08000b4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	0018      	movs	r0, r3
 8000b56:	230c      	movs	r3, #12
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f000 fda8 	bl	80016b0 <memset>

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8000b60:	f7ff fd66 	bl	8000630 <LL_RCC_EnableRTC>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
  RTC_InitStruct.AsynchPrescaler = 127;
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	227f      	movs	r2, #127	; 0x7f
 8000b6e:	605a      	str	r2, [r3, #4]
  RTC_InitStruct.SynchPrescaler = 255;
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	22ff      	movs	r2, #255	; 0xff
 8000b74:	609a      	str	r2, [r3, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <MX_RTC_Init+0x50>)
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	0010      	movs	r0, r2
 8000b7e:	f000 fcdf 	bl	8001540 <LL_RTC_Init>
  /** Initialize RTC and set the Time and Date
  */

  /** Enable the WakeUp
  */
  LL_RTC_WAKEUP_Enable(RTC);
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_RTC_Init+0x50>)
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff fe79 	bl	800087c <LL_RTC_WAKEUP_Enable>
  LL_RTC_WAKEUP_SetClock(RTC, LL_RTC_WAKEUPCLOCK_DIV_16);
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <MX_RTC_Init+0x50>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff fe83 	bl	800089a <LL_RTC_WAKEUP_SetClock>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40002800 	.word	0x40002800

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000ba6:	2418      	movs	r4, #24
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	0018      	movs	r0, r3
 8000bac:	2308      	movs	r3, #8
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f000 fd7d 	bl	80016b0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2318      	movs	r3, #24
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f000 fd76 	bl	80016b0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000bc4:	2004      	movs	r0, #4
 8000bc6:	f7ff fdc9 	bl	800075c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fdc6 	bl	800075c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f7ff fdc3 	bl	800075c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(D1_GPIO_Port, D1_Pin);
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	2108      	movs	r1, #8
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fea6 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(A_GPIO_Port, A_Pin);
 8000be2:	23a0      	movs	r3, #160	; 0xa0
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	2110      	movs	r1, #16
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fea0 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(F_GPIO_Port, F_Pin);
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fe9a 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(D2_GPIO_Port, D2_Pin);
 8000bfa:	23a0      	movs	r3, #160	; 0xa0
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff fe94 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(D3_GPIO_Port, D3_Pin);
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fe8e 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(B_GPIO_Port, B_Pin);
 8000c12:	4bc2      	ldr	r3, [pc, #776]	; (8000f1c <MX_GPIO_Init+0x37c>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fe89 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(E_GPIO_Port, E_Pin);
 8000c1c:	4bbf      	ldr	r3, [pc, #764]	; (8000f1c <MX_GPIO_Init+0x37c>)
 8000c1e:	2102      	movs	r1, #2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fe84 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(D_GPIO_Port, D_Pin);
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	005a      	lsls	r2, r3, #1
 8000c2a:	23a0      	movs	r3, #160	; 0xa0
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff fe7c 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DP_GPIO_Port, DP_Pin);
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	009a      	lsls	r2, r3, #2
 8000c3a:	23a0      	movs	r3, #160	; 0xa0
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fe74 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(C_GPIO_Port, C_Pin);
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	00da      	lsls	r2, r3, #3
 8000c4a:	23a0      	movs	r3, #160	; 0xa0
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff fe6c 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G_GPIO_Port, G_Pin);
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	011a      	lsls	r2, r3, #4
 8000c5a:	23a0      	movs	r3, #160	; 0xa0
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fe64 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(D4_GPIO_Port, D4_Pin);
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	015a      	lsls	r2, r3, #5
 8000c6a:	23a0      	movs	r3, #160	; 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fe5c 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(signallled_GPIO_Port, signallled_Pin);
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	021a      	lsls	r2, r3, #8
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fe54 	bl	800092e <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	031b      	lsls	r3, r3, #12
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fd7b 	bl	8000788 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_2, LL_GPIO_PULL_NO);
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2200      	movs	r2, #0
 8000c98:	2104      	movs	r1, #4
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fe2b 	bl	80008f6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_2, LL_GPIO_MODE_INPUT);
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fe08 	bl	80008be <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000cae:	0021      	movs	r1, r4
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2201      	movs	r2, #1
 8000cba:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fa0c 	bl	80010e8 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = D1_Pin;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2201      	movs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cdc:	003b      	movs	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce8:	003b      	movs	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 8000cee:	003a      	movs	r2, r7
 8000cf0:	23a0      	movs	r3, #160	; 0xa0
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fb36 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = A_Pin;
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	2210      	movs	r2, #16
 8000d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d02:	003b      	movs	r3, r7
 8000d04:	2201      	movs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d08:	003b      	movs	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d0e:	003b      	movs	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d14:	003b      	movs	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	003a      	movs	r2, r7
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fb20 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = F_Pin;
 8000d28:	003b      	movs	r3, r7
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d2e:	003b      	movs	r3, r7
 8000d30:	2201      	movs	r2, #1
 8000d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d34:	003b      	movs	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d40:	003b      	movs	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(F_GPIO_Port, &GPIO_InitStruct);
 8000d46:	003a      	movs	r2, r7
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fb0a 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D2_Pin;
 8000d54:	003b      	movs	r3, r7
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d60:	003b      	movs	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d66:	003b      	movs	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d6c:	003b      	movs	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 8000d72:	003a      	movs	r2, r7
 8000d74:	23a0      	movs	r3, #160	; 0xa0
 8000d76:	05db      	lsls	r3, r3, #23
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 faf4 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D3_Pin;
 8000d80:	003b      	movs	r3, r7
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2201      	movs	r2, #1
 8000d8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d92:	003b      	movs	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d98:	003b      	movs	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	003a      	movs	r2, r7
 8000da0:	23a0      	movs	r3, #160	; 0xa0
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fade 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B_Pin;
 8000dac:	003b      	movs	r3, r7
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000db2:	003b      	movs	r3, r7
 8000db4:	2201      	movs	r2, #1
 8000db6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000db8:	003b      	movs	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dbe:	003b      	movs	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc4:	003b      	movs	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8000dca:	003b      	movs	r3, r7
 8000dcc:	4a53      	ldr	r2, [pc, #332]	; (8000f1c <MX_GPIO_Init+0x37c>)
 8000dce:	0019      	movs	r1, r3
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	f000 fac9 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = E_Pin;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2202      	movs	r2, #2
 8000dda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ddc:	003b      	movs	r3, r7
 8000dde:	2201      	movs	r2, #1
 8000de0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(E_GPIO_Port, &GPIO_InitStruct);
 8000df4:	003b      	movs	r3, r7
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <MX_GPIO_Init+0x37c>)
 8000df8:	0019      	movs	r1, r3
 8000dfa:	0010      	movs	r0, r2
 8000dfc:	f000 fab4 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D_Pin;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0052      	lsls	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e08:	003b      	movs	r3, r7
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D_GPIO_Port, &GPIO_InitStruct);
 8000e20:	003a      	movs	r2, r7
 8000e22:	23a0      	movs	r3, #160	; 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fa9d 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DP_Pin;
 8000e2e:	003b      	movs	r3, r7
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2201      	movs	r2, #1
 8000e3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DP_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	003a      	movs	r2, r7
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fa86 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = C_Pin;
 8000e5c:	003b      	movs	r3, r7
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2201      	movs	r2, #1
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(C_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	003a      	movs	r2, r7
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 fa6f 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G_Pin;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	003a      	movs	r2, r7
 8000eac:	23a0      	movs	r3, #160	; 0xa0
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 fa58 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D4_Pin;
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	0152      	lsls	r2, r2, #5
 8000ebe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	003a      	movs	r2, r7
 8000eda:	23a0      	movs	r3, #160	; 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f000 fa41 	bl	8001368 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = signallled_Pin;
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	0212      	lsls	r2, r2, #8
 8000eec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(signallled_GPIO_Port, &GPIO_InitStruct);
 8000f06:	003a      	movs	r2, r7
 8000f08:	23a0      	movs	r3, #160	; 0xa0
 8000f0a:	05db      	lsls	r3, r3, #23
 8000f0c:	0011      	movs	r1, r2
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 fa2a 	bl	8001368 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b009      	add	sp, #36	; 0x24
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	50000400 	.word	0x50000400

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f56:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f58:	f7ff fff7 	bl	8000f4a <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000f5c:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000f5e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f60:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <LoopForever+0xa>)
    CMP R1, R2
 8000f64:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f66:	d105      	bne.n	8000f74 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000f6a:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <LoopForever+0x12>)
    STR R1, [R0]
 8000f6c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f6e:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f70:	4912      	ldr	r1, [pc, #72]	; (8000fbc <LoopForever+0x1a>)
    STR R1, [R0]
 8000f72:	6001      	str	r1, [r0, #0]

08000f74 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f76:	4913      	ldr	r1, [pc, #76]	; (8000fc4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f78:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <LoopForever+0x26>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f8c:	4c10      	ldr	r4, [pc, #64]	; (8000fd0 <LoopForever+0x2e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f000 fb91 	bl	80016c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fcd2 	bl	8000946 <main>

08000fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa2:	e7fe      	b.n	8000fa2 <LoopForever>
   ldr   r0, =_estack
 8000fa4:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000fa8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000fac:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000fb0:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000fb4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000fb8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000fbc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fc8:	08001728 	.word	0x08001728
  ldr r2, =_sbss
 8000fcc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000fd0:	20000020 	.word	0x20000020

08000fd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_IRQHandler>
	...

08000fd8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <LL_EXTI_DisableIT_0_31+0x20>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	43d9      	mvns	r1, r3
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <LL_EXTI_DisableIT_0_31+0x20>)
 800100a:	400a      	ands	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40010400 	.word	0x40010400

0800101c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <LL_EXTI_EnableEvent_0_31+0x1c>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	430a      	orrs	r2, r1
 800102e:	605a      	str	r2, [r3, #4]

}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010400 	.word	0x40010400

0800103c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <LL_EXTI_DisableEvent_0_31+0x20>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	43d9      	mvns	r1, r3
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <LL_EXTI_DisableEvent_0_31+0x20>)
 800104e:	400a      	ands	r2, r1
 8001050:	605a      	str	r2, [r3, #4]
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	40010400 	.word	0x40010400

08001060 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800106a:	6899      	ldr	r1, [r3, #8]
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	430a      	orrs	r2, r1
 8001072:	609a      	str	r2, [r3, #8]

}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40010400 	.word	0x40010400

08001080 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	43d9      	mvns	r1, r3
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001092:	400a      	ands	r2, r1
 8001094:	609a      	str	r2, [r3, #8]

}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40010400 	.word	0x40010400

080010a4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80010ae:	68d9      	ldr	r1, [r3, #12]
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	60da      	str	r2, [r3, #12]
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010400 	.word	0x40010400

080010c4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80010d6:	400a      	ands	r2, r1
 80010d8:	60da      	str	r2, [r3, #12]
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	40010400 	.word	0x40010400

080010e8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80010f0:	230f      	movs	r3, #15
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	791b      	ldrb	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d100      	bne.n	8001102 <LL_EXTI_Init+0x1a>
 8001100:	e068      	b.n	80011d4 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <LL_EXTI_Init+0x24>
 800110a:	e06d      	b.n	80011e8 <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	795b      	ldrb	r3, [r3, #5]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d01b      	beq.n	800114c <LL_EXTI_Init+0x64>
 8001114:	dc25      	bgt.n	8001162 <LL_EXTI_Init+0x7a>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <LL_EXTI_Init+0x38>
 800111a:	2b01      	cmp	r3, #1
 800111c:	d00b      	beq.n	8001136 <LL_EXTI_Init+0x4e>
 800111e:	e020      	b.n	8001162 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff ff89 	bl	800103c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff ff52 	bl	8000fd8 <LL_EXTI_EnableIT_0_31>
          break;
 8001134:	e01a      	b.n	800116c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff ff5c 	bl	8000ff8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ff69 	bl	800101c <LL_EXTI_EnableEvent_0_31>
          break;
 800114a:	e00f      	b.n	800116c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff ff41 	bl	8000fd8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff ff5e 	bl	800101c <LL_EXTI_EnableEvent_0_31>
          break;
 8001160:	e004      	b.n	800116c <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8001162:	230f      	movs	r3, #15
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
          break;
 800116a:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	799b      	ldrb	r3, [r3, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d039      	beq.n	80011e8 <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	799b      	ldrb	r3, [r3, #6]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d01b      	beq.n	80011b4 <LL_EXTI_Init+0xcc>
 800117c:	dc25      	bgt.n	80011ca <LL_EXTI_Init+0xe2>
 800117e:	2b01      	cmp	r3, #1
 8001180:	d002      	beq.n	8001188 <LL_EXTI_Init+0xa0>
 8001182:	2b02      	cmp	r3, #2
 8001184:	d00b      	beq.n	800119e <LL_EXTI_Init+0xb6>
 8001186:	e020      	b.n	80011ca <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff ff99 	bl	80010c4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff ff62 	bl	8001060 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800119c:	e024      	b.n	80011e8 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ff6c 	bl	8001080 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff ff79 	bl	80010a4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80011b2:	e019      	b.n	80011e8 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff ff51 	bl	8001060 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff ff6e 	bl	80010a4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80011c8:	e00e      	b.n	80011e8 <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 80011ca:	230f      	movs	r3, #15
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
            break;
 80011d2:	e009      	b.n	80011e8 <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff0d 	bl	8000ff8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ff2a 	bl	800103c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	781b      	ldrb	r3, [r3, #0]
}
 80011ee:	0018      	movs	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b004      	add	sp, #16
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <LL_GPIO_SetPinMode>:
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	435b      	muls	r3, r3
 800120a:	001a      	movs	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	189b      	adds	r3, r3, r2
 8001212:	43db      	mvns	r3, r3
 8001214:	400b      	ands	r3, r1
 8001216:	001a      	movs	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	435b      	muls	r3, r3
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	434b      	muls	r3, r1
 8001220:	431a      	orrs	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}

0800122e <LL_GPIO_SetPinOutputType>:
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	43d2      	mvns	r2, r2
 8001242:	401a      	ands	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	434b      	muls	r3, r1
 800124a:	431a      	orrs	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	605a      	str	r2, [r3, #4]
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b004      	add	sp, #16
 8001256:	bd80      	pop	{r7, pc}

08001258 <LL_GPIO_SetPinSpeed>:
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6899      	ldr	r1, [r3, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	435b      	muls	r3, r3
 800126c:	001a      	movs	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	189b      	adds	r3, r3, r2
 8001274:	43db      	mvns	r3, r3
 8001276:	400b      	ands	r3, r1
 8001278:	001a      	movs	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	435b      	muls	r3, r3
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	434b      	muls	r3, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	609a      	str	r2, [r3, #8]
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_GPIO_SetPinPull>:
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	68d9      	ldr	r1, [r3, #12]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	435b      	muls	r3, r3
 80012a4:	001a      	movs	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	43db      	mvns	r3, r3
 80012ae:	400b      	ands	r3, r1
 80012b0:	001a      	movs	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	435b      	muls	r3, r3
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	434b      	muls	r3, r1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	60da      	str	r2, [r3, #12]
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b004      	add	sp, #16
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <LL_GPIO_SetAFPin_0_7>:
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a19      	ldr	r1, [r3, #32]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	435b      	muls	r3, r3
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	4353      	muls	r3, r2
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	435a      	muls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	43db      	mvns	r3, r3
 80012ec:	400b      	ands	r3, r1
 80012ee:	001a      	movs	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	435b      	muls	r3, r3
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	434b      	muls	r3, r1
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	434b      	muls	r3, r1
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	434b      	muls	r3, r1
 8001300:	431a      	orrs	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	621a      	str	r2, [r3, #32]
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}

0800130e <LL_GPIO_SetAFPin_8_15>:
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	0a12      	lsrs	r2, r2, #8
 8001326:	4353      	muls	r3, r2
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	0a12      	lsrs	r2, r2, #8
 800132c:	4353      	muls	r3, r2
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	0a12      	lsrs	r2, r2, #8
 8001332:	435a      	muls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	43db      	mvns	r3, r3
 800133c:	400b      	ands	r3, r1
 800133e:	001a      	movs	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	0a09      	lsrs	r1, r1, #8
 8001348:	434b      	muls	r3, r1
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	0a09      	lsrs	r1, r1, #8
 800134e:	434b      	muls	r3, r1
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	0a09      	lsrs	r1, r1, #8
 8001354:	434b      	muls	r3, r1
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	434b      	muls	r3, r1
 800135a:	431a      	orrs	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}

08001368 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800137a:	e048      	b.n	800140e <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4091      	lsls	r1, r2
 8001386:	000a      	movs	r2, r1
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03a      	beq.n	8001408 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d003      	beq.n	80013a2 <LL_GPIO_Init+0x3a>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d10e      	bne.n	80013c0 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff ff54 	bl	8001258 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff ff37 	bl	800122e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ff61 	bl	8001290 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d111      	bne.n	80013fa <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	2bff      	cmp	r3, #255	; 0xff
 80013da:	d807      	bhi.n	80013ec <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ff6f 	bl	80012c8 <LL_GPIO_SetAFPin_0_7>
 80013ea:	e006      	b.n	80013fa <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff ff8a 	bl	800130e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff fef7 	bl	80011f6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	40da      	lsrs	r2, r3
 8001416:	1e13      	subs	r3, r2, #0
 8001418:	d1b0      	bne.n	800137c <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800141a:	2300      	movs	r3, #0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b004      	add	sp, #16
 8001422:	bd80      	pop	{r7, pc}

08001424 <LL_RTC_SetHourFormat>:
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2240      	movs	r2, #64	; 0x40
 8001434:	4393      	bics	r3, r2
 8001436:	001a      	movs	r2, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <LL_RTC_EnableInitMode>:
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	4252      	negs	r2, r2
 8001456:	60da      	str	r2, [r3, #12]
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}

08001460 <LL_RTC_DisableInitMode>:
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2281      	movs	r2, #129	; 0x81
 800146c:	4252      	negs	r2, r2
 800146e:	60da      	str	r2, [r3, #12]
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}

08001478 <LL_RTC_SetAsynchPrescaler>:
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <LL_RTC_SetAsynchPrescaler+0x24>)
 8001488:	401a      	ands	r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}
 800149c:	ff80ffff 	.word	0xff80ffff

080014a0 <LL_RTC_SetSynchPrescaler>:
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	0bdb      	lsrs	r3, r3, #15
 80014b0:	03da      	lsls	r2, r3, #15
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <LL_RTC_EnableWriteProtection>:
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	22ff      	movs	r2, #255	; 0xff
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <LL_RTC_DisableWriteProtection>:
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	22ca      	movs	r2, #202	; 0xca
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2253      	movs	r2, #83	; 0x53
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	4013      	ands	r3, r2
 8001504:	2b40      	cmp	r3, #64	; 0x40
 8001506:	d101      	bne.n	800150c <LL_RTC_IsActiveFlag_INIT+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_RTC_IsActiveFlag_INIT+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	4013      	ands	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001528:	4694      	mov	ip, r2
 800152a:	4463      	add	r3, ip
 800152c:	425a      	negs	r2, r3
 800152e:	4153      	adcs	r3, r2
 8001530:	b2db      	uxtb	r3, r3
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	e000e010 	.word	0xe000e010
 800153c:	ffff0000 	.word	0xffff0000

08001540 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800154a:	240f      	movs	r4, #15
 800154c:	193b      	adds	r3, r7, r4
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0018      	movs	r0, r3
 8001556:	f7ff ffbf 	bl	80014d8 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f82a 	bl	80015b6 <LL_RTC_EnterInitMode>
 8001562:	0003      	movs	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d01b      	beq.n	80015a0 <LL_RTC_Init+0x60>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff57 	bl	8001424 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0011      	movs	r1, r2
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff ff8e 	bl	80014a0 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	0011      	movs	r1, r2
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff ff73 	bl	8001478 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff ff63 	bl	8001460 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 800159a:	193b      	adds	r3, r7, r4
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff ff8d 	bl	80014c2 <LL_RTC_EnableWriteProtection>

  return status;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b005      	add	sp, #20
 80015b4:	bd90      	pop	{r4, r7, pc}

080015b6 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80015be:	23fa      	movs	r3, #250	; 0xfa
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80015c4:	2317      	movs	r3, #23
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff ff8e 	bl	80014f4 <LL_RTC_IsActiveFlag_INIT>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d129      	bne.n	8001630 <LL_RTC_EnterInitMode+0x7a>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	0018      	movs	r0, r3
 80015e0:	f7ff ff32 	bl	8001448 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff ff84 	bl	80014f4 <LL_RTC_IsActiveFlag_INIT>
 80015ec:	0003      	movs	r3, r0
 80015ee:	613b      	str	r3, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80015f0:	e018      	b.n	8001624 <LL_RTC_EnterInitMode+0x6e>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80015f2:	f7ff ff91 	bl	8001518 <LL_SYSTICK_IsActiveCounterFlag>
 80015f6:	0003      	movs	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d102      	bne.n	8001602 <LL_RTC_EnterInitMode+0x4c>
      {
        timeout --;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3b01      	subs	r3, #1
 8001600:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ff75 	bl	80014f4 <LL_RTC_IsActiveFlag_INIT>
 800160a:	0003      	movs	r3, r0
 800160c:	613b      	str	r3, [r7, #16]
      if (timeout == 0U)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2017      	movs	r0, #23
 8001612:	183a      	adds	r2, r7, r0
 8001614:	1839      	adds	r1, r7, r0
 8001616:	7809      	ldrb	r1, [r1, #0]
 8001618:	7011      	strb	r1, [r2, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <LL_RTC_EnterInitMode+0x6e>
      {
        status = ERROR;
 800161e:	183b      	adds	r3, r7, r0
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
    while ((timeout != 0U) && (tmp != 1U))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <LL_RTC_EnterInitMode+0x7a>
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d1e0      	bne.n	80015f2 <LL_RTC_EnterInitMode+0x3c>
      }
    }
  }
  return status;
 8001630:	2317      	movs	r3, #23
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b006      	add	sp, #24
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800164a:	6839      	ldr	r1, [r7, #0]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7fe fd5b 	bl	8000108 <__udivsi3>
 8001652:	0003      	movs	r3, r0
 8001654:	001a      	movs	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <LL_InitTick+0x30>)
 8001658:	3a01      	subs	r2, #1
 800165a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <LL_InitTick+0x30>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b03      	ldr	r3, [pc, #12]	; (8001670 <LL_InitTick+0x30>)
 8001664:	2205      	movs	r2, #5
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	e000e010 	.word	0xe000e010

08001674 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800167c:	23fa      	movs	r3, #250	; 0xfa
 800167e:	009a      	lsls	r2, r3, #2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	0011      	movs	r1, r2
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff ffdb 	bl	8001640 <LL_InitTick>
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <LL_SetSystemCoreClock+0x18>)
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	20000000 	.word	0x20000000

080016b0 <memset>:
 80016b0:	0003      	movs	r3, r0
 80016b2:	1882      	adds	r2, r0, r2
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d100      	bne.n	80016ba <memset+0xa>
 80016b8:	4770      	bx	lr
 80016ba:	7019      	strb	r1, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	e7f9      	b.n	80016b4 <memset+0x4>

080016c0 <__libc_init_array>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	2600      	movs	r6, #0
 80016c4:	4c0c      	ldr	r4, [pc, #48]	; (80016f8 <__libc_init_array+0x38>)
 80016c6:	4d0d      	ldr	r5, [pc, #52]	; (80016fc <__libc_init_array+0x3c>)
 80016c8:	1b64      	subs	r4, r4, r5
 80016ca:	10a4      	asrs	r4, r4, #2
 80016cc:	42a6      	cmp	r6, r4
 80016ce:	d109      	bne.n	80016e4 <__libc_init_array+0x24>
 80016d0:	2600      	movs	r6, #0
 80016d2:	f000 f819 	bl	8001708 <_init>
 80016d6:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <__libc_init_array+0x40>)
 80016d8:	4d0a      	ldr	r5, [pc, #40]	; (8001704 <__libc_init_array+0x44>)
 80016da:	1b64      	subs	r4, r4, r5
 80016dc:	10a4      	asrs	r4, r4, #2
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d105      	bne.n	80016ee <__libc_init_array+0x2e>
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	00b3      	lsls	r3, r6, #2
 80016e6:	58eb      	ldr	r3, [r5, r3]
 80016e8:	4798      	blx	r3
 80016ea:	3601      	adds	r6, #1
 80016ec:	e7ee      	b.n	80016cc <__libc_init_array+0xc>
 80016ee:	00b3      	lsls	r3, r6, #2
 80016f0:	58eb      	ldr	r3, [r5, r3]
 80016f2:	4798      	blx	r3
 80016f4:	3601      	adds	r6, #1
 80016f6:	e7f2      	b.n	80016de <__libc_init_array+0x1e>
 80016f8:	08001720 	.word	0x08001720
 80016fc:	08001720 	.word	0x08001720
 8001700:	08001724 	.word	0x08001724
 8001704:	08001720 	.word	0x08001720

08001708 <_init>:
 8001708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170e:	bc08      	pop	{r3}
 8001710:	469e      	mov	lr, r3
 8001712:	4770      	bx	lr

08001714 <_fini>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr
