
SunRiseClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002490  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002584  08002584  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002584  08002584  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002584  08002584  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800258c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002590  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002590  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005208  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012a8  00000000  00000000  00025277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  00026520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000628  00000000  00000000  00026d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c269  00000000  00000000  00027398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005b72  00000000  00000000  00033601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003da02  00000000  00000000  00039173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d3c  00000000  00000000  00076b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000788b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002538 	.word	0x08002538

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002538 	.word	0x08002538

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	; 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
  }
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b7f      	cmp	r3, #127	; 0x7f
 8000268:	d828      	bhi.n	80002bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800026a:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <__NVIC_SetPriority+0xd4>)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	089b      	lsrs	r3, r3, #2
 8000274:	33c0      	adds	r3, #192	; 0xc0
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	589b      	ldr	r3, [r3, r2]
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	0011      	movs	r1, r2
 8000280:	2203      	movs	r2, #3
 8000282:	400a      	ands	r2, r1
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	21ff      	movs	r1, #255	; 0xff
 8000288:	4091      	lsls	r1, r2
 800028a:	000a      	movs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	401a      	ands	r2, r3
 8000290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	22ff      	movs	r2, #255	; 0xff
 8000298:	401a      	ands	r2, r3
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	2303      	movs	r3, #3
 80002a2:	4003      	ands	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <__NVIC_SetPriority+0xd4>)
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	089b      	lsrs	r3, r3, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	33c0      	adds	r3, #192	; 0xc0
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ba:	e031      	b.n	8000320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <__NVIC_SetPriority+0xd8>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230f      	movs	r3, #15
 80002c6:	400b      	ands	r3, r1
 80002c8:	3b08      	subs	r3, #8
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	3306      	adds	r3, #6
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	400a      	ands	r2, r1
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	21ff      	movs	r1, #255	; 0xff
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	401a      	ands	r2, r3
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	2303      	movs	r3, #3
 80002fe:	4003      	ands	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <__NVIC_SetPriority+0xd8>)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	001c      	movs	r4, r3
 800030c:	230f      	movs	r3, #15
 800030e:	4023      	ands	r3, r4
 8000310:	3b08      	subs	r3, #8
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18c3      	adds	r3, r0, r3
 800031c:	3304      	adds	r3, #4
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b003      	add	sp, #12
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <LL_RCC_HSI_Enable+0x18>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <LL_RCC_HSI_Enable+0x18>)
 800033a:	2101      	movs	r1, #1
 800033c:	430a      	orrs	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	40021000 	.word	0x40021000

0800034c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <LL_RCC_HSI_IsReady+0x1c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2204      	movs	r2, #4
 8000356:	4013      	ands	r3, r2
 8000358:	2b04      	cmp	r3, #4
 800035a:	d101      	bne.n	8000360 <LL_RCC_HSI_IsReady+0x14>
 800035c:	2301      	movs	r3, #1
 800035e:	e000      	b.n	8000362 <LL_RCC_HSI_IsReady+0x16>
 8000360:	2300      	movs	r3, #0
}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40021000 	.word	0x40021000

0800036c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	4a06      	ldr	r2, [pc, #24]	; (8000394 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800037a:	4013      	ands	r3, r2
 800037c:	0019      	movs	r1, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	021a      	lsls	r2, r3, #8
 8000382:	4b03      	ldr	r3, [pc, #12]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000384:	430a      	orrs	r2, r1
 8000386:	605a      	str	r2, [r3, #4]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	ffffe0ff 	.word	0xffffe0ff

08000398 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CSR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <LL_RCC_LSE_Enable+0x18>)
 800039e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <LL_RCC_LSE_Enable+0x18>)
 80003a2:	2180      	movs	r1, #128	; 0x80
 80003a4:	0049      	lsls	r1, r1, #1
 80003a6:	430a      	orrs	r2, r1
 80003a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000

080003b4 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CSR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSEBYP);
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <LL_RCC_LSE_EnableBypass+0x18>)
 80003ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <LL_RCC_LSE_EnableBypass+0x18>)
 80003be:	2180      	movs	r1, #128	; 0x80
 80003c0:	00c9      	lsls	r1, r1, #3
 80003c2:	430a      	orrs	r2, r1
 80003c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_LSE_EnableCSS>:
  * @brief  Enable Clock security system on LSE.
  * @rmtoll CSR         LSECSSON      LL_RCC_LSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableCSS(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON);
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <LL_RCC_LSE_EnableCSS+0x18>)
 80003d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <LL_RCC_LSE_EnableCSS+0x18>)
 80003da:	2180      	movs	r1, #128	; 0x80
 80003dc:	0189      	lsls	r1, r1, #6
 80003de:	430a      	orrs	r2, r1
 80003e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000

080003ec <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <LL_RCC_LSE_IsReady+0x24>)
 80003f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	401a      	ands	r2, r3
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	429a      	cmp	r2, r3
 8000400:	d101      	bne.n	8000406 <LL_RCC_LSE_IsReady+0x1a>
 8000402:	2301      	movs	r3, #1
 8000404:	e000      	b.n	8000408 <LL_RCC_LSE_IsReady+0x1c>
 8000406:	2300      	movs	r3, #0
}
 8000408:	0018      	movs	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	40021000 	.word	0x40021000

08000414 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <LL_RCC_SetSysClkSource+0x24>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	2203      	movs	r2, #3
 8000422:	4393      	bics	r3, r2
 8000424:	0019      	movs	r1, r3
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <LL_RCC_SetSysClkSource+0x24>)
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	430a      	orrs	r2, r1
 800042c:	60da      	str	r2, [r3, #12]
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40021000 	.word	0x40021000

0800043c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <LL_RCC_GetSysClkSource+0x14>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	220c      	movs	r2, #12
 8000446:	4013      	ands	r3, r2
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <LL_RCC_SetAHBPrescaler+0x24>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	22f0      	movs	r2, #240	; 0xf0
 8000462:	4393      	bics	r3, r2
 8000464:	0019      	movs	r1, r3
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <LL_RCC_SetAHBPrescaler+0x24>)
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	430a      	orrs	r2, r1
 800046c:	60da      	str	r2, [r3, #12]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <LL_RCC_SetAPB1Prescaler+0x28>)
 800048a:	4013      	ands	r3, r2
 800048c:	0019      	movs	r1, r3
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	430a      	orrs	r2, r1
 8000494:	60da      	str	r2, [r3, #12]
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40021000 	.word	0x40021000
 80004a4:	fffff8ff 	.word	0xfffff8ff

080004a8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <LL_RCC_SetAPB2Prescaler+0x28>)
 80004b6:	4013      	ands	r3, r2
 80004b8:	0019      	movs	r1, r3
 80004ba:	4b04      	ldr	r3, [pc, #16]	; (80004cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	430a      	orrs	r2, r1
 80004c0:	60da      	str	r2, [r3, #12]
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000
 80004d0:	ffffc7ff 	.word	0xffffc7ff

080004d4 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <LL_RCC_SetUSARTClockSource+0x2c>)
 80004de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	0c12      	lsrs	r2, r2, #16
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	401a      	ands	r2, r3
 80004e8:	0011      	movs	r1, r2
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	041b      	lsls	r3, r3, #16
 80004ee:	0c1a      	lsrs	r2, r3, #16
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <LL_RCC_SetUSARTClockSource+0x2c>)
 80004f2:	430a      	orrs	r2, r1
 80004f4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000

08000504 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL, Source);
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <LL_RCC_SetRTCClockSource+0x24>)
 800050e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <LL_RCC_SetRTCClockSource+0x28>)
 8000512:	4013      	ands	r3, r2
 8000514:	0019      	movs	r1, r3
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <LL_RCC_SetRTCClockSource+0x24>)
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	430a      	orrs	r2, r1
 800051c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	40021000 	.word	0x40021000
 800052c:	fffcffff 	.word	0xfffcffff

08000530 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RTCSEL));
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <LL_RCC_GetRTCClockSource+0x14>)
 8000536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000538:	23c0      	movs	r3, #192	; 0xc0
 800053a:	029b      	lsls	r3, r3, #10
 800053c:	4013      	ands	r3, r2
}
 800053e:	0018      	movs	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000

08000548 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll CSR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <LL_RCC_EnableRTC+0x18>)
 800054e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <LL_RCC_EnableRTC+0x18>)
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	02c9      	lsls	r1, r1, #11
 8000556:	430a      	orrs	r2, r1
 8000558:	651a      	str	r2, [r3, #80]	; 0x50
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll CSR         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RTCRST);
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_RCC_ForceBackupDomainReset+0x18>)
 800056a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <LL_RCC_ForceBackupDomainReset+0x18>)
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	0309      	lsls	r1, r1, #12
 8000572:	430a      	orrs	r2, r1
 8000574:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll CSR         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST);
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 8000586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 800058a:	4904      	ldr	r1, [pc, #16]	; (800059c <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 800058c:	400a      	ands	r2, r1
 800058e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	40021000 	.word	0x40021000
 800059c:	fff7ffff 	.word	0xfff7ffff

080005a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_RCC_PLL_Enable+0x18>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <LL_RCC_PLL_Enable+0x18>)
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	0449      	lsls	r1, r1, #17
 80005ae:	430a      	orrs	r2, r1
 80005b0:	601a      	str	r2, [r3, #0]
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <LL_RCC_PLL_IsReady+0x24>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	049b      	lsls	r3, r3, #18
 80005c8:	401a      	ands	r2, r3
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	049b      	lsls	r3, r3, #18
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d101      	bne.n	80005d6 <LL_RCC_PLL_IsReady+0x1a>
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <LL_RCC_PLL_IsReady+0x1c>
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000

080005e4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 80005f6:	4013      	ands	r3, r2
 80005f8:	0019      	movs	r1, r3
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	431a      	orrs	r2, r3
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000606:	430a      	orrs	r2, r1
 8000608:	60da      	str	r2, [r3, #12]
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b004      	add	sp, #16
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	40021000 	.word	0x40021000
 8000618:	ff02ffff 	.word	0xff02ffff

0800061c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <LL_APB1_GRP1_EnableClock+0x28>)
 8000626:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <LL_APB1_GRP1_EnableClock+0x28>)
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	430a      	orrs	r2, r1
 800062e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <LL_APB1_GRP1_EnableClock+0x28>)
 8000632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4013      	ands	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <LL_APB2_GRP1_EnableClock+0x28>)
 8000652:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LL_APB2_GRP1_EnableClock+0x28>)
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	430a      	orrs	r2, r1
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <LL_APB2_GRP1_EnableClock+0x28>)
 800065e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b004      	add	sp, #16
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <LL_IOP_GRP1_EnableClock+0x28>)
 800067e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <LL_IOP_GRP1_EnableClock+0x28>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	430a      	orrs	r2, r1
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <LL_IOP_GRP1_EnableClock+0x28>)
 800068a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4013      	ands	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000692:	68fb      	ldr	r3, [r7, #12]
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b004      	add	sp, #16
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000

080006a0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <LL_SYSCFG_SetEXTISource+0x48>)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	21ff      	movs	r1, #255	; 0xff
 80006b0:	400b      	ands	r3, r1
 80006b2:	3302      	adds	r3, #2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	589b      	ldr	r3, [r3, r2]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	0c12      	lsrs	r2, r2, #16
 80006bc:	210f      	movs	r1, #15
 80006be:	4091      	lsls	r1, r2
 80006c0:	000a      	movs	r2, r1
 80006c2:	43d2      	mvns	r2, r2
 80006c4:	401a      	ands	r2, r3
 80006c6:	0011      	movs	r1, r2
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	0c1b      	lsrs	r3, r3, #16
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	409a      	lsls	r2, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <LL_SYSCFG_SetEXTISource+0x48>)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	24ff      	movs	r4, #255	; 0xff
 80006d6:	4023      	ands	r3, r4
 80006d8:	430a      	orrs	r2, r1
 80006da:	3302      	adds	r3, #2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	501a      	str	r2, [r3, r0]
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b003      	add	sp, #12
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	40010000 	.word	0x40010000

080006ec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <LL_FLASH_SetLatency+0x24>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2201      	movs	r2, #1
 80006fa:	4393      	bics	r3, r2
 80006fc:	0019      	movs	r1, r3
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <LL_FLASH_SetLatency+0x24>)
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	430a      	orrs	r2, r1
 8000704:	601a      	str	r2, [r3, #0]
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40022000 	.word	0x40022000

08000714 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <LL_FLASH_GetLatency+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2201      	movs	r2, #1
 800071e:	4013      	ands	r3, r2
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40022000 	.word	0x40022000

0800072c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800073a:	4013      	ands	r3, r2
 800073c:	0019      	movs	r1, r3
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	430a      	orrs	r2, r1
 8000744:	601a      	str	r2, [r3, #0]
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40007000 	.word	0x40007000
 8000754:	ffffe7ff 	.word	0xffffe7ff

08000758 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <LL_PWR_EnableBkUpAccess+0x18>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <LL_PWR_EnableBkUpAccess+0x18>)
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	0049      	lsls	r1, r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	601a      	str	r2, [r3, #0]
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40007000 	.word	0x40007000

08000774 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <LL_PWR_IsActiveFlag_VOS+0x1c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2210      	movs	r2, #16
 800077e:	4013      	ands	r3, r2
 8000780:	3b10      	subs	r3, #16
 8000782:	425a      	negs	r2, r3
 8000784:	4153      	adcs	r3, r2
 8000786:	b2db      	uxtb	r3, r3
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40007000 	.word	0x40007000

08000794 <LL_RTC_WAKEUP_Enable>:
  * @rmtoll CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	00d2      	lsls	r2, r2, #3
 80007a4:	431a      	orrs	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	609a      	str	r2, [r3, #8]
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	2207      	movs	r2, #7
 80007c2:	4393      	bics	r3, r2
 80007c4:	001a      	movs	r2, r3
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	431a      	orrs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	609a      	str	r2, [r3, #8]
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	4393      	bics	r3, r2
 80007e6:	001a      	movs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d00d      	beq.n	8000820 <LL_TIM_OC_DisableFast+0x2c>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2b10      	cmp	r3, #16
 8000808:	d008      	beq.n	800081c <LL_TIM_OC_DisableFast+0x28>
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	429a      	cmp	r2, r3
 8000812:	d101      	bne.n	8000818 <LL_TIM_OC_DisableFast+0x24>
 8000814:	2304      	movs	r3, #4
 8000816:	e004      	b.n	8000822 <LL_TIM_OC_DisableFast+0x2e>
 8000818:	2306      	movs	r3, #6
 800081a:	e002      	b.n	8000822 <LL_TIM_OC_DisableFast+0x2e>
 800081c:	2302      	movs	r3, #2
 800081e:	e000      	b.n	8000822 <LL_TIM_OC_DisableFast+0x2e>
 8000820:	2300      	movs	r3, #0
 8000822:	200f      	movs	r0, #15
 8000824:	183a      	adds	r2, r7, r0
 8000826:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3318      	adds	r3, #24
 800082c:	0019      	movs	r1, r3
 800082e:	183b      	adds	r3, r7, r0
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LL_TIM_OC_DisableFast+0x68>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	18cb      	adds	r3, r1, r3
 8000838:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	183a      	adds	r2, r7, r0
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	4907      	ldr	r1, [pc, #28]	; (8000860 <LL_TIM_OC_DisableFast+0x6c>)
 8000844:	5c8a      	ldrb	r2, [r1, r2]
 8000846:	0011      	movs	r1, r2
 8000848:	2204      	movs	r2, #4
 800084a:	408a      	lsls	r2, r1
 800084c:	43d2      	mvns	r2, r2
 800084e:	401a      	ands	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	601a      	str	r2, [r3, #0]

}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b004      	add	sp, #16
 800085a:	bd80      	pop	{r7, pc}
 800085c:	08002550 	.word	0x08002550
 8000860:	08002558 	.word	0x08002558

08000864 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d00d      	beq.n	8000890 <LL_TIM_OC_EnablePreload+0x2c>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	2b10      	cmp	r3, #16
 8000878:	d008      	beq.n	800088c <LL_TIM_OC_EnablePreload+0x28>
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	429a      	cmp	r2, r3
 8000882:	d101      	bne.n	8000888 <LL_TIM_OC_EnablePreload+0x24>
 8000884:	2304      	movs	r3, #4
 8000886:	e004      	b.n	8000892 <LL_TIM_OC_EnablePreload+0x2e>
 8000888:	2306      	movs	r3, #6
 800088a:	e002      	b.n	8000892 <LL_TIM_OC_EnablePreload+0x2e>
 800088c:	2302      	movs	r3, #2
 800088e:	e000      	b.n	8000892 <LL_TIM_OC_EnablePreload+0x2e>
 8000890:	2300      	movs	r3, #0
 8000892:	200f      	movs	r0, #15
 8000894:	183a      	adds	r2, r7, r0
 8000896:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3318      	adds	r3, #24
 800089c:	0019      	movs	r1, r3
 800089e:	183b      	adds	r3, r7, r0
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LL_TIM_OC_EnablePreload+0x68>)
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	18cb      	adds	r3, r1, r3
 80008a8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4907      	ldr	r1, [pc, #28]	; (80008d0 <LL_TIM_OC_EnablePreload+0x6c>)
 80008b4:	5ccb      	ldrb	r3, [r1, r3]
 80008b6:	0019      	movs	r1, r3
 80008b8:	2308      	movs	r3, #8
 80008ba:	408b      	lsls	r3, r1
 80008bc:	431a      	orrs	r2, r3
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	601a      	str	r2, [r3, #0]
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b004      	add	sp, #16
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	08002550 	.word	0x08002550
 80008d0:	08002558 	.word	0x08002558

080008d4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2270      	movs	r2, #112	; 0x70
 80008e4:	4393      	bics	r3, r2
 80008e6:	001a      	movs	r2, r3
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	605a      	str	r2, [r3, #4]
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	4393      	bics	r3, r2
 8000908:	001a      	movs	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	609a      	str	r2, [r3, #8]
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}

08000916 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2201      	movs	r2, #1
 8000924:	431a      	orrs	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <LL_USART_ConfigAsyncMode+0x2c>)
 8000942:	401a      	ands	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	222a      	movs	r2, #42	; 0x2a
 800094e:	4393      	bics	r3, r2
 8000950:	001a      	movs	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	609a      	str	r2, [r3, #8]
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	ffffb7ff 	.word	0xffffb7ff

08000964 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6819      	ldr	r1, [r3, #0]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	435b      	muls	r3, r3
 8000978:	001a      	movs	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	189b      	adds	r3, r3, r2
 8000980:	43db      	mvns	r3, r3
 8000982:	400b      	ands	r3, r1
 8000984:	001a      	movs	r2, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	435b      	muls	r3, r3
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	434b      	muls	r3, r1
 800098e:	431a      	orrs	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}

0800099c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	68d9      	ldr	r1, [r3, #12]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	435b      	muls	r3, r3
 80009b0:	001a      	movs	r2, r3
 80009b2:	0013      	movs	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	189b      	adds	r3, r3, r2
 80009b8:	43db      	mvns	r3, r3
 80009ba:	400b      	ands	r3, r1
 80009bc:	001a      	movs	r2, r3
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	435b      	muls	r3, r3
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	434b      	muls	r3, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b004      	add	sp, #16
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	619a      	str	r2, [r3, #24]
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}

080009ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fe1d 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	055b      	lsls	r3, r3, #21
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fe02 	bl	800061c <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8000a18:	2301      	movs	r3, #1
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fc18 	bl	8000254 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f80c 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a28:	f000 fa3a 	bl	8000ea0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a2c:	f000 f884 	bl	8000b38 <MX_RTC_Init>
  MX_TIM2_Init();
 8000a30:	f000 f8ac 	bl	8000b8c <MX_TIM2_Init>
  MX_TIM21_Init();
 8000a34:	f000 f92e 	bl	8000c94 <MX_TIM21_Init>
  MX_USART2_UART_Init();
 8000a38:	f000 f9ba 	bl	8000db0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x38>
	...

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fe51 	bl	80006ec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	f7ff fe62 	bl	8000714 <LL_FLASH_GetLatency>
 8000a50:	0003      	movs	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d1fa      	bne.n	8000a4c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff fe66 	bl	800072c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	f7ff fe87 	bl	8000774 <LL_PWR_IsActiveFlag_VOS>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d1fb      	bne.n	8000a62 <SystemClock_Config+0x22>
  {
  }
  LL_RCC_HSI_Enable();
 8000a6a:	f7ff fc61 	bl	8000330 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	f7ff fc6c 	bl	800034c <LL_RCC_HSI_IsReady>
 8000a74:	0003      	movs	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d1fa      	bne.n	8000a70 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000a7a:	2010      	movs	r0, #16
 8000a7c:	f7ff fc76 	bl	800036c <LL_RCC_HSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8000a80:	f7ff fe6a 	bl	8000758 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8000a84:	f7ff fd54 	bl	8000530 <LL_RCC_GetRTCClockSource>
 8000a88:	0002      	movs	r2, r0
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d003      	beq.n	8000a9a <SystemClock_Config+0x5a>
  {
    LL_RCC_ForceBackupDomainReset();
 8000a92:	f7ff fd67 	bl	8000564 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8000a96:	f7ff fd73 	bl	8000580 <LL_RCC_ReleaseBackupDomainReset>
  }
  LL_RCC_LSE_EnableBypass();
 8000a9a:	f7ff fc8b 	bl	80003b4 <LL_RCC_LSE_EnableBypass>
  LL_RCC_LSE_Enable();
 8000a9e:	f7ff fc7b 	bl	8000398 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	f7ff fca2 	bl	80003ec <LL_RCC_LSE_IsReady>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d1fa      	bne.n	8000aa4 <SystemClock_Config+0x64>
  {

  }
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8000aae:	f7ff fd3f 	bl	8000530 <LL_RCC_GetRTCClockSource>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	025b      	lsls	r3, r3, #9
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d004      	beq.n	8000ac6 <SystemClock_Config+0x86>
  {
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff fd1f 	bl	8000504 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 8000ac6:	f7ff fd3f 	bl	8000548 <LL_RCC_EnableRTC>
  LL_RCC_LSE_EnableCSS();
 8000aca:	f7ff fc81 	bl	80003d0 <LL_RCC_LSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	03da      	lsls	r2, r3, #15
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	02db      	lsls	r3, r3, #11
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fd83 	bl	80005e4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000ade:	f7ff fd5f 	bl	80005a0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	f7ff fd6a 	bl	80005bc <LL_RCC_PLL_IsReady>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d1fa      	bne.n	8000ae4 <SystemClock_Config+0xa4>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff fcb0 	bl	8000454 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff fcc1 	bl	800047c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fcd4 	bl	80004a8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f7ff fc87 	bl	8000414 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	f7ff fc98 	bl	800043c <LL_RCC_GetSysClkSource>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	2b0c      	cmp	r3, #12
 8000b10:	d1fa      	bne.n	8000b08 <SystemClock_Config+0xc8>
  {

  }

  LL_Init1msTick(32000000);
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <SystemClock_Config+0xf4>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fcc5 	bl	80024a4 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <SystemClock_Config+0xf4>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 fcd1 	bl	80024c4 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000b22:	23c0      	movs	r3, #192	; 0xc0
 8000b24:	031b      	lsls	r3, r3, #12
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fcd4 	bl	80004d4 <LL_RCC_SetUSARTClockSource>
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	01e84800 	.word	0x01e84800

08000b38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	0018      	movs	r0, r3
 8000b42:	230c      	movs	r3, #12
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f001 fcca 	bl	80024e0 <memset>

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8000b4c:	f7ff fcfc 	bl	8000548 <LL_RCC_EnableRTC>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
  RTC_InitStruct.AsynchPrescaler = 127;
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	227f      	movs	r2, #127	; 0x7f
 8000b5a:	605a      	str	r2, [r3, #4]
  RTC_InitStruct.SynchPrescaler = 255;
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	22ff      	movs	r2, #255	; 0xff
 8000b60:	609a      	str	r2, [r3, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <MX_RTC_Init+0x50>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	0010      	movs	r0, r2
 8000b6a:	f001 f911 	bl	8001d90 <LL_RTC_Init>
  /** Initialize RTC and set the Time and Date
  */

  /** Enable the WakeUp
  */
  LL_RTC_WAKEUP_Enable(RTC);
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_RTC_Init+0x50>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fe0f 	bl	8000794 <LL_RTC_WAKEUP_Enable>
  LL_RTC_WAKEUP_SetClock(RTC, LL_RTC_WAKEUPCLOCK_DIV_16);
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <MX_RTC_Init+0x50>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff fe19 	bl	80007b2 <LL_RTC_WAKEUP_SetClock>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b004      	add	sp, #16
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40002800 	.word	0x40002800

08000b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b92:	2428      	movs	r4, #40	; 0x28
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	0018      	movs	r0, r3
 8000b98:	2310      	movs	r3, #16
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f001 fc9f 	bl	80024e0 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000ba2:	2518      	movs	r5, #24
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2310      	movs	r3, #16
 8000baa:	001a      	movs	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	f001 fc97 	bl	80024e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	2318      	movs	r3, #24
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f001 fc90 	bl	80024e0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fd2b 	bl	800061c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <MX_TIM2_Init+0x104>)
 8000bd6:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000bde:	193a      	adds	r2, r7, r4
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	0011      	movs	r1, r2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 f9a8 	bl	8001f3c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fdf0 	bl	80007d6 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fe31 	bl	8000864 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000c02:	0029      	movs	r1, r5
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2260      	movs	r2, #96	; 0x60
 8000c08:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000c1c:	187a      	adds	r2, r7, r1
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	2101      	movs	r1, #1
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 f9d1 	bl	8001fcc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	2101      	movs	r1, #1
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff fddf 	bl	80007f4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	05db      	lsls	r3, r3, #23
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fe49 	bl	80008d4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff fe56 	bl	80008f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fd11 	bl	8000674 <LL_IOP_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000c52:	003b      	movs	r3, r7
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	0212      	lsls	r2, r2, #8
 8000c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c60:	003b      	movs	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c66:	003b      	movs	r3, r7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c6c:	003b      	movs	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000c72:	003b      	movs	r3, r7
 8000c74:	2205      	movs	r2, #5
 8000c76:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000c78:	003a      	movs	r2, r7
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fe03 	bl	800188c <LL_GPIO_Init>

}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b00e      	add	sp, #56	; 0x38
 8000c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	0000ffff 	.word	0x0000ffff

08000c94 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b08e      	sub	sp, #56	; 0x38
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c9a:	2528      	movs	r5, #40	; 0x28
 8000c9c:	197b      	adds	r3, r7, r5
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f001 fc1b 	bl	80024e0 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000caa:	2418      	movs	r4, #24
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f001 fc13 	bl	80024e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	003b      	movs	r3, r7
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2318      	movs	r3, #24
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f001 fc0c 	bl	80024e0 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 8000cc8:	2004      	movs	r0, #4
 8000cca:	f7ff fcbd 	bl	8000648 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000cce:	197b      	adds	r3, r7, r5
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cd4:	197b      	adds	r3, r7, r5
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000cda:	197b      	adds	r3, r7, r5
 8000cdc:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <MX_TIM21_Init+0x110>)
 8000cde:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000ce0:	197b      	adds	r3, r7, r5
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 8000ce6:	197b      	adds	r3, r7, r5
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000cea:	0019      	movs	r1, r3
 8000cec:	0010      	movs	r0, r2
 8000cee:	f001 f925 	bl	8001f3c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM21);
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fd6e 	bl	80007d6 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM21, LL_TIM_CHANNEL_CH1);
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fdb0 	bl	8000864 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2260      	movs	r2, #96	; 0x60
 8000d08:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM21, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	4822      	ldr	r0, [pc, #136]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000d20:	001a      	movs	r2, r3
 8000d22:	2101      	movs	r1, #1
 8000d24:	f001 f952 	bl	8001fcc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM21, LL_TIM_CHANNEL_CH1);
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff fd61 	bl	80007f4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM21, LL_TIM_CHANNEL_CH2);
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000d34:	2110      	movs	r1, #16
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fd94 	bl	8000864 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM21, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	481a      	ldr	r0, [pc, #104]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000d40:	001a      	movs	r2, r3
 8000d42:	2110      	movs	r1, #16
 8000d44:	f001 f942 	bl	8001fcc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM21, LL_TIM_CHANNEL_CH2);
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fd51 	bl	80007f4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000d54:	2100      	movs	r1, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fdbc 	bl	80008d4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM21);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_TIM21_Init+0x114>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fdca 	bl	80008f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d64:	2002      	movs	r0, #2
 8000d66:	f7ff fc85 	bl	8000674 <LL_IOP_GRP1_EnableClock>
  /**TIM21 GPIO Configuration
  PB5   ------> TIM21_CH1
  */
  GPIO_InitStruct.Pin = mainLED_Pin;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d70:	003b      	movs	r3, r7
 8000d72:	2202      	movs	r2, #2
 8000d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d76:	003b      	movs	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d82:	003b      	movs	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000d88:	003b      	movs	r3, r7
 8000d8a:	2205      	movs	r2, #5
 8000d8c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(mainLED_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	003b      	movs	r3, r7
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <MX_TIM21_Init+0x118>)
 8000d92:	0019      	movs	r1, r3
 8000d94:	0010      	movs	r0, r2
 8000d96:	f000 fd79 	bl	800188c <LL_GPIO_Init>

}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b00e      	add	sp, #56	; 0x38
 8000da0:	bdb0      	pop	{r4, r5, r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	0000ffff 	.word	0x0000ffff
 8000da8:	40010800 	.word	0x40010800
 8000dac:	50000400 	.word	0x50000400

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b08f      	sub	sp, #60	; 0x3c
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000db6:	241c      	movs	r4, #28
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	0018      	movs	r0, r3
 8000dbc:	231c      	movs	r3, #28
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f001 fb8d 	bl	80024e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	2318      	movs	r3, #24
 8000dcc:	001a      	movs	r2, r3
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f001 fb86 	bl	80024e0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	029b      	lsls	r3, r3, #10
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff fc1f 	bl	800061c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff fc48 	bl	8000674 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PB6   ------> USART2_TX
  PB7   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2240      	movs	r2, #64	; 0x40
 8000de8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2202      	movs	r2, #2
 8000dee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2203      	movs	r2, #3
 8000df4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <MX_USART2_UART_Init+0xe8>)
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	0010      	movs	r0, r2
 8000e10:	f000 fd3c 	bl	800188c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2203      	movs	r2, #3
 8000e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <MX_USART2_UART_Init+0xe8>)
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	0010      	movs	r0, r2
 8000e40:	f000 fd24 	bl	800188c <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	22e1      	movs	r2, #225	; 0xe1
 8000e48:	0252      	lsls	r2, r2, #9
 8000e4a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e4c:	0021      	movs	r1, r4
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	220c      	movs	r2, #12
 8000e64:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <MX_USART2_UART_Init+0xec>)
 8000e76:	0019      	movs	r1, r3
 8000e78:	0010      	movs	r0, r2
 8000e7a:	f001 faa1 	bl	80023c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_USART2_UART_Init+0xec>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fd57 	bl	8000934 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <MX_USART2_UART_Init+0xec>)
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fd44 	bl	8000916 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b00f      	add	sp, #60	; 0x3c
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	50000400 	.word	0x50000400
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000ea6:	2418      	movs	r4, #24
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	0018      	movs	r0, r3
 8000eac:	2308      	movs	r3, #8
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f001 fb15 	bl	80024e0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2318      	movs	r3, #24
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f001 fb0e 	bl	80024e0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000ec4:	2004      	movs	r0, #4
 8000ec6:	f7ff fbd5 	bl	8000674 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fbd2 	bl	8000674 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff fbcf 	bl	8000674 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(EN_GPIO_Port, EN_Pin);
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	4afe      	ldr	r2, [pc, #1016]	; (80012d4 <MX_GPIO_Init+0x434>)
 8000edc:	0019      	movs	r1, r3
 8000ede:	0010      	movs	r0, r2
 8000ee0:	f7ff fd84 	bl	80009ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(D1_GPIO_Port, D1_Pin);
 8000ee4:	23a0      	movs	r3, #160	; 0xa0
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	2108      	movs	r1, #8
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff fd7e 	bl	80009ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(D2_GPIO_Port, D2_Pin);
 8000ef0:	23a0      	movs	r3, #160	; 0xa0
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff fd78 	bl	80009ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(D3_GPIO_Port, D3_Pin);
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	23a0      	movs	r3, #160	; 0xa0
 8000f02:	05db      	lsls	r3, r3, #23
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff fd70 	bl	80009ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(D4_GPIO_Port, D4_Pin);
 8000f0c:	4bf2      	ldr	r3, [pc, #968]	; (80012d8 <MX_GPIO_Init+0x438>)
 8000f0e:	2110      	movs	r1, #16
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fd6b 	bl	80009ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(d_GPIO_Port, d_Pin);
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fd59 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	2140      	movs	r1, #64	; 0x40
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff fd53 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000f2e:	23a0      	movs	r3, #160	; 0xa0
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fd4d 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(g_GPIO_Port, g_Pin);
 8000f3a:	4be7      	ldr	r3, [pc, #924]	; (80012d8 <MX_GPIO_Init+0x438>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff fd48 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000f44:	4be4      	ldr	r3, [pc, #912]	; (80012d8 <MX_GPIO_Init+0x438>)
 8000f46:	2102      	movs	r1, #2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff fd43 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(alarm_GPIO_Port, alarm_Pin);
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	005a      	lsls	r2, r3, #1
 8000f52:	23a0      	movs	r3, #160	; 0xa0
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff fd3b 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(f_GPIO_Port, f_Pin);
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	009a      	lsls	r2, r3, #2
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff fd33 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(l1l2_GPIO_Port, l1l2_Pin);
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	00da      	lsls	r2, r3, #3
 8000f72:	23a0      	movs	r3, #160	; 0xa0
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff fd2b 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(e_GPIO_Port, e_Pin);
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	011a      	lsls	r2, r3, #4
 8000f82:	23a0      	movs	r3, #160	; 0xa0
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fd23 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(dp_GPIO_Port, dp_Pin);
 8000f8e:	4bd2      	ldr	r3, [pc, #840]	; (80012d8 <MX_GPIO_Init+0x438>)
 8000f90:	2108      	movs	r1, #8
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff fd1e 	bl	80009d4 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = EN_Pin;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	0212      	lsls	r2, r2, #8
 8000f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	003b      	movs	r3, r7
 8000fba:	4ac6      	ldr	r2, [pc, #792]	; (80012d4 <MX_GPIO_Init+0x434>)
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	f000 fc64 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D1_Pin;
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fca:	003b      	movs	r3, r7
 8000fcc:	2201      	movs	r2, #1
 8000fce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fd0:	003b      	movs	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000fdc:	003b      	movs	r3, r7
 8000fde:	2202      	movs	r2, #2
 8000fe0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	003a      	movs	r2, r7
 8000fe4:	23a0      	movs	r3, #160	; 0xa0
 8000fe6:	05db      	lsls	r3, r3, #23
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fc4e 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D2_Pin;
 8000ff0:	003b      	movs	r3, r7
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001002:	003b      	movs	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001008:	003b      	movs	r3, r7
 800100a:	2202      	movs	r2, #2
 800100c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 800100e:	003a      	movs	r2, r7
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	0011      	movs	r1, r2
 8001016:	0018      	movs	r0, r3
 8001018:	f000 fc38 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = d_Pin;
 800101c:	003b      	movs	r3, r7
 800101e:	2220      	movs	r2, #32
 8001020:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001022:	003b      	movs	r3, r7
 8001024:	2201      	movs	r2, #1
 8001026:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001028:	003b      	movs	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800102e:	003b      	movs	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001034:	003b      	movs	r3, r7
 8001036:	2201      	movs	r2, #1
 8001038:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(d_GPIO_Port, &GPIO_InitStruct);
 800103a:	003a      	movs	r2, r7
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fc22 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = c_Pin;
 8001048:	003b      	movs	r3, r7
 800104a:	2240      	movs	r2, #64	; 0x40
 800104c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800104e:	003b      	movs	r3, r7
 8001050:	2201      	movs	r2, #1
 8001052:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001054:	003b      	movs	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800105a:	003b      	movs	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001060:	003b      	movs	r3, r7
 8001062:	2201      	movs	r2, #1
 8001064:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(c_GPIO_Port, &GPIO_InitStruct);
 8001066:	003a      	movs	r2, r7
 8001068:	23a0      	movs	r3, #160	; 0xa0
 800106a:	05db      	lsls	r3, r3, #23
 800106c:	0011      	movs	r1, r2
 800106e:	0018      	movs	r0, r3
 8001070:	f000 fc0c 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = a_Pin;
 8001074:	003b      	movs	r3, r7
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800107a:	003b      	movs	r3, r7
 800107c:	2201      	movs	r2, #1
 800107e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001080:	003b      	movs	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001086:	003b      	movs	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800108c:	003b      	movs	r3, r7
 800108e:	2201      	movs	r2, #1
 8001090:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(a_GPIO_Port, &GPIO_InitStruct);
 8001092:	003a      	movs	r2, r7
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f000 fbf6 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = g_Pin;
 80010a0:	003b      	movs	r3, r7
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010a6:	003b      	movs	r3, r7
 80010a8:	2201      	movs	r2, #1
 80010aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ac:	003b      	movs	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b2:	003b      	movs	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80010b8:	003b      	movs	r3, r7
 80010ba:	2201      	movs	r2, #1
 80010bc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(g_GPIO_Port, &GPIO_InitStruct);
 80010be:	003b      	movs	r3, r7
 80010c0:	4a85      	ldr	r2, [pc, #532]	; (80012d8 <MX_GPIO_Init+0x438>)
 80010c2:	0019      	movs	r1, r3
 80010c4:	0010      	movs	r0, r2
 80010c6:	f000 fbe1 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = b_Pin;
 80010ca:	003b      	movs	r3, r7
 80010cc:	2202      	movs	r2, #2
 80010ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010d0:	003b      	movs	r3, r7
 80010d2:	2201      	movs	r2, #1
 80010d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010d6:	003b      	movs	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010dc:	003b      	movs	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80010e2:	003b      	movs	r3, r7
 80010e4:	2201      	movs	r2, #1
 80010e6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(b_GPIO_Port, &GPIO_InitStruct);
 80010e8:	003b      	movs	r3, r7
 80010ea:	4a7b      	ldr	r2, [pc, #492]	; (80012d8 <MX_GPIO_Init+0x438>)
 80010ec:	0019      	movs	r1, r3
 80010ee:	0010      	movs	r0, r2
 80010f0:	f000 fbcc 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = alarm_Pin;
 80010f4:	003b      	movs	r3, r7
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0052      	lsls	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010fc:	003b      	movs	r3, r7
 80010fe:	2201      	movs	r2, #1
 8001100:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001102:	003b      	movs	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001108:	003b      	movs	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800110e:	003b      	movs	r3, r7
 8001110:	2201      	movs	r2, #1
 8001112:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(alarm_GPIO_Port, &GPIO_InitStruct);
 8001114:	003a      	movs	r2, r7
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fbb5 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = f_Pin;
 8001122:	003b      	movs	r3, r7
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800112a:	003b      	movs	r3, r7
 800112c:	2201      	movs	r2, #1
 800112e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001130:	003b      	movs	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001136:	003b      	movs	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800113c:	003b      	movs	r3, r7
 800113e:	2201      	movs	r2, #1
 8001140:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(f_GPIO_Port, &GPIO_InitStruct);
 8001142:	003a      	movs	r2, r7
 8001144:	23a0      	movs	r3, #160	; 0xa0
 8001146:	05db      	lsls	r3, r3, #23
 8001148:	0011      	movs	r1, r2
 800114a:	0018      	movs	r0, r3
 800114c:	f000 fb9e 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = l1l2_Pin;
 8001150:	003b      	movs	r3, r7
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	00d2      	lsls	r2, r2, #3
 8001156:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001158:	003b      	movs	r3, r7
 800115a:	2201      	movs	r2, #1
 800115c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800115e:	003b      	movs	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001164:	003b      	movs	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800116a:	003b      	movs	r3, r7
 800116c:	2201      	movs	r2, #1
 800116e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(l1l2_GPIO_Port, &GPIO_InitStruct);
 8001170:	003a      	movs	r2, r7
 8001172:	23a0      	movs	r3, #160	; 0xa0
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	0011      	movs	r1, r2
 8001178:	0018      	movs	r0, r3
 800117a:	f000 fb87 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = e_Pin;
 800117e:	003b      	movs	r3, r7
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001186:	003b      	movs	r3, r7
 8001188:	2201      	movs	r2, #1
 800118a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800118c:	003b      	movs	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001192:	003b      	movs	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001198:	003b      	movs	r3, r7
 800119a:	2201      	movs	r2, #1
 800119c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(e_GPIO_Port, &GPIO_InitStruct);
 800119e:	003a      	movs	r2, r7
 80011a0:	23a0      	movs	r3, #160	; 0xa0
 80011a2:	05db      	lsls	r3, r3, #23
 80011a4:	0011      	movs	r1, r2
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 fb70 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D3_Pin;
 80011ac:	003b      	movs	r3, r7
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	0152      	lsls	r2, r2, #5
 80011b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011b4:	003b      	movs	r3, r7
 80011b6:	2201      	movs	r2, #1
 80011b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011ba:	003b      	movs	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c0:	003b      	movs	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80011c6:	003b      	movs	r3, r7
 80011c8:	2202      	movs	r2, #2
 80011ca:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 80011cc:	003a      	movs	r2, r7
 80011ce:	23a0      	movs	r3, #160	; 0xa0
 80011d0:	05db      	lsls	r3, r3, #23
 80011d2:	0011      	movs	r1, r2
 80011d4:	0018      	movs	r0, r3
 80011d6:	f000 fb59 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = dp_Pin;
 80011da:	003b      	movs	r3, r7
 80011dc:	2208      	movs	r2, #8
 80011de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011e0:	003b      	movs	r3, r7
 80011e2:	2201      	movs	r2, #1
 80011e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011e6:	003b      	movs	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ec:	003b      	movs	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80011f2:	003b      	movs	r3, r7
 80011f4:	2201      	movs	r2, #1
 80011f6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(dp_GPIO_Port, &GPIO_InitStruct);
 80011f8:	003b      	movs	r3, r7
 80011fa:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <MX_GPIO_Init+0x438>)
 80011fc:	0019      	movs	r1, r3
 80011fe:	0010      	movs	r0, r2
 8001200:	f000 fb44 	bl	800188c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D4_Pin;
 8001204:	003b      	movs	r3, r7
 8001206:	2210      	movs	r2, #16
 8001208:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800120a:	003b      	movs	r3, r7
 800120c:	2201      	movs	r2, #1
 800120e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001210:	003b      	movs	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001216:	003b      	movs	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800121c:	003b      	movs	r3, r7
 800121e:	2202      	movs	r2, #2
 8001220:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8001222:	003b      	movs	r3, r7
 8001224:	4a2c      	ldr	r2, [pc, #176]	; (80012d8 <MX_GPIO_Init+0x438>)
 8001226:	0019      	movs	r1, r3
 8001228:	0010      	movs	r0, r2
 800122a:	f000 fb2f 	bl	800188c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 800122e:	2100      	movs	r1, #0
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fa35 	bl	80006a0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	02db      	lsls	r3, r3, #11
 800123a:	0019      	movs	r1, r3
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fa2f 	bl	80006a0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	031b      	lsls	r3, r3, #12
 8001246:	0019      	movs	r1, r3
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fa29 	bl	80006a0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE9);
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_GPIO_Init+0x43c>)
 8001250:	0019      	movs	r1, r3
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff fa24 	bl	80006a0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(decrement_GPIO_Port, decrement_Pin, LL_GPIO_PULL_UP);
 8001258:	23a0      	movs	r3, #160	; 0xa0
 800125a:	05db      	lsls	r3, r3, #23
 800125c:	2201      	movs	r2, #1
 800125e:	2101      	movs	r1, #1
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff fb9b 	bl	800099c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(enter_GPIO_Port, enter_Pin, LL_GPIO_PULL_UP);
 8001266:	23a0      	movs	r3, #160	; 0xa0
 8001268:	05db      	lsls	r3, r3, #23
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff fb94 	bl	800099c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(increment_GPIO_Port, increment_Pin, LL_GPIO_PULL_UP);
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	2201      	movs	r2, #1
 800127a:	2104      	movs	r1, #4
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff fb8d 	bl	800099c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(pwr_GPIO_Port, pwr_Pin, LL_GPIO_PULL_UP);
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <MX_GPIO_Init+0x438>)
 8001288:	2201      	movs	r2, #1
 800128a:	0019      	movs	r1, r3
 800128c:	f7ff fb86 	bl	800099c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(decrement_GPIO_Port, decrement_Pin, LL_GPIO_MODE_INPUT);
 8001290:	23a0      	movs	r3, #160	; 0xa0
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	2200      	movs	r2, #0
 8001296:	2101      	movs	r1, #1
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff fb63 	bl	8000964 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(enter_GPIO_Port, enter_Pin, LL_GPIO_MODE_INPUT);
 800129e:	23a0      	movs	r3, #160	; 0xa0
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	2200      	movs	r2, #0
 80012a4:	2102      	movs	r1, #2
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7ff fb5c 	bl	8000964 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(increment_GPIO_Port, increment_Pin, LL_GPIO_MODE_INPUT);
 80012ac:	23a0      	movs	r3, #160	; 0xa0
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	2200      	movs	r2, #0
 80012b2:	2104      	movs	r1, #4
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff fb55 	bl	8000964 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(pwr_GPIO_Port, pwr_Pin, LL_GPIO_MODE_INPUT);
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_GPIO_Init+0x438>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	0019      	movs	r1, r3
 80012c4:	f7ff fb4e 	bl	8000964 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80012c8:	0021      	movs	r1, r4
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	e005      	b.n	80012e0 <MX_GPIO_Init+0x440>
 80012d4:	50000800 	.word	0x50000800
 80012d8:	50000400 	.word	0x50000400
 80012dc:	00040002 	.word	0x00040002
 80012e0:	2201      	movs	r2, #1
 80012e2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2200      	movs	r2, #0
 80012e8:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2202      	movs	r2, #2
 80012ee:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012f0:	000c      	movs	r4, r1
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	0018      	movs	r0, r3
 80012f6:	f000 f989 	bl	800160c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80012fa:	0021      	movs	r1, r4
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2202      	movs	r2, #2
 8001300:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2201      	movs	r2, #1
 8001306:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2200      	movs	r2, #0
 800130c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2202      	movs	r2, #2
 8001312:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001314:	000c      	movs	r4, r1
 8001316:	187b      	adds	r3, r7, r1
 8001318:	0018      	movs	r0, r3
 800131a:	f000 f977 	bl	800160c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800131e:	0021      	movs	r1, r4
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2204      	movs	r2, #4
 8001324:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2201      	movs	r2, #1
 800132a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2200      	movs	r2, #0
 8001330:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2202      	movs	r2, #2
 8001336:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001338:	000c      	movs	r4, r1
 800133a:	187b      	adds	r3, r7, r1
 800133c:	0018      	movs	r0, r3
 800133e:	f000 f965 	bl	800160c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8001342:	0021      	movs	r1, r4
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2201      	movs	r2, #1
 8001350:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2200      	movs	r2, #0
 8001356:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2203      	movs	r2, #3
 800135c:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800135e:	187b      	adds	r3, r7, r1
 8001360:	0018      	movs	r0, r3
 8001362:	f000 f953 	bl	800160c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
 8001366:	2100      	movs	r1, #0
 8001368:	2005      	movs	r0, #5
 800136a:	f7fe ff73 	bl	8000254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_1_IRQn);
 800136e:	2005      	movs	r0, #5
 8001370:	f7fe ff56 	bl	8000220 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_3_IRQn, 0);
 8001374:	2100      	movs	r1, #0
 8001376:	2006      	movs	r0, #6
 8001378:	f7fe ff6c 	bl	8000254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_3_IRQn);
 800137c:	2006      	movs	r0, #6
 800137e:	f7fe ff4f 	bl	8000220 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8001382:	2100      	movs	r1, #0
 8001384:	2007      	movs	r0, #7
 8001386:	f7fe ff65 	bl	8000254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 800138a:	2007      	movs	r0, #7
 800138c:	f7fe ff48 	bl	8000220 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b009      	add	sp, #36	; 0x24
 8001396:	bd90      	pop	{r4, r7, pc}

08001398 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <LL_EXTI_IsActiveFlag_0_31+0x24>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4013      	ands	r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	425a      	negs	r2, r3
 80013ae:	4153      	adcs	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	40010400 	.word	0x40010400

080013c0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <LL_EXTI_ClearFlag_0_31+0x18>)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	615a      	str	r2, [r3, #20]
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40010400 	.word	0x40010400

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff ffc4 	bl	8001398 <LL_EXTI_IsActiveFlag_0_31>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d002      	beq.n	800141a <EXTI0_1_IRQHandler+0x14>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ffd3 	bl	80013c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */

    /* USER CODE END LL_EXTI_LINE_0 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff ffbc 	bl	8001398 <LL_EXTI_IsActiveFlag_0_31>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d002      	beq.n	800142a <EXTI0_1_IRQHandler+0x24>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff ffcb 	bl	80013c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001434:	2004      	movs	r0, #4
 8001436:	f7ff ffaf 	bl	8001398 <LL_EXTI_IsActiveFlag_0_31>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d002      	beq.n	8001444 <EXTI2_3_IRQHandler+0x14>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800143e:	2004      	movs	r0, #4
 8001440:	f7ff ffbe 	bl	80013c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff ffa0 	bl	8001398 <LL_EXTI_IsActiveFlag_0_31>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d004      	beq.n	8001466 <EXTI4_15_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ffad 	bl	80013c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_9 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800147a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800147c:	f7ff fff6 	bl	800146c <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <LoopForever+0x6>)
    LDR R1, [R0]
 8001482:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001484:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <LoopForever+0xa>)
    CMP R1, R2
 8001488:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800148a:	d105      	bne.n	8001498 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800148e:	4912      	ldr	r1, [pc, #72]	; (80014d8 <LoopForever+0x12>)
    STR R1, [R0]
 8001490:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001494:	4912      	ldr	r1, [pc, #72]	; (80014e0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001496:	6001      	str	r1, [r0, #0]

08001498 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	4812      	ldr	r0, [pc, #72]	; (80014e4 <LoopForever+0x1e>)
  ldr r1, =_edata
 800149a:	4913      	ldr	r1, [pc, #76]	; (80014e8 <LoopForever+0x22>)
  ldr r2, =_sidata
 800149c:	4a13      	ldr	r2, [pc, #76]	; (80014ec <LoopForever+0x26>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80014b0:	4c10      	ldr	r4, [pc, #64]	; (80014f4 <LoopForever+0x2e>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014be:	f001 f817 	bl	80024f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff fa9f 	bl	8000a04 <main>

080014c6 <LoopForever>:

LoopForever:
    b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
   ldr   r0, =_estack
 80014c8:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80014cc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80014d0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80014d4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80014d8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80014dc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80014e0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80014ec:	0800258c 	.word	0x0800258c
  ldr r2, =_sbss
 80014f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80014f4:	20000020 	.word	0x20000020

080014f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC1_IRQHandler>
	...

080014fc <LL_EXTI_EnableIT_0_31>:
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001506:	6819      	ldr	r1, [r3, #0]
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <LL_EXTI_EnableIT_0_31+0x1c>)
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010400 	.word	0x40010400

0800151c <LL_EXTI_DisableIT_0_31>:
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <LL_EXTI_DisableIT_0_31+0x20>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	43d9      	mvns	r1, r3
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <LL_EXTI_DisableIT_0_31+0x20>)
 800152e:	400a      	ands	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	40010400 	.word	0x40010400

08001540 <LL_EXTI_EnableEvent_0_31>:
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <LL_EXTI_EnableEvent_0_31+0x1c>)
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <LL_EXTI_EnableEvent_0_31+0x1c>)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40010400 	.word	0x40010400

08001560 <LL_EXTI_DisableEvent_0_31>:
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LL_EXTI_DisableEvent_0_31+0x20>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	43d9      	mvns	r1, r3
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001572:	400a      	ands	r2, r1
 8001574:	605a      	str	r2, [r3, #4]
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40010400 	.word	0x40010400

08001584 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800158e:	6899      	ldr	r1, [r3, #8]
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	430a      	orrs	r2, r1
 8001596:	609a      	str	r2, [r3, #8]
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40010400 	.word	0x40010400

080015a4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	40010400 	.word	0x40010400

080015c8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80015d2:	68d9      	ldr	r1, [r3, #12]
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	430a      	orrs	r2, r1
 80015da:	60da      	str	r2, [r3, #12]
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40010400 	.word	0x40010400

080015e8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80015fa:	400a      	ands	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40010400 	.word	0x40010400

0800160c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001614:	230f      	movs	r3, #15
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d100      	bne.n	8001626 <LL_EXTI_Init+0x1a>
 8001624:	e068      	b.n	80016f8 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d100      	bne.n	8001630 <LL_EXTI_Init+0x24>
 800162e:	e06d      	b.n	800170c <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	795b      	ldrb	r3, [r3, #5]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d01b      	beq.n	8001670 <LL_EXTI_Init+0x64>
 8001638:	dc25      	bgt.n	8001686 <LL_EXTI_Init+0x7a>
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <LL_EXTI_Init+0x38>
 800163e:	2b01      	cmp	r3, #1
 8001640:	d00b      	beq.n	800165a <LL_EXTI_Init+0x4e>
 8001642:	e020      	b.n	8001686 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff ff89 	bl	8001560 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff ff52 	bl	80014fc <LL_EXTI_EnableIT_0_31>
          break;
 8001658:	e01a      	b.n	8001690 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0018      	movs	r0, r3
 8001660:	f7ff ff5c 	bl	800151c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff ff69 	bl	8001540 <LL_EXTI_EnableEvent_0_31>
          break;
 800166e:	e00f      	b.n	8001690 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff ff41 	bl	80014fc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff ff5e 	bl	8001540 <LL_EXTI_EnableEvent_0_31>
          break;
 8001684:	e004      	b.n	8001690 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8001686:	230f      	movs	r3, #15
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
          break;
 800168e:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	799b      	ldrb	r3, [r3, #6]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d039      	beq.n	800170c <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	799b      	ldrb	r3, [r3, #6]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d01b      	beq.n	80016d8 <LL_EXTI_Init+0xcc>
 80016a0:	dc25      	bgt.n	80016ee <LL_EXTI_Init+0xe2>
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d002      	beq.n	80016ac <LL_EXTI_Init+0xa0>
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d00b      	beq.n	80016c2 <LL_EXTI_Init+0xb6>
 80016aa:	e020      	b.n	80016ee <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ff99 	bl	80015e8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff ff62 	bl	8001584 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80016c0:	e024      	b.n	800170c <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7ff ff6c 	bl	80015a4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff ff79 	bl	80015c8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80016d6:	e019      	b.n	800170c <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ff51 	bl	8001584 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0018      	movs	r0, r3
 80016e8:	f7ff ff6e 	bl	80015c8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80016ec:	e00e      	b.n	800170c <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 80016ee:	230f      	movs	r3, #15
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
            break;
 80016f6:	e009      	b.n	800170c <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff0d 	bl	800151c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff ff2a 	bl	8001560 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 800170c:	230f      	movs	r3, #15
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	781b      	ldrb	r3, [r3, #0]
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b004      	add	sp, #16
 8001718:	bd80      	pop	{r7, pc}

0800171a <LL_GPIO_SetPinMode>:
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	435b      	muls	r3, r3
 800172e:	001a      	movs	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	189b      	adds	r3, r3, r2
 8001736:	43db      	mvns	r3, r3
 8001738:	400b      	ands	r3, r1
 800173a:	001a      	movs	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	435b      	muls	r3, r3
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	434b      	muls	r3, r1
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}

08001752 <LL_GPIO_SetPinOutputType>:
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	43d2      	mvns	r2, r2
 8001766:	401a      	ands	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	434b      	muls	r3, r1
 800176e:	431a      	orrs	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b004      	add	sp, #16
 800177a:	bd80      	pop	{r7, pc}

0800177c <LL_GPIO_SetPinSpeed>:
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	435b      	muls	r3, r3
 8001790:	001a      	movs	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	189b      	adds	r3, r3, r2
 8001798:	43db      	mvns	r3, r3
 800179a:	400b      	ands	r3, r1
 800179c:	001a      	movs	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	435b      	muls	r3, r3
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	434b      	muls	r3, r1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b004      	add	sp, #16
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LL_GPIO_SetPinPull>:
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68d9      	ldr	r1, [r3, #12]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	435b      	muls	r3, r3
 80017c8:	001a      	movs	r2, r3
 80017ca:	0013      	movs	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	189b      	adds	r3, r3, r2
 80017d0:	43db      	mvns	r3, r3
 80017d2:	400b      	ands	r3, r1
 80017d4:	001a      	movs	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	435b      	muls	r3, r3
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	434b      	muls	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	60da      	str	r2, [r3, #12]
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b004      	add	sp, #16
 80017ea:	bd80      	pop	{r7, pc}

080017ec <LL_GPIO_SetAFPin_0_7>:
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a19      	ldr	r1, [r3, #32]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	435b      	muls	r3, r3
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	4353      	muls	r3, r2
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	435a      	muls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	43db      	mvns	r3, r3
 8001810:	400b      	ands	r3, r1
 8001812:	001a      	movs	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	435b      	muls	r3, r3
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	434b      	muls	r3, r1
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	434b      	muls	r3, r1
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	434b      	muls	r3, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	621a      	str	r2, [r3, #32]
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}

08001832 <LL_GPIO_SetAFPin_8_15>:
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	0a12      	lsrs	r2, r2, #8
 800184a:	4353      	muls	r3, r2
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	0a12      	lsrs	r2, r2, #8
 8001850:	4353      	muls	r3, r2
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	0a12      	lsrs	r2, r2, #8
 8001856:	435a      	muls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	43db      	mvns	r3, r3
 8001860:	400b      	ands	r3, r1
 8001862:	001a      	movs	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	0a09      	lsrs	r1, r1, #8
 800186c:	434b      	muls	r3, r1
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	0a09      	lsrs	r1, r1, #8
 8001872:	434b      	muls	r3, r1
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	0a09      	lsrs	r1, r1, #8
 8001878:	434b      	muls	r3, r1
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	434b      	muls	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b004      	add	sp, #16
 800188a:	bd80      	pop	{r7, pc}

0800188c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800189e:	e048      	b.n	8001932 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4091      	lsls	r1, r2
 80018aa:	000a      	movs	r2, r1
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03a      	beq.n	800192c <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d003      	beq.n	80018c6 <LL_GPIO_Init+0x3a>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d10e      	bne.n	80018e4 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff ff54 	bl	800177c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff ff37 	bl	8001752 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff ff61 	bl	80017b4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d111      	bne.n	800191e <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2bff      	cmp	r3, #255	; 0xff
 80018fe:	d807      	bhi.n	8001910 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff ff6f 	bl	80017ec <LL_GPIO_SetAFPin_0_7>
 800190e:	e006      	b.n	800191e <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ff8a 	bl	8001832 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff fef7 	bl	800171a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	40da      	lsrs	r2, r3
 800193a:	1e13      	subs	r3, r2, #0
 800193c:	d1b0      	bne.n	80018a0 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}

08001948 <LL_RCC_HSI_IsReady>:
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <LL_RCC_HSI_IsReady+0x1c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2204      	movs	r2, #4
 8001952:	4013      	ands	r3, r2
 8001954:	2b04      	cmp	r3, #4
 8001956:	d101      	bne.n	800195c <LL_RCC_HSI_IsReady+0x14>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_RCC_HSI_IsReady+0x16>
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000

08001968 <LL_RCC_LSE_IsReady>:
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <LL_RCC_LSE_IsReady+0x24>)
 800196e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	401a      	ands	r2, r3
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	429a      	cmp	r2, r3
 800197c:	d101      	bne.n	8001982 <LL_RCC_LSE_IsReady+0x1a>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_RCC_LSE_IsReady+0x1c>
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40021000 	.word	0x40021000

08001990 <LL_RCC_MSI_GetRange>:
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <LL_RCC_MSI_GetRange+0x14>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	23e0      	movs	r3, #224	; 0xe0
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	4013      	ands	r3, r2
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000

080019a8 <LL_RCC_GetSysClkSource>:
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <LL_RCC_GetSysClkSource+0x14>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	220c      	movs	r2, #12
 80019b2:	4013      	ands	r3, r2
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000

080019c0 <LL_RCC_GetAHBPrescaler>:
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <LL_RCC_GetAHBPrescaler+0x14>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	22f0      	movs	r2, #240	; 0xf0
 80019ca:	4013      	ands	r3, r2
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	40021000 	.word	0x40021000

080019d8 <LL_RCC_GetAPB1Prescaler>:
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	23e0      	movs	r3, #224	; 0xe0
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4013      	ands	r3, r2
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000

080019f0 <LL_RCC_GetUSARTClockSource>:
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <LL_RCC_GetUSARTClockSource+0x20>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	401a      	ands	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	4313      	orrs	r3, r2
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40021000 	.word	0x40021000

08001a14 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <LL_RCC_PLL_GetMainSource+0x14>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	4013      	ands	r3, r2
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000

08001a2c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	23f0      	movs	r3, #240	; 0xf0
 8001a36:	039b      	lsls	r3, r3, #14
 8001a38:	4013      	ands	r3, r2
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <LL_RCC_PLL_GetDivider+0x14>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	23c0      	movs	r3, #192	; 0xc0
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	4013      	ands	r3, r2
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2210      	movs	r2, #16
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d101      	bne.n	8001a70 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000

08001a7c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d13c      	bne.n	8001b08 <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff ffad 	bl	80019f0 <LL_RCC_GetUSARTClockSource>
 8001a96:	0003      	movs	r3, r0
 8001a98:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <LL_RCC_GetUSARTClockFreq+0x98>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01c      	beq.n	8001ad8 <LL_RCC_GetUSARTClockFreq+0x5c>
 8001a9e:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <LL_RCC_GetUSARTClockFreq+0x98>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d821      	bhi.n	8001ae8 <LL_RCC_GetUSARTClockFreq+0x6c>
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <LL_RCC_GetUSARTClockFreq+0x9c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d003      	beq.n	8001ab2 <LL_RCC_GetUSARTClockFreq+0x36>
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d005      	beq.n	8001abc <LL_RCC_GetUSARTClockFreq+0x40>
 8001ab0:	e01a      	b.n	8001ae8 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ab2:	f000 f839 	bl	8001b28 <RCC_GetSystemClockFreq>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	60fb      	str	r3, [r7, #12]
        break;
 8001aba:	e025      	b.n	8001b08 <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001abc:	f7ff ff44 	bl	8001948 <LL_RCC_HSI_IsReady>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d01e      	beq.n	8001b02 <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001ac4:	f7ff ffca 	bl	8001a5c <LL_RCC_IsActiveFlag_HSIDIV>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d002      	beq.n	8001ad2 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <LL_RCC_GetUSARTClockFreq+0xa4>)
 8001ace:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001ad0:	e017      	b.n	8001b02 <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <LL_RCC_GetUSARTClockFreq+0xa8>)
 8001ad4:	60fb      	str	r3, [r7, #12]
        break;
 8001ad6:	e014      	b.n	8001b02 <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001ad8:	f7ff ff46 	bl	8001968 <LL_RCC_LSE_IsReady>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d012      	beq.n	8001b06 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ae6:	e00e      	b.n	8001b06 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ae8:	f000 f81e 	bl	8001b28 <RCC_GetSystemClockFreq>
 8001aec:	0003      	movs	r3, r0
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 f85e 	bl	8001bb0 <RCC_GetHCLKClockFreq>
 8001af4:	0003      	movs	r3, r0
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f870 	bl	8001bdc <RCC_GetPCLK1ClockFreq>
 8001afc:	0003      	movs	r3, r0
 8001afe:	60fb      	str	r3, [r7, #12]
        break;
 8001b00:	e002      	b.n	8001b08 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	e000      	b.n	8001b08 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8001b06:	46c0      	nop			; (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001b08:	68fb      	ldr	r3, [r7, #12]
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	000c000c 	.word	0x000c000c
 8001b18:	000c0004 	.word	0x000c0004
 8001b1c:	000c0008 	.word	0x000c0008
 8001b20:	003d0900 	.word	0x003d0900
 8001b24:	00f42400 	.word	0x00f42400

08001b28 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001b2e:	f7ff ff3b 	bl	80019a8 <LL_RCC_GetSysClkSource>
 8001b32:	0003      	movs	r3, r0
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	d020      	beq.n	8001b7a <RCC_GetSystemClockFreq+0x52>
 8001b38:	d824      	bhi.n	8001b84 <RCC_GetSystemClockFreq+0x5c>
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d01a      	beq.n	8001b74 <RCC_GetSystemClockFreq+0x4c>
 8001b3e:	d821      	bhi.n	8001b84 <RCC_GetSystemClockFreq+0x5c>
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <RCC_GetSystemClockFreq+0x22>
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d00b      	beq.n	8001b60 <RCC_GetSystemClockFreq+0x38>
 8001b48:	e01c      	b.n	8001b84 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001b4a:	f7ff ff21 	bl	8001990 <LL_RCC_MSI_GetRange>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	0b5b      	lsrs	r3, r3, #13
 8001b52:	3301      	adds	r3, #1
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	607b      	str	r3, [r7, #4]
      break;
 8001b5e:	e01c      	b.n	8001b9a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001b60:	f7ff ff7c 	bl	8001a5c <LL_RCC_IsActiveFlag_HSIDIV>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d002      	beq.n	8001b6e <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <RCC_GetSystemClockFreq+0x7c>)
 8001b6a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001b6c:	e015      	b.n	8001b9a <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <RCC_GetSystemClockFreq+0x80>)
 8001b70:	607b      	str	r3, [r7, #4]
      break;
 8001b72:	e012      	b.n	8001b9a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <RCC_GetSystemClockFreq+0x84>)
 8001b76:	607b      	str	r3, [r7, #4]
      break;
 8001b78:	e00f      	b.n	8001b9a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001b7a:	f000 f843 	bl	8001c04 <RCC_PLL_GetFreqDomain_SYS>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	607b      	str	r3, [r7, #4]
      break;
 8001b82:	e00a      	b.n	8001b9a <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001b84:	f7ff ff04 	bl	8001990 <LL_RCC_MSI_GetRange>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	0212      	lsls	r2, r2, #8
 8001b92:	409a      	lsls	r2, r3
 8001b94:	0013      	movs	r3, r2
 8001b96:	607b      	str	r3, [r7, #4]
      break;
 8001b98:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	003d0900 	.word	0x003d0900
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001bb8:	f7ff ff02 	bl	80019c0 <LL_RCC_GetAHBPrescaler>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <RCC_GetHCLKClockFreq+0x28>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	001a      	movs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	40d3      	lsrs	r3, r2
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b002      	add	sp, #8
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	08002560 	.word	0x08002560

08001bdc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001be4:	f7ff fef8 	bl	80019d8 <LL_RCC_GetAPB1Prescaler>
 8001be8:	0003      	movs	r3, r0
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <RCC_GetPCLK1ClockFreq+0x24>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	40d3      	lsrs	r3, r2
}
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	08002570 	.word	0x08002570

08001c04 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001c0a:	f7ff ff03 	bl	8001a14 <LL_RCC_PLL_GetMainSource>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001c18:	f7ff ff20 	bl	8001a5c <LL_RCC_IsActiveFlag_HSIDIV>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d002      	beq.n	8001c26 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001c20:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001c22:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001c24:	e005      	b.n	8001c32 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001c28:	607b      	str	r3, [r7, #4]
      break;
 8001c2a:	e002      	b.n	8001c32 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001c2e:	607b      	str	r3, [r7, #4]
      break;
 8001c30:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001c32:	f7ff fefb 	bl	8001a2c <LL_RCC_PLL_GetMultiplicator>
 8001c36:	0003      	movs	r3, r0
 8001c38:	0c9b      	lsrs	r3, r3, #18
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	001a      	movs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4353      	muls	r3, r2
 8001c44:	001c      	movs	r4, r3
 8001c46:	f7ff fefd 	bl	8001a44 <LL_RCC_PLL_GetDivider>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	0d9b      	lsrs	r3, r3, #22
 8001c4e:	3301      	adds	r3, #1
 8001c50:	0019      	movs	r1, r3
 8001c52:	0020      	movs	r0, r4
 8001c54:	f7fe fa58 	bl	8000108 <__udivsi3>
 8001c58:	0003      	movs	r3, r0
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b003      	add	sp, #12
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	003d0900 	.word	0x003d0900
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	007a1200 	.word	0x007a1200
 8001c70:	08002578 	.word	0x08002578

08001c74 <LL_RTC_SetHourFormat>:
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	4393      	bics	r3, r2
 8001c86:	001a      	movs	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <LL_RTC_EnableInitMode>:
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4252      	negs	r2, r2
 8001ca6:	60da      	str	r2, [r3, #12]
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <LL_RTC_DisableInitMode>:
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2281      	movs	r2, #129	; 0x81
 8001cbc:	4252      	negs	r2, r2
 8001cbe:	60da      	str	r2, [r3, #12]
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <LL_RTC_SetAsynchPrescaler>:
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <LL_RTC_SetAsynchPrescaler+0x24>)
 8001cd8:	401a      	ands	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	611a      	str	r2, [r3, #16]
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	ff80ffff 	.word	0xff80ffff

08001cf0 <LL_RTC_SetSynchPrescaler>:
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	0bdb      	lsrs	r3, r3, #15
 8001d00:	03da      	lsls	r2, r3, #15
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <LL_RTC_EnableWriteProtection>:
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	22ff      	movs	r2, #255	; 0xff
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <LL_RTC_DisableWriteProtection>:
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	22ca      	movs	r2, #202	; 0xca
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2253      	movs	r2, #83	; 0x53
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2240      	movs	r2, #64	; 0x40
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	d101      	bne.n	8001d5c <LL_RTC_IsActiveFlag_INIT+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_RTC_IsActiveFlag_INIT+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	025b      	lsls	r3, r3, #9
 8001d74:	4013      	ands	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001d78:	4694      	mov	ip, r2
 8001d7a:	4463      	add	r3, ip
 8001d7c:	425a      	negs	r2, r3
 8001d7e:	4153      	adcs	r3, r2
 8001d80:	b2db      	uxtb	r3, r3
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	e000e010 	.word	0xe000e010
 8001d8c:	ffff0000 	.word	0xffff0000

08001d90 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001d9a:	240f      	movs	r4, #15
 8001d9c:	193b      	adds	r3, r7, r4
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff ffbf 	bl	8001d28 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 f82a 	bl	8001e06 <LL_RTC_EnterInitMode>
 8001db2:	0003      	movs	r3, r0
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d01b      	beq.n	8001df0 <LL_RTC_Init+0x60>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff ff57 	bl	8001c74 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff ff8e 	bl	8001cf0 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0011      	movs	r1, r2
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff ff73 	bl	8001cc8 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff ff63 	bl	8001cb0 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8001dea:	193b      	adds	r3, r7, r4
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff ff8d 	bl	8001d12 <LL_RTC_EnableWriteProtection>

  return status;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b005      	add	sp, #20
 8001e04:	bd90      	pop	{r4, r7, pc}

08001e06 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001e0e:	23fa      	movs	r3, #250	; 0xfa
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001e14:	2317      	movs	r3, #23
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff ff8e 	bl	8001d44 <LL_RTC_IsActiveFlag_INIT>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d129      	bne.n	8001e80 <LL_RTC_EnterInitMode+0x7a>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7ff ff32 	bl	8001c98 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7ff ff84 	bl	8001d44 <LL_RTC_IsActiveFlag_INIT>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	613b      	str	r3, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8001e40:	e018      	b.n	8001e74 <LL_RTC_EnterInitMode+0x6e>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001e42:	f7ff ff91 	bl	8001d68 <LL_SYSTICK_IsActiveCounterFlag>
 8001e46:	0003      	movs	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d102      	bne.n	8001e52 <LL_RTC_EnterInitMode+0x4c>
      {
        timeout --;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff ff75 	bl	8001d44 <LL_RTC_IsActiveFlag_INIT>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	613b      	str	r3, [r7, #16]
      if (timeout == 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2017      	movs	r0, #23
 8001e62:	183a      	adds	r2, r7, r0
 8001e64:	1839      	adds	r1, r7, r0
 8001e66:	7809      	ldrb	r1, [r1, #0]
 8001e68:	7011      	strb	r1, [r2, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <LL_RTC_EnterInitMode+0x6e>
      {
        status = ERROR;
 8001e6e:	183b      	adds	r3, r7, r0
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    while ((timeout != 0U) && (tmp != 1U))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <LL_RTC_EnterInitMode+0x7a>
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d1e0      	bne.n	8001e42 <LL_RTC_EnterInitMode+0x3c>
      }
    }
  }
  return status;
 8001e80:	2317      	movs	r3, #23
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b006      	add	sp, #24
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <LL_TIM_SetPrescaler>:
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <LL_TIM_SetAutoReload>:
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <LL_TIM_OC_SetCompareCH1>:
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <LL_TIM_OC_SetCompareCH2>:
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b002      	add	sp, #8
 8001eec:	bd80      	pop	{r7, pc}

08001eee <LL_TIM_OC_SetCompareCH3>:
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b002      	add	sp, #8
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <LL_TIM_OC_SetCompareCH4>:
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b002      	add	sp, #8
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	615a      	str	r2, [r3, #20]
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b002      	add	sp, #8
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d003      	beq.n	8001f5e <LL_TIM_Init+0x22>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <LL_TIM_Init+0x88>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d107      	bne.n	8001f6e <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2270      	movs	r2, #112	; 0x70
 8001f62:	4393      	bics	r3, r2
 8001f64:	001a      	movs	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	05db      	lsls	r3, r3, #23
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d003      	beq.n	8001f80 <LL_TIM_Init+0x44>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <LL_TIM_Init+0x88>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d106      	bne.n	8001f8e <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <LL_TIM_Init+0x8c>)
 8001f84:	401a      	ands	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff ff82 	bl	8001ea6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0011      	movs	r1, r2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7ff ff6e 	bl	8001e8e <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff ffb2 	bl	8001f1e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	fffffcff 	.word	0xfffffcff

08001fcc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001fd8:	2317      	movs	r3, #23
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	015b      	lsls	r3, r3, #5
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d036      	beq.n	8002058 <LL_TIM_OC_Init+0x8c>
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d83c      	bhi.n	800206e <LL_TIM_OC_Init+0xa2>
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d021      	beq.n	8002042 <LL_TIM_OC_Init+0x76>
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	429a      	cmp	r2, r3
 8002006:	d832      	bhi.n	800206e <LL_TIM_OC_Init+0xa2>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d003      	beq.n	8002016 <LL_TIM_OC_Init+0x4a>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b10      	cmp	r3, #16
 8002012:	d00b      	beq.n	800202c <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002014:	e02b      	b.n	800206e <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002016:	2317      	movs	r3, #23
 8002018:	18fc      	adds	r4, r7, r3
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f82c 	bl	800207e <OC1Config>
 8002026:	0003      	movs	r3, r0
 8002028:	7023      	strb	r3, [r4, #0]
      break;
 800202a:	e021      	b.n	8002070 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800202c:	2317      	movs	r3, #23
 800202e:	18fc      	adds	r4, r7, r3
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	0011      	movs	r1, r2
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f868 	bl	800210c <OC2Config>
 800203c:	0003      	movs	r3, r0
 800203e:	7023      	strb	r3, [r4, #0]
      break;
 8002040:	e016      	b.n	8002070 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002042:	2317      	movs	r3, #23
 8002044:	18fc      	adds	r4, r7, r3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	0011      	movs	r1, r2
 800204c:	0018      	movs	r0, r3
 800204e:	f000 f8a9 	bl	80021a4 <OC3Config>
 8002052:	0003      	movs	r3, r0
 8002054:	7023      	strb	r3, [r4, #0]
      break;
 8002056:	e00b      	b.n	8002070 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002058:	2317      	movs	r3, #23
 800205a:	18fc      	adds	r4, r7, r3
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	0011      	movs	r1, r2
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f8e8 	bl	8002238 <OC4Config>
 8002068:	0003      	movs	r3, r0
 800206a:	7023      	strb	r3, [r4, #0]
      break;
 800206c:	e000      	b.n	8002070 <LL_TIM_OC_Init+0xa4>
      break;
 800206e:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002070:	2317      	movs	r3, #23
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	781b      	ldrb	r3, [r3, #0]
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b007      	add	sp, #28
 800207c:	bd90      	pop	{r4, r7, pc}

0800207e <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	2201      	movs	r2, #1
 800208e:	4393      	bics	r3, r2
 8002090:	001a      	movs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2203      	movs	r2, #3
 80020ac:	4393      	bics	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2270      	movs	r2, #112	; 0x70
 80020b4:	4393      	bics	r3, r2
 80020b6:	001a      	movs	r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4393      	bics	r3, r2
 80020c6:	001a      	movs	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4393      	bics	r3, r2
 80020d6:	001a      	movs	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff fee2 	bl	8001ebe <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002100:	2300      	movs	r3, #0
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b006      	add	sp, #24
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	2210      	movs	r2, #16
 800211c:	4393      	bics	r3, r2
 800211e:	001a      	movs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <OC2Config+0x90>)
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <OC2Config+0x94>)
 8002142:	401a      	ands	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2220      	movs	r2, #32
 8002152:	4393      	bics	r3, r2
 8002154:	001a      	movs	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2210      	movs	r2, #16
 8002164:	4393      	bics	r3, r2
 8002166:	001a      	movs	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0011      	movs	r1, r2
 8002186:	0018      	movs	r0, r3
 8002188:	f7ff fea5 	bl	8001ed6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002192:	2300      	movs	r3, #0
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b006      	add	sp, #24
 800219a:	bd80      	pop	{r7, pc}
 800219c:	fffffcff 	.word	0xfffffcff
 80021a0:	ffff8fff 	.word	0xffff8fff

080021a4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <OC3Config+0x8c>)
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2203      	movs	r2, #3
 80021d0:	4393      	bics	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2270      	movs	r2, #112	; 0x70
 80021d8:	4393      	bics	r3, r2
 80021da:	001a      	movs	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <OC3Config+0x90>)
 80021e8:	401a      	ands	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <OC3Config+0x8c>)
 80021f8:	401a      	ands	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0011      	movs	r1, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff fe68 	bl	8001eee <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002224:	2300      	movs	r3, #0
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b006      	add	sp, #24
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	fffffeff 	.word	0xfffffeff
 8002234:	fffffdff 	.word	0xfffffdff

08002238 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <OC4Config+0x8c>)
 8002248:	401a      	ands	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <OC4Config+0x90>)
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <OC4Config+0x94>)
 800226c:	401a      	ands	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <OC4Config+0x98>)
 800227c:	401a      	ands	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	031b      	lsls	r3, r3, #12
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <OC4Config+0x8c>)
 800228c:	401a      	ands	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	031b      	lsls	r3, r3, #12
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0011      	movs	r1, r2
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fe2a 	bl	8001f06 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	ffffefff 	.word	0xffffefff
 80022c8:	fffffcff 	.word	0xfffffcff
 80022cc:	ffff8fff 	.word	0xffff8fff
 80022d0:	ffffdfff 	.word	0xffffdfff

080022d4 <LL_USART_IsEnabled>:
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <LL_USART_IsEnabled+0x18>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <LL_USART_IsEnabled+0x1a>
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b002      	add	sp, #8
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <LL_USART_SetStopBitsLength>:
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <LL_USART_SetStopBitsLength+0x24>)
 8002308:	401a      	ands	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	605a      	str	r2, [r3, #4]
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	ffffcfff 	.word	0xffffcfff

08002320 <LL_USART_SetHWFlowCtrl>:
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <LL_USART_SetHWFlowCtrl+0x24>)
 8002330:	401a      	ands	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	fffffcff 	.word	0xfffffcff

08002348 <LL_USART_SetBaudRate>:
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	429a      	cmp	r2, r3
 800235e:	d11c      	bne.n	800239a <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	005a      	lsls	r2, r3, #1
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	18d3      	adds	r3, r2, r3
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	0018      	movs	r0, r3
 800236e:	f7fd fecb 	bl	8000108 <__udivsi3>
 8002372:	0003      	movs	r3, r0
 8002374:	b29b      	uxth	r3, r3
 8002376:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <LL_USART_SetBaudRate+0x74>)
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	b29b      	uxth	r3, r3
 8002386:	001a      	movs	r2, r3
 8002388:	2307      	movs	r3, #7
 800238a:	4013      	ands	r3, r2
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	e00c      	b.n	80023b4 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	085a      	lsrs	r2, r3, #1
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	18d3      	adds	r3, r2, r3
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7fd feaf 	bl	8000108 <__udivsi3>
 80023aa:	0003      	movs	r3, r0
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	001a      	movs	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	60da      	str	r2, [r3, #12]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b006      	add	sp, #24
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	0000fff0 	.word	0x0000fff0

080023c0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80023ca:	230f      	movs	r3, #15
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff ff7b 	bl	80022d4 <LL_USART_IsEnabled>
 80023de:	1e03      	subs	r3, r0, #0
 80023e0:	d13b      	bne.n	800245a <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a20      	ldr	r2, [pc, #128]	; (8002468 <LL_USART_Init+0xa8>)
 80023e8:	401a      	ands	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6859      	ldr	r1, [r3, #4]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4319      	orrs	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	4319      	orrs	r1, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	430b      	orrs	r3, r1
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0011      	movs	r1, r2
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff ff72 	bl	80022f8 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	0011      	movs	r1, r2
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff ff7f 	bl	8002320 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a11      	ldr	r2, [pc, #68]	; (800246c <LL_USART_Init+0xac>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d104      	bne.n	8002434 <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800242a:	200c      	movs	r0, #12
 800242c:	f7ff fb26 	bl	8001a7c <LL_RCC_GetUSARTClockFreq>
 8002430:	0003      	movs	r3, r0
 8002432:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00f      	beq.n	800245a <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 8002442:	230f      	movs	r3, #15
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff77 	bl	8002348 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800245a:	230f      	movs	r3, #15
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	781b      	ldrb	r3, [r3, #0]
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b004      	add	sp, #16
 8002466:	bd80      	pop	{r7, pc}
 8002468:	efff69f3 	.word	0xefff69f3
 800246c:	40004400 	.word	0x40004400

08002470 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800247a:	6839      	ldr	r1, [r7, #0]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fd fe43 	bl	8000108 <__udivsi3>
 8002482:	0003      	movs	r3, r0
 8002484:	001a      	movs	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <LL_InitTick+0x30>)
 8002488:	3a01      	subs	r2, #1
 800248a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <LL_InitTick+0x30>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <LL_InitTick+0x30>)
 8002494:	2205      	movs	r2, #5
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80024ac:	23fa      	movs	r3, #250	; 0xfa
 80024ae:	009a      	lsls	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff ffdb 	bl	8002470 <LL_InitTick>
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <LL_SetSystemCoreClock+0x18>)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	20000000 	.word	0x20000000

080024e0 <memset>:
 80024e0:	0003      	movs	r3, r0
 80024e2:	1882      	adds	r2, r0, r2
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d100      	bne.n	80024ea <memset+0xa>
 80024e8:	4770      	bx	lr
 80024ea:	7019      	strb	r1, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	e7f9      	b.n	80024e4 <memset+0x4>

080024f0 <__libc_init_array>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	2600      	movs	r6, #0
 80024f4:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <__libc_init_array+0x38>)
 80024f6:	4d0d      	ldr	r5, [pc, #52]	; (800252c <__libc_init_array+0x3c>)
 80024f8:	1b64      	subs	r4, r4, r5
 80024fa:	10a4      	asrs	r4, r4, #2
 80024fc:	42a6      	cmp	r6, r4
 80024fe:	d109      	bne.n	8002514 <__libc_init_array+0x24>
 8002500:	2600      	movs	r6, #0
 8002502:	f000 f819 	bl	8002538 <_init>
 8002506:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <__libc_init_array+0x40>)
 8002508:	4d0a      	ldr	r5, [pc, #40]	; (8002534 <__libc_init_array+0x44>)
 800250a:	1b64      	subs	r4, r4, r5
 800250c:	10a4      	asrs	r4, r4, #2
 800250e:	42a6      	cmp	r6, r4
 8002510:	d105      	bne.n	800251e <__libc_init_array+0x2e>
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	00b3      	lsls	r3, r6, #2
 8002516:	58eb      	ldr	r3, [r5, r3]
 8002518:	4798      	blx	r3
 800251a:	3601      	adds	r6, #1
 800251c:	e7ee      	b.n	80024fc <__libc_init_array+0xc>
 800251e:	00b3      	lsls	r3, r6, #2
 8002520:	58eb      	ldr	r3, [r5, r3]
 8002522:	4798      	blx	r3
 8002524:	3601      	adds	r6, #1
 8002526:	e7f2      	b.n	800250e <__libc_init_array+0x1e>
 8002528:	08002584 	.word	0x08002584
 800252c:	08002584 	.word	0x08002584
 8002530:	08002588 	.word	0x08002588
 8002534:	08002584 	.word	0x08002584

08002538 <_init>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr

08002544 <_fini>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr
