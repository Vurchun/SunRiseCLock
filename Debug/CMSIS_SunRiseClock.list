
CMSIS_SunRiseClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002748  08002748  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08002748  08002748  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002748  08002748  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08002750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000104  08002854  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000014c  08002854  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015f1  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ff  00000000  00000000  00021760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00021b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f3  00000000  00000000  00021c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008ffe  00000000  00000000  00021d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001640  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00030331  00000000  00000000  0002c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000488  00000000  00000000  0005c6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000104 	.word	0x20000104
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002580 	.word	0x08002580

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000108 	.word	0x20000108
 8000104:	08002580 	.word	0x08002580

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b7f      	cmp	r3, #127	; 0x7f
 8000406:	d809      	bhi.n	800041c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	001a      	movs	r2, r3
 800040e:	231f      	movs	r3, #31
 8000410:	401a      	ands	r2, r3
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <__NVIC_EnableIRQ+0x30>)
 8000414:	2101      	movs	r1, #1
 8000416:	4091      	lsls	r1, r2
 8000418:	000a      	movs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
  }
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}
 8000424:	e000e100 	.word	0xe000e100

08000428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000436:	1dfb      	adds	r3, r7, #7
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b7f      	cmp	r3, #127	; 0x7f
 800043c:	d828      	bhi.n	8000490 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800043e:	4a2f      	ldr	r2, [pc, #188]	; (80004fc <__NVIC_SetPriority+0xd4>)
 8000440:	1dfb      	adds	r3, r7, #7
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	b25b      	sxtb	r3, r3
 8000446:	089b      	lsrs	r3, r3, #2
 8000448:	33c0      	adds	r3, #192	; 0xc0
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	589b      	ldr	r3, [r3, r2]
 800044e:	1dfa      	adds	r2, r7, #7
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	0011      	movs	r1, r2
 8000454:	2203      	movs	r2, #3
 8000456:	400a      	ands	r2, r1
 8000458:	00d2      	lsls	r2, r2, #3
 800045a:	21ff      	movs	r1, #255	; 0xff
 800045c:	4091      	lsls	r1, r2
 800045e:	000a      	movs	r2, r1
 8000460:	43d2      	mvns	r2, r2
 8000462:	401a      	ands	r2, r3
 8000464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	019b      	lsls	r3, r3, #6
 800046a:	22ff      	movs	r2, #255	; 0xff
 800046c:	401a      	ands	r2, r3
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	0018      	movs	r0, r3
 8000474:	2303      	movs	r3, #3
 8000476:	4003      	ands	r3, r0
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800047c:	481f      	ldr	r0, [pc, #124]	; (80004fc <__NVIC_SetPriority+0xd4>)
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	b25b      	sxtb	r3, r3
 8000484:	089b      	lsrs	r3, r3, #2
 8000486:	430a      	orrs	r2, r1
 8000488:	33c0      	adds	r3, #192	; 0xc0
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800048e:	e031      	b.n	80004f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <__NVIC_SetPriority+0xd8>)
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	0019      	movs	r1, r3
 8000498:	230f      	movs	r3, #15
 800049a:	400b      	ands	r3, r1
 800049c:	3b08      	subs	r3, #8
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	3306      	adds	r3, #6
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	18d3      	adds	r3, r2, r3
 80004a6:	3304      	adds	r3, #4
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1dfa      	adds	r2, r7, #7
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	0011      	movs	r1, r2
 80004b0:	2203      	movs	r2, #3
 80004b2:	400a      	ands	r2, r1
 80004b4:	00d2      	lsls	r2, r2, #3
 80004b6:	21ff      	movs	r1, #255	; 0xff
 80004b8:	4091      	lsls	r1, r2
 80004ba:	000a      	movs	r2, r1
 80004bc:	43d2      	mvns	r2, r2
 80004be:	401a      	ands	r2, r3
 80004c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	019b      	lsls	r3, r3, #6
 80004c6:	22ff      	movs	r2, #255	; 0xff
 80004c8:	401a      	ands	r2, r3
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	0018      	movs	r0, r3
 80004d0:	2303      	movs	r3, #3
 80004d2:	4003      	ands	r3, r0
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <__NVIC_SetPriority+0xd8>)
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	001c      	movs	r4, r3
 80004e0:	230f      	movs	r3, #15
 80004e2:	4023      	ands	r3, r4
 80004e4:	3b08      	subs	r3, #8
 80004e6:	089b      	lsrs	r3, r3, #2
 80004e8:	430a      	orrs	r2, r1
 80004ea:	3306      	adds	r3, #6
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	18c3      	adds	r3, r0, r3
 80004f0:	3304      	adds	r3, #4
 80004f2:	601a      	str	r2, [r3, #0]
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b003      	add	sp, #12
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	e000e100 	.word	0xe000e100
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <main>:
void StartMusic(uint16_t melody);
void sound(uint16_t freq, uint16_t time_ms);
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

	uint8_t vmenu = 0; // Змінна, що зберігає дію по вертикалі 1 - вхід в меню, -1 - вихід з меню
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	uint8_t hmenu = 0; // Змінна, що зберігає дію по горизонталі 1 - вправо, -1 - вліво
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
	char *tmpValue;
	CMSIS_FullInit(); // 1ms
 8000516:	f000 f8d5 	bl	80006c4 <CMSIS_FullInit>

	SystemClock_Config();
 800051a:	f000 f90b 	bl	8000734 <SystemClock_Config>

	GPIO_Init();
 800051e:	f000 fbab 	bl	8000c78 <GPIO_Init>
	RTC_Init();
 8000522:	f000 f9b3 	bl	800088c <RTC_Init>
	TIM2_Init();
 8000526:	f000 fa21 	bl	800096c <TIM2_Init>
	TIM21_Init();
 800052a:	f000 faf3 	bl	8000b14 <TIM21_Init>

	writeCHARSEG(' ', ' ');
 800052e:	2120      	movs	r1, #32
 8000530:	2020      	movs	r0, #32
 8000532:	f000 fe67 	bl	8001204 <writeCHARSEG>
	pinEN_OFF();
 8000536:	4b44      	ldr	r3, [pc, #272]	; (8000648 <main+0x144>)
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0612      	lsls	r2, r2, #24
 800053c:	619a      	str	r2, [r3, #24]
	tmpValue = setActualMenu(0, 0);
 800053e:	2100      	movs	r1, #0
 8000540:	2000      	movs	r0, #0
 8000542:	f001 fa29 	bl	8001998 <setActualMenu>
 8000546:	0003      	movs	r3, r0
 8000548:	603b      	str	r3, [r7, #0]

	while (1)
	{
		if (flagDecrementButton)
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <main+0x148>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d006      	beq.n	8000560 <main+0x5c>
		{
			hmenu = 1;
 8000552:	1dbb      	adds	r3, r7, #6
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
			flagDecrementButton = false; // Действие обработано - сбрасываем флаг
 8000558:	4b3c      	ldr	r3, [pc, #240]	; (800064c <main+0x148>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	e006      	b.n	800056e <main+0x6a>
		}
		else if(flagDecrementButtonLong){
 8000560:	4b3b      	ldr	r3, [pc, #236]	; (8000650 <main+0x14c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d002      	beq.n	800056e <main+0x6a>
			flagDecrementButtonLong = false; // Действие обработано - сбрасываем флаг
 8000568:	4b39      	ldr	r3, [pc, #228]	; (8000650 <main+0x14c>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		}

		if (flagIncrementButton)
 800056e:	4b39      	ldr	r3, [pc, #228]	; (8000654 <main+0x150>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d006      	beq.n	8000584 <main+0x80>
		{
			hmenu = -1;
 8000576:	1dbb      	adds	r3, r7, #6
 8000578:	22ff      	movs	r2, #255	; 0xff
 800057a:	701a      	strb	r2, [r3, #0]
			flagIncrementButton = false; // Действие обработано - сбрасываем флаг
 800057c:	4b35      	ldr	r3, [pc, #212]	; (8000654 <main+0x150>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e006      	b.n	8000592 <main+0x8e>
		}
		else if(flagIncrementButtonLong){
 8000584:	4b34      	ldr	r3, [pc, #208]	; (8000658 <main+0x154>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <main+0x8e>

			flagIncrementButtonLong = false; // Действие обработано - сбрасываем флаг
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <main+0x154>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
		}

		if (flagEnterButton)
 8000592:	4b32      	ldr	r3, [pc, #200]	; (800065c <main+0x158>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <main+0xa4>
		{							 // Кнопка нажата
			vmenu = 1;				 // По нажатию кнопки - переходим на уровень вниз
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
			flagEnterButton = false; // Действие обработано - сбрасываем флаг
 80005a0:	4b2e      	ldr	r3, [pc, #184]	; (800065c <main+0x158>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e009      	b.n	80005bc <main+0xb8>
		}
		else if (flagEnterButtonLong)
 80005a8:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <main+0x15c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d005      	beq.n	80005bc <main+0xb8>
		{
			vmenu = -1;
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	22ff      	movs	r2, #255	; 0xff
 80005b4:	701a      	strb	r2, [r3, #0]
			flagEnterButtonLong = false; // Действие обработано - сбрасываем флаг
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <main+0x15c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
		}
		if (vmenu != 0 || hmenu != 0){
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d103      	bne.n	80005cc <main+0xc8>
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d009      	beq.n	80005e0 <main+0xdc>
			tmpValue = setActualMenu(vmenu, hmenu); // Если было действие - реагируем на него
 80005cc:	1dbb      	adds	r3, r7, #6
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f001 f9de 	bl	8001998 <setActualMenu>
 80005dc:	0003      	movs	r3, r0
 80005de:	603b      	str	r3, [r7, #0]
		}
			if(SysTimer_ms%4==0)
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <main+0x160>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2203      	movs	r2, #3
 80005e6:	4013      	ands	r3, r2
 80005e8:	d105      	bne.n	80005f6 <main+0xf2>
							writeCHARSEG(tmpValue[0], 0);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2100      	movs	r1, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fe07 	bl	8001204 <writeCHARSEG>
			if(SysTimer_ms%4==1)
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <main+0x160>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2203      	movs	r2, #3
 80005fc:	4013      	ands	r3, r2
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d106      	bne.n	8000610 <main+0x10c>
							writeCHARSEG(tmpValue[1], 1);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2101      	movs	r1, #1
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fdfa 	bl	8001204 <writeCHARSEG>
			if(SysTimer_ms%4==2)
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <main+0x160>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2203      	movs	r2, #3
 8000616:	4013      	ands	r3, r2
 8000618:	2b02      	cmp	r3, #2
 800061a:	d106      	bne.n	800062a <main+0x126>
							writeCHARSEG(tmpValue[2], 2);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	3302      	adds	r3, #2
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2102      	movs	r1, #2
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fded 	bl	8001204 <writeCHARSEG>
			if(SysTimer_ms%4==3)
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <main+0x160>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2203      	movs	r2, #3
 8000630:	4013      	ands	r3, r2
 8000632:	2b03      	cmp	r3, #3
 8000634:	d189      	bne.n	800054a <main+0x46>
							writeCHARSEG(tmpValue[3], 3);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	3303      	adds	r3, #3
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2103      	movs	r1, #3
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fde0 	bl	8001204 <writeCHARSEG>
		if (flagDecrementButton)
 8000644:	e781      	b.n	800054a <main+0x46>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	50000800 	.word	0x50000800
 800064c:	2000012a 	.word	0x2000012a
 8000650:	2000012d 	.word	0x2000012d
 8000654:	20000129 	.word	0x20000129
 8000658:	2000012c 	.word	0x2000012c
 800065c:	2000012b 	.word	0x2000012b
 8000660:	2000012e 	.word	0x2000012e
 8000664:	20000138 	.word	0x20000138

08000668 <SysTickTimerInit>:
	return 0;
}
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
uint8_t SysTickTimerInit(uint16_t ticks)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	0002      	movs	r2, r0
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	801a      	strh	r2, [r3, #0]

  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000674:	1dbb      	adds	r3, r7, #6
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	045b      	lsls	r3, r3, #17
 800067e:	429a      	cmp	r2, r3
 8000680:	d301      	bcc.n	8000686 <SysTickTimerInit+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000682:	2301      	movs	r3, #1
 8000684:	e018      	b.n	80006b8 <SysTickTimerInit+0x50>
  }
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Msk);					/* Disenable SysTick Timer */
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <SysTickTimerInit+0x58>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <SysTickTimerInit+0x58>)
 800068c:	2101      	movs	r1, #1
 800068e:	438a      	bics	r2, r1
 8000690:	601a      	str	r2, [r3, #0]
  SysTick->LOAD  = (uint16_t)(ticks - 1UL);                         /* set reload register */
 8000692:	1dbb      	adds	r3, r7, #6
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	3b01      	subs	r3, #1
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <SysTickTimerInit+0x58>)
 800069c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick uint16_terrupt */
 800069e:	2301      	movs	r3, #1
 80006a0:	425b      	negs	r3, r3
 80006a2:	2103      	movs	r1, #3
 80006a4:	0018      	movs	r0, r3
 80006a6:	f7ff febf 	bl	8000428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SysTickTimerInit+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <SysTickTimerInit+0x58>)
 80006b2:	2207      	movs	r2, #7
 80006b4:	601a      	str	r2, [r3, #0]
		  	  	  	SysTick_CTRL_TICKINT_Msk   |
					SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	e000e010 	.word	0xe000e010

080006c4 <CMSIS_FullInit>:

void CMSIS_FullInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
    // *** Налаштування кешу, передвибірки і попереднього читання *** //

    // Вимкнути буфер кешу, якщо це налаштовано
		CLEAR_BIT(FLASH->ACR,FLASH_ACR_DISAB_BUF);
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <CMSIS_FullInit+0x6c>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <CMSIS_FullInit+0x6c>)
 80006d0:	2120      	movs	r1, #32
 80006d2:	438a      	bics	r2, r1
 80006d4:	601a      	str	r2, [r3, #0]
    // Включити попереднє читання, якщо це налаштовано
		SET_BIT(FLASH->ACR,FLASH_ACR_PRE_READ);
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <CMSIS_FullInit+0x6c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <CMSIS_FullInit+0x6c>)
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	430a      	orrs	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
    // Включити буфер передвибірки, якщо це налаштовано
		SET_BIT(FLASH->ACR,FLASH_ACR_PRFTEN);
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <CMSIS_FullInit+0x6c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <CMSIS_FullInit+0x6c>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	430a      	orrs	r2, r1
 80006ec:	601a      	str	r2, [r3, #0]
		SET_BIT(FLASH->ACR,FLASH_ACR_LATENCY);
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <CMSIS_FullInit+0x6c>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <CMSIS_FullInit+0x6c>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	601a      	str	r2, [r3, #0]

    // *** Налаштування SysTick для переривань кожну 1 мс *** //

    uint16_t ticks = SYSCLK / 1000U;  // Розрахунок кількості тактів для 1 мс
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	22fa      	movs	r2, #250	; 0xfa
 80006fe:	01d2      	lsls	r2, r2, #7
 8000700:	801a      	strh	r2, [r3, #0]
    if (ticks > SysTick_LOAD_RELOAD_Msk) // Якщо кількість тактів більше дозволеного
    {
        while (1); // Помилка, зациклюємося
    }

    SysTickTimerInit(ticks);
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ffae 	bl	8000668 <SysTickTimerInit>

    // Встановлення пріоритету для переривання SysTick
    uint32_t tickPriority = 0;  // Пріоритет для SysTick (без макросів)
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
    if (tickPriority < (1UL << __NVIC_PRIO_BITS))
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d807      	bhi.n	8000726 <CMSIS_FullInit+0x62>
    {
        NVIC_SetPriority(SysTick_IRQn, tickPriority);
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	425b      	negs	r3, r3
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fe82 	bl	8000428 <__NVIC_SetPriority>
    }
    else
    {
        while (1);  // Помилка пріоритету
    }
}
 8000724:	e000      	b.n	8000728 <CMSIS_FullInit+0x64>
        while (1);  // Помилка пріоритету
 8000726:	e7fe      	b.n	8000726 <CMSIS_FullInit+0x62>
}
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40022000 	.word	0x40022000

08000734 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	// Налаштування PWR CR для регулювання напруги
	MODIFY_REG(PWR->CR, PWR_CR_VOS_Msk, 0b01 << PWR_CR_VOS_Pos);
 8000738:	4b49      	ldr	r3, [pc, #292]	; (8000860 <SystemClock_Config+0x12c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a49      	ldr	r2, [pc, #292]	; (8000864 <SystemClock_Config+0x130>)
 800073e:	401a      	ands	r2, r3
 8000740:	4b47      	ldr	r3, [pc, #284]	; (8000860 <SystemClock_Config+0x12c>)
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	0109      	lsls	r1, r1, #4
 8000746:	430a      	orrs	r2, r1
 8000748:	601a      	str	r2, [r3, #0]

	// Вимкнення HSI16DIV
	CLEAR_BIT(RCC->CR, RCC_CR_HSIDIVEN);
 800074a:	4b47      	ldr	r3, [pc, #284]	; (8000868 <SystemClock_Config+0x134>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b46      	ldr	r3, [pc, #280]	; (8000868 <SystemClock_Config+0x134>)
 8000750:	2108      	movs	r1, #8
 8000752:	438a      	bics	r2, r1
 8000754:	601a      	str	r2, [r3, #0]

	// Вимкнення MSI
	CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000756:	4b44      	ldr	r3, [pc, #272]	; (8000868 <SystemClock_Config+0x134>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b43      	ldr	r3, [pc, #268]	; (8000868 <SystemClock_Config+0x134>)
 800075c:	4943      	ldr	r1, [pc, #268]	; (800086c <SystemClock_Config+0x138>)
 800075e:	400a      	ands	r2, r1
 8000760:	601a      	str	r2, [r3, #0]

	// Якщо джерело системної частоти не HSI16
	if ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI)
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <SystemClock_Config+0x134>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	220c      	movs	r2, #12
 8000768:	4013      	ands	r3, r2
 800076a:	2b04      	cmp	r3, #4
 800076c:	d01b      	beq.n	80007a6 <SystemClock_Config+0x72>
	{
		// Увімкнення HSI16
		SET_BIT(RCC->CR, RCC_CR_HSION);
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <SystemClock_Config+0x134>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <SystemClock_Config+0x134>)
 8000774:	2101      	movs	r1, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	601a      	str	r2, [r3, #0]

		// Очікування стабілізації HSI16
		while (!(RCC->CR & RCC_CR_HSIRDY))
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <SystemClock_Config+0x134>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2204      	movs	r2, #4
 8000782:	4013      	ands	r3, r2
 8000784:	d0fa      	beq.n	800077c <SystemClock_Config+0x48>
		{
		}

		// Перемикання системної тактової частоти на HSI16
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_HSI);
 8000786:	4b38      	ldr	r3, [pc, #224]	; (8000868 <SystemClock_Config+0x134>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	2203      	movs	r2, #3
 800078c:	4393      	bics	r3, r2
 800078e:	001a      	movs	r2, r3
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <SystemClock_Config+0x134>)
 8000792:	2101      	movs	r1, #1
 8000794:	430a      	orrs	r2, r1
 8000796:	60da      	str	r2, [r3, #12]

		// Очікування завершення перемикання
		while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI)
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <SystemClock_Config+0x134>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	220c      	movs	r2, #12
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d1f9      	bne.n	800079a <SystemClock_Config+0x66>
		{
		}
	}

	// Налаштування MCO prescaler і джерела сигналу
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOPRE_Msk, 0b000 << RCC_CFGR_MCOPRE_Pos);
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <SystemClock_Config+0x134>)
 80007a8:	68da      	ldr	r2, [r3, #12]
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <SystemClock_Config+0x134>)
 80007ac:	4930      	ldr	r1, [pc, #192]	; (8000870 <SystemClock_Config+0x13c>)
 80007ae:	400a      	ands	r2, r1
 80007b0:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL_Msk, 0b000 << RCC_CFGR_MCOSEL_Pos);
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <SystemClock_Config+0x134>)
 80007b4:	68da      	ldr	r2, [r3, #12]
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <SystemClock_Config+0x134>)
 80007b8:	492e      	ldr	r1, [pc, #184]	; (8000874 <SystemClock_Config+0x140>)
 80007ba:	400a      	ands	r2, r1
 80007bc:	60da      	str	r2, [r3, #12]

	// Налаштування PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLDIV_Msk, 0b01 << RCC_CFGR_PLLDIV_Pos);
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <SystemClock_Config+0x134>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	4a2d      	ldr	r2, [pc, #180]	; (8000878 <SystemClock_Config+0x144>)
 80007c4:	401a      	ands	r2, r3
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <SystemClock_Config+0x134>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	03c9      	lsls	r1, r1, #15
 80007cc:	430a      	orrs	r2, r1
 80007ce:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL_Msk, 0b0001 << RCC_CFGR_PLLMUL_Pos);
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <SystemClock_Config+0x134>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a29      	ldr	r2, [pc, #164]	; (800087c <SystemClock_Config+0x148>)
 80007d6:	401a      	ands	r2, r3
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <SystemClock_Config+0x134>)
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	02c9      	lsls	r1, r1, #11
 80007de:	430a      	orrs	r2, r1
 80007e0:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC_Msk, 0b0 << RCC_CFGR_PLLSRC_Pos);
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <SystemClock_Config+0x134>)
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <SystemClock_Config+0x134>)
 80007e8:	4925      	ldr	r1, [pc, #148]	; (8000880 <SystemClock_Config+0x14c>)
 80007ea:	400a      	ands	r2, r1
 80007ec:	60da      	str	r2, [r3, #12]

	// Вимкнення системного пробудження від MSI після STOP режиму
	SET_BIT(RCC->CFGR, RCC_CFGR_STOPWUCK);
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <SystemClock_Config+0x134>)
 80007f0:	68da      	ldr	r2, [r3, #12]
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <SystemClock_Config+0x134>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0209      	lsls	r1, r1, #8
 80007f8:	430a      	orrs	r2, r1
 80007fa:	60da      	str	r2, [r3, #12]

	// Налаштування прескалерів для шин APB1, APB2 та AHB
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2_Msk, 0b000 << RCC_CFGR_PPRE2_Pos);
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <SystemClock_Config+0x134>)
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <SystemClock_Config+0x134>)
 8000802:	4920      	ldr	r1, [pc, #128]	; (8000884 <SystemClock_Config+0x150>)
 8000804:	400a      	ands	r2, r1
 8000806:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1_Msk, 0b000 << RCC_CFGR_PPRE1_Pos);
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <SystemClock_Config+0x134>)
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <SystemClock_Config+0x134>)
 800080e:	491e      	ldr	r1, [pc, #120]	; (8000888 <SystemClock_Config+0x154>)
 8000810:	400a      	ands	r2, r1
 8000812:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE_Msk, 0b0000 << RCC_CFGR_HPRE_Pos);
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <SystemClock_Config+0x134>)
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <SystemClock_Config+0x134>)
 800081a:	21f0      	movs	r1, #240	; 0xf0
 800081c:	438a      	bics	r2, r1
 800081e:	60da      	str	r2, [r3, #12]

	// Перемикання на PLL
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <SystemClock_Config+0x134>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <SystemClock_Config+0x134>)
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	0449      	lsls	r1, r1, #17
 800082a:	430a      	orrs	r2, r1
 800082c:	601a      	str	r2, [r3, #0]

	// Очікування стабілізації PLL
	while (!(RCC->CR & RCC_CR_PLLRDY))
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <SystemClock_Config+0x134>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	049b      	lsls	r3, r3, #18
 8000838:	4013      	ands	r3, r2
 800083a:	d0f9      	beq.n	8000830 <SystemClock_Config+0xfc>
	{
	}

	// Перемикання системної частоти на PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_PLL);
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <SystemClock_Config+0x134>)
 800083e:	68da      	ldr	r2, [r3, #12]
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <SystemClock_Config+0x134>)
 8000842:	2103      	movs	r1, #3
 8000844:	430a      	orrs	r2, r1
 8000846:	60da      	str	r2, [r3, #12]

	// Очікування завершення перемикання
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL)
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <SystemClock_Config+0x134>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	220c      	movs	r2, #12
 8000850:	4013      	ands	r3, r2
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d1f9      	bne.n	800084a <SystemClock_Config+0x116>
	{
	}
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40007000 	.word	0x40007000
 8000864:	ffffe7ff 	.word	0xffffe7ff
 8000868:	40021000 	.word	0x40021000
 800086c:	fffffeff 	.word	0xfffffeff
 8000870:	8fffffff 	.word	0x8fffffff
 8000874:	f0ffffff 	.word	0xf0ffffff
 8000878:	ff3fffff 	.word	0xff3fffff
 800087c:	ffc3ffff 	.word	0xffc3ffff
 8000880:	fffeffff 	.word	0xfffeffff
 8000884:	ffffc7ff 	.word	0xffffc7ff
 8000888:	fffff8ff 	.word	0xfffff8ff

0800088c <RTC_Init>:

void RTC_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	// 1. Enable power and backup domain access
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <RTC_Init+0xc0>)
 8000892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <RTC_Init+0xc0>)
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	0549      	lsls	r1, r1, #21
 800089a:	430a      	orrs	r2, r1
 800089c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_BIT(PWR->CR, PWR_CR_DBP);
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <RTC_Init+0xc4>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <RTC_Init+0xc4>)
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	0049      	lsls	r1, r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]

	// 2. Enable LSE Oscillator
	SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <RTC_Init+0xc0>)
 80008ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <RTC_Init+0xc0>)
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	0049      	lsls	r1, r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	651a      	str	r2, [r3, #80]	; 0x50
	while (!(READ_BIT(RCC->CSR, RCC_CSR_LSERDY)))
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <RTC_Init+0xc0>)
 80008be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4013      	ands	r3, r2
 80008c6:	d0f9      	beq.n	80008bc <RTC_Init+0x30>
	{
	}

	// 3. Set LSE as RTC clock source and enable RTC
	MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL_Msk, 0b01 << RCC_CSR_RTCSEL_Pos); // LSE selected as RTC clock
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <RTC_Init+0xc0>)
 80008ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <RTC_Init+0xc8>)
 80008ce:	401a      	ands	r2, r3
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <RTC_Init+0xc0>)
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0249      	lsls	r1, r1, #9
 80008d6:	430a      	orrs	r2, r1
 80008d8:	651a      	str	r2, [r3, #80]	; 0x50
	SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <RTC_Init+0xc0>)
 80008dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <RTC_Init+0xc0>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	02c9      	lsls	r1, r1, #11
 80008e4:	430a      	orrs	r2, r1
 80008e6:	651a      	str	r2, [r3, #80]	; 0x50

	// 4. Disable RTC write protection
	RTC->WPR = 0xCA; // Step 1
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <RTC_Init+0xcc>)
 80008ea:	22ca      	movs	r2, #202	; 0xca
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53; // Step 2
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <RTC_Init+0xcc>)
 80008f0:	2253      	movs	r2, #83	; 0x53
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24

	// 5. Enter initialization mode
	SET_BIT(RTC->ISR, RTC_ISR_INIT);
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <RTC_Init+0xcc>)
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <RTC_Init+0xcc>)
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	430a      	orrs	r2, r1
 80008fe:	60da      	str	r2, [r3, #12]
	while (!(READ_BIT(RTC->ISR, RTC_ISR_INITF)))
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <RTC_Init+0xcc>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	4013      	ands	r3, r2
 800090a:	d0fa      	beq.n	8000902 <RTC_Init+0x76>
	{
	}

	// 6. Set the time in BCD format (17:36:00)
	MODIFY_REG(RTC->TR,
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <RTC_Init+0xcc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <RTC_Init+0xd0>)
 8000912:	401a      	ands	r2, r3
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <RTC_Init+0xcc>)
 8000916:	4912      	ldr	r1, [pc, #72]	; (8000960 <RTC_Init+0xd4>)
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
				   (0x6 << RTC_TR_MNU_Pos) | // Minute units (6 -> 36)
				   (0x0 << RTC_TR_ST_Pos) |	 // Second tens (0 -> 00)
				   (0x0 << RTC_TR_SU_Pos));	 // Second units (0 -> 00)

	// 7. Set the date in BCD format (01/02/2024, Monday)
	MODIFY_REG(RTC->DR,
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <RTC_Init+0xcc>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	4a10      	ldr	r2, [pc, #64]	; (8000964 <RTC_Init+0xd8>)
 8000922:	401a      	ands	r2, r3
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <RTC_Init+0xcc>)
 8000926:	4910      	ldr	r1, [pc, #64]	; (8000968 <RTC_Init+0xdc>)
 8000928:	430a      	orrs	r2, r1
 800092a:	605a      	str	r2, [r3, #4]
				   (0x0 << RTC_DR_DT_Pos) |	 // Day tens (0 -> 01)
				   (0x1 << RTC_DR_DU_Pos) |	 // Day units (1 -> 01)
				   (0x2 << RTC_DR_WDU_Pos)); // Weekday (3 -> Monday)

	// 8. Exit initialization mode
	CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <RTC_Init+0xcc>)
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <RTC_Init+0xcc>)
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	438a      	bics	r2, r1
 8000936:	60da      	str	r2, [r3, #12]

	// 9. Re-enable RTC write protection
	RTC->WPR = 0xFE; // Disable write access for RTC register
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <RTC_Init+0xcc>)
 800093a:	22fe      	movs	r2, #254	; 0xfe
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x64; //				-||-
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <RTC_Init+0xcc>)
 8000940:	2264      	movs	r2, #100	; 0x64
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000
 8000950:	40007000 	.word	0x40007000
 8000954:	fffcffff 	.word	0xfffcffff
 8000958:	40002800 	.word	0x40002800
 800095c:	ffc08080 	.word	0xffc08080
 8000960:	00173600 	.word	0x00173600
 8000964:	ff0000c0 	.word	0xff0000c0
 8000968:	00244401 	.word	0x00244401

0800096c <TIM2_Init>:

void TIM2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

	// Увімкнення тактування GPIOA (для PA15, як PWM вихід)
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 8000970:	4b61      	ldr	r3, [pc, #388]	; (8000af8 <TIM2_Init+0x18c>)
 8000972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000974:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <TIM2_Init+0x18c>)
 8000976:	2101      	movs	r1, #1
 8000978:	430a      	orrs	r2, r1
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин 15 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 15, 0b10, 0, 0b11); // BuzzerPin
 800097c:	4b5f      	ldr	r3, [pc, #380]	; (8000afc <TIM2_Init+0x190>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	089a      	lsrs	r2, r3, #2
 8000984:	4b5d      	ldr	r3, [pc, #372]	; (8000afc <TIM2_Init+0x190>)
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	0609      	lsls	r1, r1, #24
 800098a:	430a      	orrs	r2, r1
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	4b5b      	ldr	r3, [pc, #364]	; (8000afc <TIM2_Init+0x190>)
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	4b5a      	ldr	r3, [pc, #360]	; (8000afc <TIM2_Init+0x190>)
 8000994:	495a      	ldr	r1, [pc, #360]	; (8000b00 <TIM2_Init+0x194>)
 8000996:	400a      	ands	r2, r1
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	4b58      	ldr	r3, [pc, #352]	; (8000afc <TIM2_Init+0x190>)
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	4b57      	ldr	r3, [pc, #348]	; (8000afc <TIM2_Init+0x190>)
 80009a0:	21c0      	movs	r1, #192	; 0xc0
 80009a2:	0609      	lsls	r1, r1, #24
 80009a4:	430a      	orrs	r2, r1
 80009a6:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AF1 для пина 15
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL15_Msk, 0b0101 << GPIO_AFRH_AFSEL15_Pos);
 80009a8:	23a0      	movs	r3, #160	; 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	091a      	lsrs	r2, r3, #4
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	21a0      	movs	r1, #160	; 0xa0
 80009b8:	05c9      	lsls	r1, r1, #23
 80009ba:	430a      	orrs	r2, r1
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24

	// Увімкнення тактування TIM2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80009be:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <TIM2_Init+0x18c>)
 80009c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009c2:	4b4d      	ldr	r3, [pc, #308]	; (8000af8 <TIM2_Init+0x18c>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	639a      	str	r2, [r3, #56]	; 0x38
	CLEAR_BIT(TIM2->CR1, TIM_CR1_CEN);
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	2101      	movs	r1, #1
 80009d6:	438a      	bics	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]

	/*Настройка таймера 2*/
	// TIMx control register 1 (TIMx_CR1)
	// SET_BIT(TIM2->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM2->CR1, TIM_CR1_UDIS);								 // Генерировать событие Update
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	2102      	movs	r1, #2
 80009e6:	438a      	bics	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_URS);								 // Генерировать прерывание
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	2104      	movs	r1, #4
 80009f6:	438a      	bics	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_OPM);								 // One pulse mode off(Счетчик не останавливается при обновлении)
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	2108      	movs	r1, #8
 8000a06:	438a      	bics	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_DIR);								 // Считаем вверх
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	2110      	movs	r1, #16
 8000a16:	438a      	bics	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM2->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); // Выравнивание по краю
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	2160      	movs	r1, #96	; 0x60
 8000a26:	438a      	bics	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM2->CR1, TIM_CR1_ARPE);								 // Auto-reload preload enable
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	430a      	orrs	r2, r1
 8000a38:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM2->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); // Предделение выключено
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	492f      	ldr	r1, [pc, #188]	; (8000b04 <TIM2_Init+0x198>)
 8000a46:	400a      	ands	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]

	/*Настройка прерываний*/
	// TIMx DMA/uint16_terrupt enable register (TIMx_DIER)
	SET_BIT(TIM2->DIER, TIM_DIER_UIE); // Update uint16_terrupt enable
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	60da      	str	r2, [r3, #12]

	// TIMx status register (TIMx_SR) - Статусные регистры

	TIM2->PSC = 3200 - 1;
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <TIM2_Init+0x19c>)
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10000 - 1;
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <TIM2_Init+0x1a0>)
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM2_IRQn); // Разрешить прерывания по таймеру 2
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f7ff fcc2 	bl	80003f4 <__NVIC_EnableIRQ>
	/*Настройка шим(Канал 1)*/
	MODIFY_REG(TIM2->CCMR1, TIM_CCMR1_CC1S_Msk, 0b00 << TIM_CCMR1_CC1S_Pos);  // CC1 channel is configured as output
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	699a      	ldr	r2, [r3, #24]
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	438a      	bics	r2, r1
 8000a7e:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM2->CCMR1, TIM_CCMR1_OC1FE);								  // Fast mode disable
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	699a      	ldr	r2, [r3, #24]
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	438a      	bics	r2, r1
 8000a8e:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM2->CCMR1, TIM_CCMR1_OC1PE);									  // Preload enable
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	699a      	ldr	r2, [r3, #24]
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	619a      	str	r2, [r3, #24]
	MODIFY_REG(TIM2->CCMR1, TIM_CCMR1_OC1M_Msk, 0b110 << TIM_CCMR1_OC1M_Pos); // PWM MODE 1
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	2270      	movs	r2, #112	; 0x70
 8000aa8:	4393      	bics	r3, r2
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2160      	movs	r1, #96	; 0x60
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM2->CCMR1, TIM_CCMR1_OC1CE);								  // OC1Ref is not affected by the ETRF input
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	699a      	ldr	r2, [r3, #24]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	438a      	bics	r2, r1
 8000ac4:	619a      	str	r2, [r3, #24]

	/*Запуск ШИМ*/
	// 15.4.9 TIMx capture/compare enable register (TIMx_CCER)
	SET_BIT(TIM2->CCER, TIM_CCER_CC1E);	   // On - OC1 signal is output on the corresponding output pin.
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	6a1a      	ldr	r2, [r3, #32]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(TIM21->CCER, TIM_CCER_CC1P); // OC1 active high.
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <TIM2_Init+0x1a4>)
 8000ad8:	6a1a      	ldr	r2, [r3, #32]
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <TIM2_Init+0x1a4>)
 8000adc:	2102      	movs	r1, #2
 8000ade:	438a      	bics	r2, r1
 8000ae0:	621a      	str	r2, [r3, #32]

	SET_BIT(TIM2->CR1, TIM_CR1_CEN);
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	2101      	movs	r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	50000400 	.word	0x50000400
 8000b00:	ffff7fff 	.word	0xffff7fff
 8000b04:	fffffcff 	.word	0xfffffcff
 8000b08:	00000c7f 	.word	0x00000c7f
 8000b0c:	0000270f 	.word	0x0000270f
 8000b10:	40010800 	.word	0x40010800

08000b14 <TIM21_Init>:

void TIM21_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	// Увімкнення тактування GPIOB (для PB5, як PWM вихід)
	RCC->IOPENR |= RCC_IOPENR_IOPBEN;
 8000b18:	4b4f      	ldr	r3, [pc, #316]	; (8000c58 <TIM21_Init+0x144>)
 8000b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b1c:	4b4e      	ldr	r3, [pc, #312]	; (8000c58 <TIM21_Init+0x144>)
 8000b1e:	2102      	movs	r1, #2
 8000b20:	430a      	orrs	r2, r1
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин 5 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 5, 0b10, 0, 0b11); // mainLED
 8000b24:	4b4d      	ldr	r3, [pc, #308]	; (8000c5c <TIM21_Init+0x148>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a4d      	ldr	r2, [pc, #308]	; (8000c60 <TIM21_Init+0x14c>)
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4b4b      	ldr	r3, [pc, #300]	; (8000c5c <TIM21_Init+0x148>)
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	0109      	lsls	r1, r1, #4
 8000b32:	430a      	orrs	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <TIM21_Init+0x148>)
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	4b48      	ldr	r3, [pc, #288]	; (8000c5c <TIM21_Init+0x148>)
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	438a      	bics	r2, r1
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <TIM21_Init+0x148>)
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <TIM21_Init+0x148>)
 8000b48:	21c0      	movs	r1, #192	; 0xc0
 8000b4a:	0109      	lsls	r1, r1, #4
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AF1 для пина 5
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL5_Msk, 0b0101 << GPIO_AFRL_AFSEL5_Pos);
 8000b50:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <TIM21_Init+0x148>)
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	4a43      	ldr	r2, [pc, #268]	; (8000c64 <TIM21_Init+0x150>)
 8000b56:	401a      	ands	r2, r3
 8000b58:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <TIM21_Init+0x148>)
 8000b5a:	21a0      	movs	r1, #160	; 0xa0
 8000b5c:	03c9      	lsls	r1, r1, #15
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	621a      	str	r2, [r3, #32]

	// Увімкнення тактування TIM21
	RCC->APB2ENR |= RCC_APB2ENR_TIM21EN;
 8000b62:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <TIM21_Init+0x144>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <TIM21_Init+0x144>)
 8000b68:	2104      	movs	r1, #4
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
	CLEAR_BIT(TIM21->CR1, TIM_CR1_CEN);
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <TIM21_Init+0x154>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <TIM21_Init+0x154>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	438a      	bics	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]

	/*Настройка таймера 21*/
	// TIMx control register 1 (TIMx_CR1)
	// SET_BIT(TIM21->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM21->CR1, TIM_CR1_UDIS);							  // Генерировать событие Update
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <TIM21_Init+0x154>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <TIM21_Init+0x154>)
 8000b80:	2102      	movs	r1, #2
 8000b82:	438a      	bics	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_URS);								  // Генерировать прерывание
 8000b86:	4b38      	ldr	r3, [pc, #224]	; (8000c68 <TIM21_Init+0x154>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <TIM21_Init+0x154>)
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	438a      	bics	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_OPM);								  // One pulse mode off(Счетчик не останавливается при обновлении)
 8000b92:	4b35      	ldr	r3, [pc, #212]	; (8000c68 <TIM21_Init+0x154>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <TIM21_Init+0x154>)
 8000b98:	2108      	movs	r1, #8
 8000b9a:	438a      	bics	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_DIR);								  // Считаем вверх
 8000b9e:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <TIM21_Init+0x154>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <TIM21_Init+0x154>)
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	438a      	bics	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM21->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); // Выравнивание по краю
 8000baa:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <TIM21_Init+0x154>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <TIM21_Init+0x154>)
 8000bb0:	2160      	movs	r1, #96	; 0x60
 8000bb2:	438a      	bics	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM21->CR1, TIM_CR1_ARPE);								  // Auto-reload preload enable
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <TIM21_Init+0x154>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <TIM21_Init+0x154>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM21->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); // Предделение выключено
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <TIM21_Init+0x154>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <TIM21_Init+0x154>)
 8000bc8:	4928      	ldr	r1, [pc, #160]	; (8000c6c <TIM21_Init+0x158>)
 8000bca:	400a      	ands	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]

	/*Настройка прерываний*/
	// TIMx DMA/interrupt enable register (TIMx_DIER)
	SET_BIT(TIM21->DIER, TIM_DIER_UIE); // Update interrupt enable
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <TIM21_Init+0x154>)
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <TIM21_Init+0x154>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	60da      	str	r2, [r3, #12]

	// TIMx status register (TIMx_SR) - Статусные регистры
	TIM21->PSC = 3200 - 1;
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <TIM21_Init+0x154>)
 8000bdc:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <TIM21_Init+0x15c>)
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
	TIM21->ARR = 10000 - 1;
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <TIM21_Init+0x154>)
 8000be2:	4a24      	ldr	r2, [pc, #144]	; (8000c74 <TIM21_Init+0x160>)
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM21_IRQn); // Разрешить прерывания по таймеру 21
 8000be6:	2014      	movs	r0, #20
 8000be8:	f7ff fc04 	bl	80003f4 <__NVIC_EnableIRQ>

	/*Настройка шим(Канал 1)*/
	MODIFY_REG(TIM21->CCMR1, TIM_CCMR1_CC1S_Msk, 0b00 << TIM_CCMR1_CC1S_Pos);  // CC1 channel is configured as output
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <TIM21_Init+0x154>)
 8000bee:	699a      	ldr	r2, [r3, #24]
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <TIM21_Init+0x154>)
 8000bf2:	2103      	movs	r1, #3
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM21->CCMR1, TIM_CCMR1_OC1FE);								   // Fast mode disable
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <TIM21_Init+0x154>)
 8000bfa:	699a      	ldr	r2, [r3, #24]
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <TIM21_Init+0x154>)
 8000bfe:	2104      	movs	r1, #4
 8000c00:	438a      	bics	r2, r1
 8000c02:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM21->CCMR1, TIM_CCMR1_OC1PE);									   // Preload enable
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <TIM21_Init+0x154>)
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <TIM21_Init+0x154>)
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	619a      	str	r2, [r3, #24]
	MODIFY_REG(TIM21->CCMR1, TIM_CCMR1_OC1M_Msk, 0b110 << TIM_CCMR1_OC1M_Pos); // PWM MODE 1
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <TIM21_Init+0x154>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	2270      	movs	r2, #112	; 0x70
 8000c16:	4393      	bics	r3, r2
 8000c18:	001a      	movs	r2, r3
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <TIM21_Init+0x154>)
 8000c1c:	2160      	movs	r1, #96	; 0x60
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM21->CCMR1, TIM_CCMR1_OC1CE);								   // OC1Ref is not affected by the ETRF input
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <TIM21_Init+0x154>)
 8000c24:	699a      	ldr	r2, [r3, #24]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <TIM21_Init+0x154>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	438a      	bics	r2, r1
 8000c2c:	619a      	str	r2, [r3, #24]

	/*Запуск ШИМ*/
	// TIMx capture/compare enable register (TIMx_CCER)
	SET_BIT(TIM21->CCER, TIM_CCER_CC1E); // On - OC1 signal is output on the corresponding output pin.
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <TIM21_Init+0x154>)
 8000c30:	6a1a      	ldr	r2, [r3, #32]
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <TIM21_Init+0x154>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	621a      	str	r2, [r3, #32]
	SET_BIT(TIM21->CCER, TIM_CCER_CC1P); // OC1 active high.
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <TIM21_Init+0x154>)
 8000c3c:	6a1a      	ldr	r2, [r3, #32]
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <TIM21_Init+0x154>)
 8000c40:	2102      	movs	r1, #2
 8000c42:	430a      	orrs	r2, r1
 8000c44:	621a      	str	r2, [r3, #32]

	SET_BIT(TIM21->CR1, TIM_CR1_CEN);
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <TIM21_Init+0x154>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <TIM21_Init+0x154>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	50000400 	.word	0x50000400
 8000c60:	fffff3ff 	.word	0xfffff3ff
 8000c64:	ff0fffff 	.word	0xff0fffff
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	fffffcff 	.word	0xfffffcff
 8000c70:	00000c7f 	.word	0x00000c7f
 8000c74:	0000270f 	.word	0x0000270f

08000c78 <GPIO_Init>:

void GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	// Включення тактування портів A, B, C
	RCC->IOPENR |= RCC_IOPENR_IOPAEN | RCC_IOPENR_IOPBEN | RCC_IOPENR_IOPCEN;
 8000c7c:	4bfd      	ldr	r3, [pc, #1012]	; (8001074 <GPIO_Init+0x3fc>)
 8000c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c80:	4bfc      	ldr	r3, [pc, #1008]	; (8001074 <GPIO_Init+0x3fc>)
 8000c82:	2107      	movs	r1, #7
 8000c84:	430a      	orrs	r2, r1
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c

	// Налаштування світлодіодів (виводи PA, PB)
	CONFIGURE_GPIO(GPIOA, 7, 0b01, 0, 0b11);  // LEDa
 8000c88:	23a0      	movs	r3, #160	; 0xa0
 8000c8a:	05db      	lsls	r3, r3, #23
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4afa      	ldr	r2, [pc, #1000]	; (8001078 <GPIO_Init+0x400>)
 8000c90:	401a      	ands	r2, r3
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	01c9      	lsls	r1, r1, #7
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	23a0      	movs	r3, #160	; 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	438a      	bics	r2, r1
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	23a0      	movs	r3, #160	; 0xa0
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	21c0      	movs	r1, #192	; 0xc0
 8000cba:	0209      	lsls	r1, r1, #8
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 1, 0b01, 0, 0b11);  // LEDb
 8000cc0:	4bee      	ldr	r3, [pc, #952]	; (800107c <GPIO_Init+0x404>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	4393      	bics	r3, r2
 8000cc8:	001a      	movs	r2, r3
 8000cca:	4bec      	ldr	r3, [pc, #944]	; (800107c <GPIO_Init+0x404>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	4bea      	ldr	r3, [pc, #936]	; (800107c <GPIO_Init+0x404>)
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	4be9      	ldr	r3, [pc, #932]	; (800107c <GPIO_Init+0x404>)
 8000cd8:	2102      	movs	r1, #2
 8000cda:	438a      	bics	r2, r1
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	4be7      	ldr	r3, [pc, #924]	; (800107c <GPIO_Init+0x404>)
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4be6      	ldr	r3, [pc, #920]	; (800107c <GPIO_Init+0x404>)
 8000ce4:	210c      	movs	r1, #12
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 6, 0b01, 0, 0b11);  // LEDc
 8000cea:	23a0      	movs	r3, #160	; 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4ae3      	ldr	r2, [pc, #908]	; (8001080 <GPIO_Init+0x408>)
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	23a0      	movs	r3, #160	; 0xa0
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0149      	lsls	r1, r1, #5
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	23a0      	movs	r3, #160	; 0xa0
 8000d02:	05db      	lsls	r3, r3, #23
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	23a0      	movs	r3, #160	; 0xa0
 8000d08:	05db      	lsls	r3, r3, #23
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	23a0      	movs	r3, #160	; 0xa0
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	23a0      	movs	r3, #160	; 0xa0
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	21c0      	movs	r1, #192	; 0xc0
 8000d1c:	0189      	lsls	r1, r1, #6
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 5, 0b01, 0, 0b11);  // LEDd
 8000d22:	23a0      	movs	r3, #160	; 0xa0
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4ad6      	ldr	r2, [pc, #856]	; (8001084 <GPIO_Init+0x40c>)
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	23a0      	movs	r3, #160	; 0xa0
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	00c9      	lsls	r1, r1, #3
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	23a0      	movs	r3, #160	; 0xa0
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	23a0      	movs	r3, #160	; 0xa0
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	2120      	movs	r1, #32
 8000d44:	438a      	bics	r2, r1
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	21c0      	movs	r1, #192	; 0xc0
 8000d54:	0109      	lsls	r1, r1, #4
 8000d56:	430a      	orrs	r2, r1
 8000d58:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 11, 0b01, 0, 0b11); // LEDe
 8000d5a:	23a0      	movs	r3, #160	; 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4ac9      	ldr	r2, [pc, #804]	; (8001088 <GPIO_Init+0x410>)
 8000d62:	401a      	ands	r2, r3
 8000d64:	23a0      	movs	r3, #160	; 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	03c9      	lsls	r1, r1, #15
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	23a0      	movs	r3, #160	; 0xa0
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	23a0      	movs	r3, #160	; 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	49c4      	ldr	r1, [pc, #784]	; (800108c <GPIO_Init+0x414>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	23a0      	movs	r3, #160	; 0xa0
 8000d82:	05db      	lsls	r3, r3, #23
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	23a0      	movs	r3, #160	; 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	21c0      	movs	r1, #192	; 0xc0
 8000d8c:	0409      	lsls	r1, r1, #16
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 9, 0b01, 0, 0b11);  // LEDf
 8000d92:	23a0      	movs	r3, #160	; 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4abd      	ldr	r2, [pc, #756]	; (8001090 <GPIO_Init+0x418>)
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	23a0      	movs	r3, #160	; 0xa0
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	02c9      	lsls	r1, r1, #11
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	23a0      	movs	r3, #160	; 0xa0
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	23a0      	movs	r3, #160	; 0xa0
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	49b8      	ldr	r1, [pc, #736]	; (8001094 <GPIO_Init+0x41c>)
 8000db4:	400a      	ands	r2, r1
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	23a0      	movs	r3, #160	; 0xa0
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	23a0      	movs	r3, #160	; 0xa0
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	21c0      	movs	r1, #192	; 0xc0
 8000dc4:	0309      	lsls	r1, r1, #12
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 0, 0b01, 0, 0b11);  // LEDg
 8000dca:	4bac      	ldr	r3, [pc, #688]	; (800107c <GPIO_Init+0x404>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2203      	movs	r2, #3
 8000dd0:	4393      	bics	r3, r2
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	4ba9      	ldr	r3, [pc, #676]	; (800107c <GPIO_Init+0x404>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	4ba7      	ldr	r3, [pc, #668]	; (800107c <GPIO_Init+0x404>)
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4ba6      	ldr	r3, [pc, #664]	; (800107c <GPIO_Init+0x404>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	438a      	bics	r2, r1
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	4ba4      	ldr	r3, [pc, #656]	; (800107c <GPIO_Init+0x404>)
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	4ba3      	ldr	r3, [pc, #652]	; (800107c <GPIO_Init+0x404>)
 8000dee:	2103      	movs	r1, #3
 8000df0:	430a      	orrs	r2, r1
 8000df2:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 3, 0b01, 0, 0b11);  // LEDdp
 8000df4:	4ba1      	ldr	r3, [pc, #644]	; (800107c <GPIO_Init+0x404>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	22c0      	movs	r2, #192	; 0xc0
 8000dfa:	4393      	bics	r3, r2
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	4b9f      	ldr	r3, [pc, #636]	; (800107c <GPIO_Init+0x404>)
 8000e00:	2140      	movs	r1, #64	; 0x40
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	4b9d      	ldr	r3, [pc, #628]	; (800107c <GPIO_Init+0x404>)
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	4b9c      	ldr	r3, [pc, #624]	; (800107c <GPIO_Init+0x404>)
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	438a      	bics	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	4b9a      	ldr	r3, [pc, #616]	; (800107c <GPIO_Init+0x404>)
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	4b99      	ldr	r3, [pc, #612]	; (800107c <GPIO_Init+0x404>)
 8000e18:	21c0      	movs	r1, #192	; 0xc0
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 3, 0b01, 0, 0b11);  // LEDD1
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	22c0      	movs	r2, #192	; 0xc0
 8000e26:	4393      	bics	r3, r2
 8000e28:	001a      	movs	r2, r3
 8000e2a:	23a0      	movs	r3, #160	; 0xa0
 8000e2c:	05db      	lsls	r3, r3, #23
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	23a0      	movs	r3, #160	; 0xa0
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	23a0      	movs	r3, #160	; 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	2108      	movs	r1, #8
 8000e40:	438a      	bics	r2, r1
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	23a0      	movs	r3, #160	; 0xa0
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	21c0      	movs	r1, #192	; 0xc0
 8000e50:	430a      	orrs	r2, r1
 8000e52:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 4, 0b01, 0, 0b11);  // LEDD2
 8000e54:	23a0      	movs	r3, #160	; 0xa0
 8000e56:	05db      	lsls	r3, r3, #23
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a8f      	ldr	r2, [pc, #572]	; (8001098 <GPIO_Init+0x420>)
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	0049      	lsls	r1, r1, #1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	23a0      	movs	r3, #160	; 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	2110      	movs	r1, #16
 8000e76:	438a      	bics	r2, r1
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	21c0      	movs	r1, #192	; 0xc0
 8000e86:	0089      	lsls	r1, r1, #2
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 12, 0b01, 0, 0b11); // LEDD3
 8000e8c:	23a0      	movs	r3, #160	; 0xa0
 8000e8e:	05db      	lsls	r3, r3, #23
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a82      	ldr	r2, [pc, #520]	; (800109c <GPIO_Init+0x424>)
 8000e94:	401a      	ands	r2, r3
 8000e96:	23a0      	movs	r3, #160	; 0xa0
 8000e98:	05db      	lsls	r3, r3, #23
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0449      	lsls	r1, r1, #17
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	23a0      	movs	r3, #160	; 0xa0
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	497c      	ldr	r1, [pc, #496]	; (80010a0 <GPIO_Init+0x428>)
 8000eae:	400a      	ands	r2, r1
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	23a0      	movs	r3, #160	; 0xa0
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	21c0      	movs	r1, #192	; 0xc0
 8000ebe:	0489      	lsls	r1, r1, #18
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 4, 0b01, 0, 0b11);  // LEDD4
 8000ec4:	4b6d      	ldr	r3, [pc, #436]	; (800107c <GPIO_Init+0x404>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a73      	ldr	r2, [pc, #460]	; (8001098 <GPIO_Init+0x420>)
 8000eca:	401a      	ands	r2, r3
 8000ecc:	4b6b      	ldr	r3, [pc, #428]	; (800107c <GPIO_Init+0x404>)
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	0049      	lsls	r1, r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	4b69      	ldr	r3, [pc, #420]	; (800107c <GPIO_Init+0x404>)
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	4b68      	ldr	r3, [pc, #416]	; (800107c <GPIO_Init+0x404>)
 8000edc:	2110      	movs	r1, #16
 8000ede:	438a      	bics	r2, r1
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	4b66      	ldr	r3, [pc, #408]	; (800107c <GPIO_Init+0x404>)
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	4b65      	ldr	r3, [pc, #404]	; (800107c <GPIO_Init+0x404>)
 8000ee8:	21c0      	movs	r1, #192	; 0xc0
 8000eea:	0089      	lsls	r1, r1, #2
 8000eec:	430a      	orrs	r2, r1
 8000eee:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 10, 0b01, 0, 0b11); // LEDl1l2
 8000ef0:	23a0      	movs	r3, #160	; 0xa0
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6b      	ldr	r2, [pc, #428]	; (80010a4 <GPIO_Init+0x42c>)
 8000ef8:	401a      	ands	r2, r3
 8000efa:	23a0      	movs	r3, #160	; 0xa0
 8000efc:	05db      	lsls	r3, r3, #23
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0349      	lsls	r1, r1, #13
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	23a0      	movs	r3, #160	; 0xa0
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	05db      	lsls	r3, r3, #23
 8000f10:	4965      	ldr	r1, [pc, #404]	; (80010a8 <GPIO_Init+0x430>)
 8000f12:	400a      	ands	r2, r1
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	21c0      	movs	r1, #192	; 0xc0
 8000f22:	0389      	lsls	r1, r1, #14
 8000f24:	430a      	orrs	r2, r1
 8000f26:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 8, 0b01, 0, 0b11);  // LEDalarm
 8000f28:	23a0      	movs	r3, #160	; 0xa0
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a5f      	ldr	r2, [pc, #380]	; (80010ac <GPIO_Init+0x434>)
 8000f30:	401a      	ands	r2, r3
 8000f32:	23a0      	movs	r3, #160	; 0xa0
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	0249      	lsls	r1, r1, #9
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	23a0      	movs	r3, #160	; 0xa0
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	4959      	ldr	r1, [pc, #356]	; (80010b0 <GPIO_Init+0x438>)
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	23a0      	movs	r3, #160	; 0xa0
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	23a0      	movs	r3, #160	; 0xa0
 8000f56:	05db      	lsls	r3, r3, #23
 8000f58:	21c0      	movs	r1, #192	; 0xc0
 8000f5a:	0289      	lsls	r1, r1, #10
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOC, 15, 0b01, 0, 0b11); // pinEN
 8000f60:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <GPIO_Init+0x43c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	089a      	lsrs	r2, r3, #2
 8000f68:	4b52      	ldr	r3, [pc, #328]	; (80010b4 <GPIO_Init+0x43c>)
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	05c9      	lsls	r1, r1, #23
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	4b50      	ldr	r3, [pc, #320]	; (80010b4 <GPIO_Init+0x43c>)
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <GPIO_Init+0x43c>)
 8000f78:	494f      	ldr	r1, [pc, #316]	; (80010b8 <GPIO_Init+0x440>)
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	4b4d      	ldr	r3, [pc, #308]	; (80010b4 <GPIO_Init+0x43c>)
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <GPIO_Init+0x43c>)
 8000f84:	21c0      	movs	r1, #192	; 0xc0
 8000f86:	0609      	lsls	r1, r1, #24
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	609a      	str	r2, [r3, #8]

	// Налаштування кнопок із EXTI
	CONFIGURE_GPIO(GPIOA, 0, 0b00, 0, 0b11); // decrement
 8000f8c:	23a0      	movs	r3, #160	; 0xa0
 8000f8e:	05db      	lsls	r3, r3, #23
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	23a0      	movs	r3, #160	; 0xa0
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	2103      	movs	r1, #3
 8000f98:	438a      	bics	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	23a0      	movs	r3, #160	; 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	23a0      	movs	r3, #160	; 0xa0
 8000fa4:	05db      	lsls	r3, r3, #23
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	438a      	bics	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	23a0      	movs	r3, #160	; 0xa0
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	23a0      	movs	r3, #160	; 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(0, 0b000, 0, 1);		 // EXTI для decrement
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <GPIO_Init+0x444>)
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <GPIO_Init+0x444>)
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <GPIO_Init+0x448>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <GPIO_Init+0x448>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <GPIO_Init+0x448>)
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <GPIO_Init+0x448>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOA, 1, 0b00, 0, 0b11); // enter
 8000fe0:	23a0      	movs	r3, #160	; 0xa0
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	23a0      	movs	r3, #160	; 0xa0
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	210c      	movs	r1, #12
 8000fec:	438a      	bics	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	23a0      	movs	r3, #160	; 0xa0
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	23a0      	movs	r3, #160	; 0xa0
 8000ff8:	05db      	lsls	r3, r3, #23
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	23a0      	movs	r3, #160	; 0xa0
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	23a0      	movs	r3, #160	; 0xa0
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	210c      	movs	r1, #12
 800100c:	430a      	orrs	r2, r1
 800100e:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(1, 0b000, 0, 1);		 // EXTI для enter
 8001010:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <GPIO_Init+0x444>)
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <GPIO_Init+0x444>)
 8001016:	21f0      	movs	r1, #240	; 0xf0
 8001018:	438a      	bics	r2, r1
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <GPIO_Init+0x448>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <GPIO_Init+0x448>)
 8001022:	2102      	movs	r1, #2
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <GPIO_Init+0x448>)
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <GPIO_Init+0x448>)
 800102e:	2102      	movs	r1, #2
 8001030:	430a      	orrs	r2, r1
 8001032:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOA, 2, 0b00, 0, 0b11); // increment
 8001034:	23a0      	movs	r3, #160	; 0xa0
 8001036:	05db      	lsls	r3, r3, #23
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	23a0      	movs	r3, #160	; 0xa0
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	2130      	movs	r1, #48	; 0x30
 8001040:	438a      	bics	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	23a0      	movs	r3, #160	; 0xa0
 8001046:	05db      	lsls	r3, r3, #23
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	2104      	movs	r1, #4
 8001050:	438a      	bics	r2, r1
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	23a0      	movs	r3, #160	; 0xa0
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2130      	movs	r1, #48	; 0x30
 8001060:	430a      	orrs	r2, r1
 8001062:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(2, 0b000, 0, 1);		 // EXTI для increment
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <GPIO_Init+0x444>)
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <GPIO_Init+0x444>)
 800106a:	4916      	ldr	r1, [pc, #88]	; (80010c4 <GPIO_Init+0x44c>)
 800106c:	400a      	ands	r2, r1
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	e02a      	b.n	80010c8 <GPIO_Init+0x450>
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40021000 	.word	0x40021000
 8001078:	ffff3fff 	.word	0xffff3fff
 800107c:	50000400 	.word	0x50000400
 8001080:	ffffcfff 	.word	0xffffcfff
 8001084:	fffff3ff 	.word	0xfffff3ff
 8001088:	ff3fffff 	.word	0xff3fffff
 800108c:	fffff7ff 	.word	0xfffff7ff
 8001090:	fff3ffff 	.word	0xfff3ffff
 8001094:	fffffdff 	.word	0xfffffdff
 8001098:	fffffcff 	.word	0xfffffcff
 800109c:	fcffffff 	.word	0xfcffffff
 80010a0:	ffffefff 	.word	0xffffefff
 80010a4:	ffcfffff 	.word	0xffcfffff
 80010a8:	fffffbff 	.word	0xfffffbff
 80010ac:	fffcffff 	.word	0xfffcffff
 80010b0:	fffffeff 	.word	0xfffffeff
 80010b4:	50000800 	.word	0x50000800
 80010b8:	ffff7fff 	.word	0xffff7fff
 80010bc:	40010000 	.word	0x40010000
 80010c0:	40010400 	.word	0x40010400
 80010c4:	fffff0ff 	.word	0xfffff0ff
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <GPIO_Init+0x4c8>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <GPIO_Init+0x4c8>)
 80010ce:	2104      	movs	r1, #4
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <GPIO_Init+0x4c8>)
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <GPIO_Init+0x4c8>)
 80010da:	2104      	movs	r1, #4
 80010dc:	430a      	orrs	r2, r1
 80010de:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOB, 9, 0b00, 0, 0b11); // pwr
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <GPIO_Init+0x4cc>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <GPIO_Init+0x4cc>)
 80010e6:	4918      	ldr	r1, [pc, #96]	; (8001148 <GPIO_Init+0x4d0>)
 80010e8:	400a      	ands	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <GPIO_Init+0x4cc>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <GPIO_Init+0x4cc>)
 80010f2:	4916      	ldr	r1, [pc, #88]	; (800114c <GPIO_Init+0x4d4>)
 80010f4:	400a      	ands	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <GPIO_Init+0x4cc>)
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <GPIO_Init+0x4cc>)
 80010fe:	21c0      	movs	r1, #192	; 0xc0
 8001100:	0309      	lsls	r1, r1, #12
 8001102:	430a      	orrs	r2, r1
 8001104:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(9, 0b000, 2, 3);		 // EXTI для pwr з обробкою по зростанню
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <GPIO_Init+0x4d8>)
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <GPIO_Init+0x4d8>)
 800110c:	21f0      	movs	r1, #240	; 0xf0
 800110e:	438a      	bics	r2, r1
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <GPIO_Init+0x4c8>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <GPIO_Init+0x4c8>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0089      	lsls	r1, r1, #2
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <GPIO_Init+0x4c8>)
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <GPIO_Init+0x4c8>)
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	0089      	lsls	r1, r1, #2
 800112a:	430a      	orrs	r2, r1
 800112c:	60da      	str	r2, [r3, #12]

	/* Включення переривання */                                                                                                   \
	NVIC_EnableIRQ(EXTI0_1_IRQn);                                                                                                  \
 800112e:	2005      	movs	r0, #5
 8001130:	f7ff f960 	bl	80003f4 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001134:	2006      	movs	r0, #6
 8001136:	f7ff f95d 	bl	80003f4 <__NVIC_EnableIRQ>
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40010400 	.word	0x40010400
 8001144:	50000400 	.word	0x50000400
 8001148:	fff3ffff 	.word	0xfff3ffff
 800114c:	fffffdff 	.word	0xfffffdff
 8001150:	40010000 	.word	0x40010000

08001154 <LowPowerMode>:

void LowPowerMode(uint8_t status)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	701a      	strb	r2, [r3, #0]
    if(status){// Встановлюємо режим STOP з RTC працюючим у нормальному режимі
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d000      	beq.n	800116a <LowPowerMode+0x16>
//    PWR->CR |= PWR_CR_LPDS;  // Налаштовуємо режим глибокого сну
//    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;  // Налаштовуємо контролер для глибокого сну
//
//    // Входимо у режим STOP, поки не відбудеться переривання від RTC чи EXTI
    __WFI();  // Чекаємо на переривання для виходу з режиму STOP
 8001168:	bf30      	wfi
    }else{
//    SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;  // Вимикаємо режим глибокого сну
//    PWR->CR &= ~PWR_CR_LPDS;  // Відновлюємо нормальний режим живлення
}
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <Delay_ms>:

void Delay_ms(uint16_t Miliseconds)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	0002      	movs	r2, r0
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	801a      	strh	r2, [r3, #0]
	Delay_counter_ms = Miliseconds;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <Delay_ms+0x38>)
 8001182:	1dba      	adds	r2, r7, #6
 8001184:	8812      	ldrh	r2, [r2, #0]
 8001186:	801a      	strh	r2, [r3, #0]
	while (Delay_counter_ms != 0)
 8001188:	e006      	b.n	8001198 <Delay_ms+0x24>
	{
		Delay_counter_ms--;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <Delay_ms+0x38>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <Delay_ms+0x38>)
 8001196:	801a      	strh	r2, [r3, #0]
	while (Delay_counter_ms != 0)
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <Delay_ms+0x38>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f3      	bne.n	800118a <Delay_ms+0x16>
	}
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000013c 	.word	0x2000013c

080011b0 <intToChar>:

	return result * fractionalMultiplier;
}

char intToChar(uint8_t num)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	0002      	movs	r2, r0
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	701a      	strb	r2, [r3, #0]
	switch (num)
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d818      	bhi.n	80011f6 <intToChar+0x46>
 80011c4:	009a      	lsls	r2, r3, #2
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <intToChar+0x50>)
 80011c8:	18d3      	adds	r3, r2, r3
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	469f      	mov	pc, r3
	{
	case 0:
		return '0';
 80011ce:	2330      	movs	r3, #48	; 0x30
 80011d0:	e012      	b.n	80011f8 <intToChar+0x48>
	case 1:
		return '1';
 80011d2:	2331      	movs	r3, #49	; 0x31
 80011d4:	e010      	b.n	80011f8 <intToChar+0x48>
	case 2:
		return '2';
 80011d6:	2332      	movs	r3, #50	; 0x32
 80011d8:	e00e      	b.n	80011f8 <intToChar+0x48>
	case 3:
		return '3';
 80011da:	2333      	movs	r3, #51	; 0x33
 80011dc:	e00c      	b.n	80011f8 <intToChar+0x48>
	case 4:
		return '4';
 80011de:	2334      	movs	r3, #52	; 0x34
 80011e0:	e00a      	b.n	80011f8 <intToChar+0x48>
	case 5:
		return '5';
 80011e2:	2335      	movs	r3, #53	; 0x35
 80011e4:	e008      	b.n	80011f8 <intToChar+0x48>
	case 6:
		return '6';
 80011e6:	2336      	movs	r3, #54	; 0x36
 80011e8:	e006      	b.n	80011f8 <intToChar+0x48>
	case 7:
		return '7';
 80011ea:	2337      	movs	r3, #55	; 0x37
 80011ec:	e004      	b.n	80011f8 <intToChar+0x48>
	case 8:
		return '8';
 80011ee:	2338      	movs	r3, #56	; 0x38
 80011f0:	e002      	b.n	80011f8 <intToChar+0x48>
	case 9:
		return '9';
 80011f2:	2339      	movs	r3, #57	; 0x39
 80011f4:	e000      	b.n	80011f8 <intToChar+0x48>
	default:
		return '?'; // Повертаємо '?' для невідомого числа
 80011f6:	233f      	movs	r3, #63	; 0x3f
	}
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	08002658 	.word	0x08002658

08001204 <writeCHARSEG>:

void writeCHARSEG(char CHAR, uint8_t seg)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	0002      	movs	r2, r0
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	1dbb      	adds	r3, r7, #6
 8001212:	1c0a      	adds	r2, r1, #0
 8001214:	701a      	strb	r2, [r3, #0]
	switch (seg)
 8001216:	1dbb      	adds	r3, r7, #6
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d042      	beq.n	80012a4 <writeCHARSEG+0xa0>
 800121e:	dc54      	bgt.n	80012ca <writeCHARSEG+0xc6>
 8001220:	2b02      	cmp	r3, #2
 8001222:	d02b      	beq.n	800127c <writeCHARSEG+0x78>
 8001224:	dc51      	bgt.n	80012ca <writeCHARSEG+0xc6>
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <writeCHARSEG+0x2c>
 800122a:	2b01      	cmp	r3, #1
 800122c:	d013      	beq.n	8001256 <writeCHARSEG+0x52>
 800122e:	e04c      	b.n	80012ca <writeCHARSEG+0xc6>
	{
	case 0:
		LEDD1_ON();
 8001230:	23a0      	movs	r3, #160	; 0xa0
 8001232:	05db      	lsls	r3, r3, #23
 8001234:	2208      	movs	r2, #8
 8001236:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	0352      	lsls	r2, r2, #13
 8001240:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 8001242:	23a0      	movs	r3, #160	; 0xa0
 8001244:	05db      	lsls	r3, r3, #23
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	0552      	lsls	r2, r2, #21
 800124a:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 800124c:	4bee      	ldr	r3, [pc, #952]	; (8001608 <writeCHARSEG+0x404>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	0352      	lsls	r2, r2, #13
 8001252:	619a      	str	r2, [r3, #24]
		break;
 8001254:	e04d      	b.n	80012f2 <writeCHARSEG+0xee>
	case 1:
		LEDD1_OFF();
 8001256:	23a0      	movs	r3, #160	; 0xa0
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	0312      	lsls	r2, r2, #12
 800125e:	619a      	str	r2, [r3, #24]
		LEDD2_ON();
 8001260:	23a0      	movs	r3, #160	; 0xa0
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	2210      	movs	r2, #16
 8001266:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 8001268:	23a0      	movs	r3, #160	; 0xa0
 800126a:	05db      	lsls	r3, r3, #23
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	0552      	lsls	r2, r2, #21
 8001270:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 8001272:	4be5      	ldr	r3, [pc, #916]	; (8001608 <writeCHARSEG+0x404>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	0352      	lsls	r2, r2, #13
 8001278:	619a      	str	r2, [r3, #24]
		break;
 800127a:	e03a      	b.n	80012f2 <writeCHARSEG+0xee>
	case 2:
		LEDD1_OFF();
 800127c:	23a0      	movs	r3, #160	; 0xa0
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	0312      	lsls	r2, r2, #12
 8001284:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 8001286:	23a0      	movs	r3, #160	; 0xa0
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	0352      	lsls	r2, r2, #13
 800128e:	619a      	str	r2, [r3, #24]
		LEDD3_ON();
 8001290:	23a0      	movs	r3, #160	; 0xa0
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	0152      	lsls	r2, r2, #5
 8001298:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 800129a:	4bdb      	ldr	r3, [pc, #876]	; (8001608 <writeCHARSEG+0x404>)
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	0352      	lsls	r2, r2, #13
 80012a0:	619a      	str	r2, [r3, #24]
		break;
 80012a2:	e026      	b.n	80012f2 <writeCHARSEG+0xee>
	case 3:
		LEDD1_OFF();
 80012a4:	23a0      	movs	r3, #160	; 0xa0
 80012a6:	05db      	lsls	r3, r3, #23
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	0312      	lsls	r2, r2, #12
 80012ac:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 80012ae:	23a0      	movs	r3, #160	; 0xa0
 80012b0:	05db      	lsls	r3, r3, #23
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0352      	lsls	r2, r2, #13
 80012b6:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 80012b8:	23a0      	movs	r3, #160	; 0xa0
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	0552      	lsls	r2, r2, #21
 80012c0:	619a      	str	r2, [r3, #24]
		LEDD4_ON();
 80012c2:	4bd1      	ldr	r3, [pc, #836]	; (8001608 <writeCHARSEG+0x404>)
 80012c4:	2210      	movs	r2, #16
 80012c6:	619a      	str	r2, [r3, #24]
		break;
 80012c8:	e013      	b.n	80012f2 <writeCHARSEG+0xee>
	default:
		LEDD1_OFF();
 80012ca:	23a0      	movs	r3, #160	; 0xa0
 80012cc:	05db      	lsls	r3, r3, #23
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	0312      	lsls	r2, r2, #12
 80012d2:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 80012d4:	23a0      	movs	r3, #160	; 0xa0
 80012d6:	05db      	lsls	r3, r3, #23
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	0352      	lsls	r2, r2, #13
 80012dc:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 80012de:	23a0      	movs	r3, #160	; 0xa0
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	0552      	lsls	r2, r2, #21
 80012e6:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 80012e8:	4bc7      	ldr	r3, [pc, #796]	; (8001608 <writeCHARSEG+0x404>)
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	0352      	lsls	r2, r2, #13
 80012ee:	619a      	str	r2, [r3, #24]
		break;
 80012f0:	46c0      	nop			; (mov r8, r8)
	}
	switch (CHAR)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	3b2e      	subs	r3, #46	; 0x2e
 80012f8:	2b31      	cmp	r3, #49	; 0x31
 80012fa:	d900      	bls.n	80012fe <writeCHARSEG+0xfa>
 80012fc:	e1ca      	b.n	8001694 <writeCHARSEG+0x490>
 80012fe:	009a      	lsls	r2, r3, #2
 8001300:	4bc2      	ldr	r3, [pc, #776]	; (800160c <writeCHARSEG+0x408>)
 8001302:	18d3      	adds	r3, r2, r3
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	469f      	mov	pc, r3
	{
	case 'P':
		LEDa_ON();
 8001308:	23a0      	movs	r3, #160	; 0xa0
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001310:	4bbd      	ldr	r3, [pc, #756]	; (8001608 <writeCHARSEG+0x404>)
 8001312:	2202      	movs	r2, #2
 8001314:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 8001316:	23a0      	movs	r3, #160	; 0xa0
 8001318:	05db      	lsls	r3, r3, #23
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	03d2      	lsls	r2, r2, #15
 800131e:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 8001320:	23a0      	movs	r3, #160	; 0xa0
 8001322:	05db      	lsls	r3, r3, #23
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0392      	lsls	r2, r2, #14
 8001328:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800132a:	23a0      	movs	r3, #160	; 0xa0
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001334:	23a0      	movs	r3, #160	; 0xa0
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 800133e:	4bb2      	ldr	r3, [pc, #712]	; (8001608 <writeCHARSEG+0x404>)
 8001340:	2201      	movs	r2, #1
 8001342:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001344:	4bb0      	ldr	r3, [pc, #704]	; (8001608 <writeCHARSEG+0x404>)
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	0312      	lsls	r2, r2, #12
 800134a:	619a      	str	r2, [r3, #24]
		break;
 800134c:	e1c8      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '_':
		LEDa_OFF();
 800134e:	23a0      	movs	r3, #160	; 0xa0
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	0412      	lsls	r2, r2, #16
 8001356:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001358:	4bab      	ldr	r3, [pc, #684]	; (8001608 <writeCHARSEG+0x404>)
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	0292      	lsls	r2, r2, #10
 800135e:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	03d2      	lsls	r2, r2, #15
 8001368:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 800136a:	23a0      	movs	r3, #160	; 0xa0
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	2220      	movs	r2, #32
 8001370:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001372:	23a0      	movs	r3, #160	; 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	0512      	lsls	r2, r2, #20
 800137a:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 800137c:	23a0      	movs	r3, #160	; 0xa0
 800137e:	05db      	lsls	r3, r3, #23
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0492      	lsls	r2, r2, #18
 8001384:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001386:	4ba0      	ldr	r3, [pc, #640]	; (8001608 <writeCHARSEG+0x404>)
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	0252      	lsls	r2, r2, #9
 800138c:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800138e:	4b9e      	ldr	r3, [pc, #632]	; (8001608 <writeCHARSEG+0x404>)
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	0312      	lsls	r2, r2, #12
 8001394:	619a      	str	r2, [r3, #24]
		break;
 8001396:	e1a3      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '.':
		LEDa_OFF();
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 80013a2:	4b99      	ldr	r3, [pc, #612]	; (8001608 <writeCHARSEG+0x404>)
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	0292      	lsls	r2, r2, #10
 80013a8:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	03d2      	lsls	r2, r2, #15
 80013b2:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80013b4:	23a0      	movs	r3, #160	; 0xa0
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0392      	lsls	r2, r2, #14
 80013bc:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80013be:	23a0      	movs	r3, #160	; 0xa0
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	0512      	lsls	r2, r2, #20
 80013c6:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80013c8:	23a0      	movs	r3, #160	; 0xa0
 80013ca:	05db      	lsls	r3, r3, #23
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	0492      	lsls	r2, r2, #18
 80013d0:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80013d2:	4b8d      	ldr	r3, [pc, #564]	; (8001608 <writeCHARSEG+0x404>)
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	0252      	lsls	r2, r2, #9
 80013d8:	619a      	str	r2, [r3, #24]
		LEDdp_ON();
 80013da:	4b8b      	ldr	r3, [pc, #556]	; (8001608 <writeCHARSEG+0x404>)
 80013dc:	2208      	movs	r2, #8
 80013de:	619a      	str	r2, [r3, #24]
		break;
 80013e0:	e17e      	b.n	80016e0 <writeCHARSEG+0x4dc>

	case '0':
		LEDa_ON();
 80013e2:	23a0      	movs	r3, #160	; 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80013ea:	4b87      	ldr	r3, [pc, #540]	; (8001608 <writeCHARSEG+0x404>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80013f0:	23a0      	movs	r3, #160	; 0xa0
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	2240      	movs	r2, #64	; 0x40
 80013f6:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 80013f8:	23a0      	movs	r3, #160	; 0xa0
 80013fa:	05db      	lsls	r3, r3, #23
 80013fc:	2220      	movs	r2, #32
 80013fe:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 800140a:	23a0      	movs	r3, #160	; 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001414:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <writeCHARSEG+0x404>)
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	0252      	lsls	r2, r2, #9
 800141a:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800141c:	4b7a      	ldr	r3, [pc, #488]	; (8001608 <writeCHARSEG+0x404>)
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	0312      	lsls	r2, r2, #12
 8001422:	619a      	str	r2, [r3, #24]
		break;
 8001424:	e15c      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '1':
		LEDa_OFF();
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0412      	lsls	r2, r2, #16
 800142e:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001430:	4b75      	ldr	r3, [pc, #468]	; (8001608 <writeCHARSEG+0x404>)
 8001432:	2202      	movs	r2, #2
 8001434:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 800143e:	23a0      	movs	r3, #160	; 0xa0
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	0392      	lsls	r2, r2, #14
 8001446:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001448:	23a0      	movs	r3, #160	; 0xa0
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	0512      	lsls	r2, r2, #20
 8001450:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	0492      	lsls	r2, r2, #18
 800145a:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 800145c:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <writeCHARSEG+0x404>)
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	0252      	lsls	r2, r2, #9
 8001462:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001464:	4b68      	ldr	r3, [pc, #416]	; (8001608 <writeCHARSEG+0x404>)
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	0312      	lsls	r2, r2, #12
 800146a:	619a      	str	r2, [r3, #24]
		break;
 800146c:	e138      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '2':
		LEDa_ON();
 800146e:	23a0      	movs	r3, #160	; 0xa0
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001476:	4b64      	ldr	r3, [pc, #400]	; (8001608 <writeCHARSEG+0x404>)
 8001478:	2202      	movs	r2, #2
 800147a:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 800147c:	23a0      	movs	r3, #160	; 0xa0
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	03d2      	lsls	r2, r2, #15
 8001484:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	2220      	movs	r2, #32
 800148c:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001498:	23a0      	movs	r3, #160	; 0xa0
 800149a:	05db      	lsls	r3, r3, #23
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	0492      	lsls	r2, r2, #18
 80014a0:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80014a2:	4b59      	ldr	r3, [pc, #356]	; (8001608 <writeCHARSEG+0x404>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80014a8:	4b57      	ldr	r3, [pc, #348]	; (8001608 <writeCHARSEG+0x404>)
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	0312      	lsls	r2, r2, #12
 80014ae:	619a      	str	r2, [r3, #24]
		break;
 80014b0:	e116      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '3':
		LEDa_ON();
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80014ba:	4b53      	ldr	r3, [pc, #332]	; (8001608 <writeCHARSEG+0x404>)
 80014bc:	2202      	movs	r2, #2
 80014be:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80014c0:	23a0      	movs	r3, #160	; 0xa0
 80014c2:	05db      	lsls	r3, r3, #23
 80014c4:	2240      	movs	r2, #64	; 0x40
 80014c6:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	2220      	movs	r2, #32
 80014ce:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80014d0:	23a0      	movs	r3, #160	; 0xa0
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	0512      	lsls	r2, r2, #20
 80014d8:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80014da:	23a0      	movs	r3, #160	; 0xa0
 80014dc:	05db      	lsls	r3, r3, #23
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	0492      	lsls	r2, r2, #18
 80014e2:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80014e4:	4b48      	ldr	r3, [pc, #288]	; (8001608 <writeCHARSEG+0x404>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <writeCHARSEG+0x404>)
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0312      	lsls	r2, r2, #12
 80014f0:	619a      	str	r2, [r3, #24]
		break;
 80014f2:	e0f5      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '4':
		LEDa_OFF();
 80014f4:	23a0      	movs	r3, #160	; 0xa0
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	0412      	lsls	r2, r2, #16
 80014fc:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <writeCHARSEG+0x404>)
 8001500:	2202      	movs	r2, #2
 8001502:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001504:	23a0      	movs	r3, #160	; 0xa0
 8001506:	05db      	lsls	r3, r3, #23
 8001508:	2240      	movs	r2, #64	; 0x40
 800150a:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 800150c:	23a0      	movs	r3, #160	; 0xa0
 800150e:	05db      	lsls	r3, r3, #23
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	0392      	lsls	r2, r2, #14
 8001514:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001516:	23a0      	movs	r3, #160	; 0xa0
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	0512      	lsls	r2, r2, #20
 800151e:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001520:	23a0      	movs	r3, #160	; 0xa0
 8001522:	05db      	lsls	r3, r3, #23
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <writeCHARSEG+0x404>)
 800152c:	2201      	movs	r2, #1
 800152e:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001530:	4b35      	ldr	r3, [pc, #212]	; (8001608 <writeCHARSEG+0x404>)
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	0312      	lsls	r2, r2, #12
 8001536:	619a      	str	r2, [r3, #24]
		break;
 8001538:	e0d2      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '5':
		LEDa_ON();
 800153a:	23a0      	movs	r3, #160	; 0xa0
 800153c:	05db      	lsls	r3, r3, #23
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <writeCHARSEG+0x404>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	0292      	lsls	r2, r2, #10
 8001548:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800154a:	23a0      	movs	r3, #160	; 0xa0
 800154c:	05db      	lsls	r3, r3, #23
 800154e:	2240      	movs	r2, #64	; 0x40
 8001550:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001552:	23a0      	movs	r3, #160	; 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	2220      	movs	r2, #32
 8001558:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 800155a:	23a0      	movs	r3, #160	; 0xa0
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	0512      	lsls	r2, r2, #20
 8001562:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001564:	23a0      	movs	r3, #160	; 0xa0
 8001566:	05db      	lsls	r3, r3, #23
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <writeCHARSEG+0x404>)
 8001570:	2201      	movs	r2, #1
 8001572:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <writeCHARSEG+0x404>)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	0312      	lsls	r2, r2, #12
 800157a:	619a      	str	r2, [r3, #24]
		break;
 800157c:	e0b0      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '6':
		LEDa_ON();
 800157e:	23a0      	movs	r3, #160	; 0xa0
 8001580:	05db      	lsls	r3, r3, #23
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <writeCHARSEG+0x404>)
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	0292      	lsls	r2, r2, #10
 800158c:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800158e:	23a0      	movs	r3, #160	; 0xa0
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001596:	23a0      	movs	r3, #160	; 0xa0
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	2220      	movs	r2, #32
 800159c:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800159e:	23a0      	movs	r3, #160	; 0xa0
 80015a0:	05db      	lsls	r3, r3, #23
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 80015a8:	23a0      	movs	r3, #160	; 0xa0
 80015aa:	05db      	lsls	r3, r3, #23
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <writeCHARSEG+0x404>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <writeCHARSEG+0x404>)
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	0312      	lsls	r2, r2, #12
 80015be:	619a      	str	r2, [r3, #24]
		break;
 80015c0:	e08e      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '7':
		LEDa_ON();
 80015c2:	23a0      	movs	r3, #160	; 0xa0
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <writeCHARSEG+0x404>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80015d0:	23a0      	movs	r3, #160	; 0xa0
 80015d2:	05db      	lsls	r3, r3, #23
 80015d4:	2240      	movs	r2, #64	; 0x40
 80015d6:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80015d8:	23a0      	movs	r3, #160	; 0xa0
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	0392      	lsls	r2, r2, #14
 80015e0:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80015e2:	23a0      	movs	r3, #160	; 0xa0
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	0512      	lsls	r2, r2, #20
 80015ea:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80015ec:	23a0      	movs	r3, #160	; 0xa0
 80015ee:	05db      	lsls	r3, r3, #23
 80015f0:	2280      	movs	r2, #128	; 0x80
 80015f2:	0492      	lsls	r2, r2, #18
 80015f4:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <writeCHARSEG+0x404>)
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	0252      	lsls	r2, r2, #9
 80015fc:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80015fe:	4b02      	ldr	r3, [pc, #8]	; (8001608 <writeCHARSEG+0x404>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	0312      	lsls	r2, r2, #12
 8001604:	619a      	str	r2, [r3, #24]
		break;
 8001606:	e06b      	b.n	80016e0 <writeCHARSEG+0x4dc>
 8001608:	50000400 	.word	0x50000400
 800160c:	08002680 	.word	0x08002680
	case '8':
		LEDa_ON();
 8001610:	23a0      	movs	r3, #160	; 0xa0
 8001612:	05db      	lsls	r3, r3, #23
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <writeCHARSEG+0x4e4>)
 800161a:	2202      	movs	r2, #2
 800161c:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001626:	23a0      	movs	r3, #160	; 0xa0
 8001628:	05db      	lsls	r3, r3, #23
 800162a:	2220      	movs	r2, #32
 800162c:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001638:	23a0      	movs	r3, #160	; 0xa0
 800163a:	05db      	lsls	r3, r3, #23
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001642:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <writeCHARSEG+0x4e4>)
 8001644:	2201      	movs	r2, #1
 8001646:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <writeCHARSEG+0x4e4>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	0312      	lsls	r2, r2, #12
 800164e:	619a      	str	r2, [r3, #24]
		break;
 8001650:	e046      	b.n	80016e0 <writeCHARSEG+0x4dc>
	case '9':
		LEDa_ON();
 8001652:	23a0      	movs	r3, #160	; 0xa0
 8001654:	05db      	lsls	r3, r3, #23
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <writeCHARSEG+0x4e4>)
 800165c:	2202      	movs	r2, #2
 800165e:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001660:	23a0      	movs	r3, #160	; 0xa0
 8001662:	05db      	lsls	r3, r3, #23
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	05db      	lsls	r3, r3, #23
 800166c:	2220      	movs	r2, #32
 800166e:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001670:	23a0      	movs	r3, #160	; 0xa0
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	0512      	lsls	r2, r2, #20
 8001678:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 800167a:	23a0      	movs	r3, #160	; 0xa0
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <writeCHARSEG+0x4e4>)
 8001686:	2201      	movs	r2, #1
 8001688:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <writeCHARSEG+0x4e4>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0312      	lsls	r2, r2, #12
 8001690:	619a      	str	r2, [r3, #24]
		break;
 8001692:	e025      	b.n	80016e0 <writeCHARSEG+0x4dc>
	default:
		LEDa_OFF();
 8001694:	23a0      	movs	r3, #160	; 0xa0
 8001696:	05db      	lsls	r3, r3, #23
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	0412      	lsls	r2, r2, #16
 800169c:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <writeCHARSEG+0x4e4>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0292      	lsls	r2, r2, #10
 80016a4:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 80016a6:	23a0      	movs	r3, #160	; 0xa0
 80016a8:	05db      	lsls	r3, r3, #23
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	03d2      	lsls	r2, r2, #15
 80016ae:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80016b0:	23a0      	movs	r3, #160	; 0xa0
 80016b2:	05db      	lsls	r3, r3, #23
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	0392      	lsls	r2, r2, #14
 80016b8:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80016ba:	23a0      	movs	r3, #160	; 0xa0
 80016bc:	05db      	lsls	r3, r3, #23
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	0512      	lsls	r2, r2, #20
 80016c2:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80016c4:	23a0      	movs	r3, #160	; 0xa0
 80016c6:	05db      	lsls	r3, r3, #23
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	0492      	lsls	r2, r2, #18
 80016cc:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <writeCHARSEG+0x4e4>)
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	0252      	lsls	r2, r2, #9
 80016d4:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <writeCHARSEG+0x4e4>)
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	0312      	lsls	r2, r2, #12
 80016dc:	619a      	str	r2, [r3, #24]
		break;
 80016de:	46c0      	nop			; (mov r8, r8)
	}
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	50000400 	.word	0x50000400

080016ec <Clock>:
		TIM21->CCR1 = 0;
	}
}

uint8_t Clock()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	char tmpClock[4] = {};
 80016f2:	003b      	movs	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
	uint8_t j = 0;
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	tmpClock[0] = READ_BIT(RTC->TR, RTC_TR_HT);
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <Clock+0x148>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	003b      	movs	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
	if (tmpClock[0] == 0)
 8001708:	003b      	movs	r3, r7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <Clock+0x2a>
	{
		j = 1;
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
	}
	tmpClock[1] = READ_BIT(RTC->TR, RTC_TR_HU);
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <Clock+0x148>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	003b      	movs	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	705a      	strb	r2, [r3, #1]
	tmpClock[2] = READ_BIT(RTC->TR, RTC_TR_MNT);
 8001720:	4b44      	ldr	r3, [pc, #272]	; (8001834 <Clock+0x148>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	003b      	movs	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	709a      	strb	r2, [r3, #2]
	tmpClock[3] = READ_BIT(RTC->TR, RTC_TR_MNU);
 800172a:	4b42      	ldr	r3, [pc, #264]	; (8001834 <Clock+0x148>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	003b      	movs	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	70da      	strb	r2, [r3, #3]

	if (((READ_BIT(RTC->TR, RTC_TR_HT) * 10 + READ_BIT(RTC->TR, RTC_TR_HU) > 5) && (READ_BIT(RTC->TR, RTC_TR_HT) * 10 + READ_BIT(RTC->TR, RTC_TR_HU) < 22)) || flagDecrementButton || flagEnterButton || flagIncrementButton || flagDecrementButtonLong || flagEnterButtonLong || flagIncrementButtonLong)
 8001734:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <Clock+0x148>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	23c0      	movs	r3, #192	; 0xc0
 800173a:	039b      	lsls	r3, r3, #14
 800173c:	401a      	ands	r2, r3
 800173e:	0013      	movs	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	189b      	adds	r3, r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	0019      	movs	r1, r3
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <Clock+0x148>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	23f0      	movs	r3, #240	; 0xf0
 800174e:	031b      	lsls	r3, r3, #12
 8001750:	4013      	ands	r3, r2
 8001752:	18cb      	adds	r3, r1, r3
 8001754:	2b05      	cmp	r3, #5
 8001756:	d911      	bls.n	800177c <Clock+0x90>
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <Clock+0x148>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	23c0      	movs	r3, #192	; 0xc0
 800175e:	039b      	lsls	r3, r3, #14
 8001760:	401a      	ands	r2, r3
 8001762:	0013      	movs	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	189b      	adds	r3, r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	0019      	movs	r1, r3
 800176c:	4b31      	ldr	r3, [pc, #196]	; (8001834 <Clock+0x148>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	23f0      	movs	r3, #240	; 0xf0
 8001772:	031b      	lsls	r3, r3, #12
 8001774:	4013      	ands	r3, r2
 8001776:	18cb      	adds	r3, r1, r3
 8001778:	2b15      	cmp	r3, #21
 800177a:	d917      	bls.n	80017ac <Clock+0xc0>
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <Clock+0x14c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d113      	bne.n	80017ac <Clock+0xc0>
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <Clock+0x150>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10f      	bne.n	80017ac <Clock+0xc0>
 800178c:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <Clock+0x154>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10b      	bne.n	80017ac <Clock+0xc0>
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <Clock+0x158>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <Clock+0xc0>
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <Clock+0x15c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <Clock+0xc0>
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <Clock+0x160>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d032      	beq.n	8001812 <Clock+0x126>
	{
		if(SysTimer_ms%4==0 && j == 0)
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <Clock+0x164>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	d109      	bne.n	80017ca <Clock+0xde>
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <Clock+0xde>
						writeCHARSEG(tmpClock[0], 0);
 80017be:	003b      	movs	r3, r7
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2100      	movs	r1, #0
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff fd1d 	bl	8001204 <writeCHARSEG>
		if(SysTimer_ms%4==1)
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <Clock+0x164>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2203      	movs	r2, #3
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d105      	bne.n	80017e2 <Clock+0xf6>
						writeCHARSEG(tmpClock[1], 1);
 80017d6:	003b      	movs	r3, r7
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	2101      	movs	r1, #1
 80017dc:	0018      	movs	r0, r3
 80017de:	f7ff fd11 	bl	8001204 <writeCHARSEG>
		if(SysTimer_ms%4==2)
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <Clock+0x164>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2203      	movs	r2, #3
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d105      	bne.n	80017fa <Clock+0x10e>
						writeCHARSEG(tmpClock[2], 2);
 80017ee:	003b      	movs	r3, r7
 80017f0:	789b      	ldrb	r3, [r3, #2]
 80017f2:	2102      	movs	r1, #2
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff fd05 	bl	8001204 <writeCHARSEG>
		if(SysTimer_ms%4==3)
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <Clock+0x164>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2203      	movs	r2, #3
 8001800:	4013      	ands	r3, r2
 8001802:	2b03      	cmp	r3, #3
 8001804:	d105      	bne.n	8001812 <Clock+0x126>
						writeCHARSEG(tmpClock[3], 3);
 8001806:	003b      	movs	r3, r7
 8001808:	78db      	ldrb	r3, [r3, #3]
 800180a:	2103      	movs	r1, #3
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff fcf9 	bl	8001204 <writeCHARSEG>
	}
	return flagDecrementButtonLong && flagIncrementButtonLong ? 0 : 1;
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <Clock+0x158>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <Clock+0x136>
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <Clock+0x160>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <Clock+0x13a>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <Clock+0x13c>
 8001826:	2300      	movs	r3, #0
 8001828:	b2db      	uxtb	r3, r3
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40002800 	.word	0x40002800
 8001838:	2000012a 	.word	0x2000012a
 800183c:	2000012b 	.word	0x2000012b
 8001840:	20000129 	.word	0x20000129
 8001844:	2000012d 	.word	0x2000012d
 8001848:	2000012e 	.word	0x2000012e
 800184c:	2000012c 	.word	0x2000012c
 8001850:	20000138 	.word	0x20000138

08001854 <setTimeNow>:

void setTimeNow()
{
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	af00      	add	r7, sp, #0
	MODIFY_REG(RTC->TR,
 8001858:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <setTimeNow+0x134>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a4b      	ldr	r2, [pc, #300]	; (800198c <setTimeNow+0x138>)
 800185e:	4013      	ands	r3, r2
 8001860:	001c      	movs	r4, r3
 8001862:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <setTimeNow+0x13c>)
 8001864:	7c5b      	ldrb	r3, [r3, #17]
 8001866:	210a      	movs	r1, #10
 8001868:	0018      	movs	r0, r3
 800186a:	f7fe fc4d 	bl	8000108 <__udivsi3>
 800186e:	0003      	movs	r3, r0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	051d      	lsls	r5, r3, #20
 8001874:	4b46      	ldr	r3, [pc, #280]	; (8001990 <setTimeNow+0x13c>)
 8001876:	7c5b      	ldrb	r3, [r3, #17]
 8001878:	210a      	movs	r1, #10
 800187a:	0018      	movs	r0, r3
 800187c:	f7fe fcca 	bl	8000214 <__aeabi_uidivmod>
 8001880:	000b      	movs	r3, r1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	431d      	orrs	r5, r3
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <setTimeNow+0x13c>)
 800188a:	7edb      	ldrb	r3, [r3, #27]
 800188c:	210a      	movs	r1, #10
 800188e:	0018      	movs	r0, r3
 8001890:	f7fe fc3a 	bl	8000108 <__udivsi3>
 8001894:	0003      	movs	r3, r0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	031b      	lsls	r3, r3, #12
 800189a:	431d      	orrs	r5, r3
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <setTimeNow+0x13c>)
 800189e:	7edb      	ldrb	r3, [r3, #27]
 80018a0:	210a      	movs	r1, #10
 80018a2:	0018      	movs	r0, r3
 80018a4:	f7fe fcb6 	bl	8000214 <__aeabi_uidivmod>
 80018a8:	000b      	movs	r3, r1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	431d      	orrs	r5, r3
 80018b0:	4b37      	ldr	r3, [pc, #220]	; (8001990 <setTimeNow+0x13c>)
 80018b2:	2225      	movs	r2, #37	; 0x25
 80018b4:	5c9b      	ldrb	r3, [r3, r2]
 80018b6:	210a      	movs	r1, #10
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7fe fc25 	bl	8000108 <__udivsi3>
 80018be:	0003      	movs	r3, r0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	431d      	orrs	r5, r3
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <setTimeNow+0x13c>)
 80018c8:	2225      	movs	r2, #37	; 0x25
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	210a      	movs	r1, #10
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7fe fca0 	bl	8000214 <__aeabi_uidivmod>
 80018d4:	000b      	movs	r3, r1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	432b      	orrs	r3, r5
 80018da:	001a      	movs	r2, r3
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <setTimeNow+0x134>)
 80018de:	4322      	orrs	r2, r4
 80018e0:	601a      	str	r2, [r3, #0]
				   (menu[1].value % 10 << RTC_TR_HU_Pos) |	// Hour units (7 -> 17)
				   (menu[2].value / 10 << RTC_TR_MNT_Pos) | // Minute tens (3 -> 36)
				   (menu[2].value % 10 << RTC_TR_MNU_Pos) | // Minute units (6 -> 36)
				   (menu[3].value / 10 << RTC_TR_ST_Pos) |	// Second tens (0 -> 00)
				   (menu[3].value % 10 << RTC_TR_SU_Pos));	// Second units (0 -> 00)
	MODIFY_REG(RTC->DR,
 80018e2:	4b29      	ldr	r3, [pc, #164]	; (8001988 <setTimeNow+0x134>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a2b      	ldr	r2, [pc, #172]	; (8001994 <setTimeNow+0x140>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	001c      	movs	r4, r3
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <setTimeNow+0x13c>)
 80018ee:	2243      	movs	r2, #67	; 0x43
 80018f0:	5c9b      	ldrb	r3, [r3, r2]
 80018f2:	210a      	movs	r1, #10
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe fc07 	bl	8000108 <__udivsi3>
 80018fa:	0003      	movs	r3, r0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	051d      	lsls	r5, r3, #20
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <setTimeNow+0x13c>)
 8001902:	2243      	movs	r2, #67	; 0x43
 8001904:	5c9b      	ldrb	r3, [r3, r2]
 8001906:	210a      	movs	r1, #10
 8001908:	0018      	movs	r0, r3
 800190a:	f7fe fc83 	bl	8000214 <__aeabi_uidivmod>
 800190e:	000b      	movs	r3, r1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	431d      	orrs	r5, r3
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <setTimeNow+0x13c>)
 8001918:	2239      	movs	r2, #57	; 0x39
 800191a:	5c9b      	ldrb	r3, [r3, r2]
 800191c:	210a      	movs	r1, #10
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe fbf2 	bl	8000108 <__udivsi3>
 8001924:	0003      	movs	r3, r0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	031b      	lsls	r3, r3, #12
 800192a:	431d      	orrs	r5, r3
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <setTimeNow+0x13c>)
 800192e:	2239      	movs	r2, #57	; 0x39
 8001930:	5c9b      	ldrb	r3, [r3, r2]
 8001932:	210a      	movs	r1, #10
 8001934:	0018      	movs	r0, r3
 8001936:	f7fe fc6d 	bl	8000214 <__aeabi_uidivmod>
 800193a:	000b      	movs	r3, r1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	431d      	orrs	r5, r3
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <setTimeNow+0x13c>)
 8001944:	222f      	movs	r2, #47	; 0x2f
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	210a      	movs	r1, #10
 800194a:	0018      	movs	r0, r3
 800194c:	f7fe fbdc 	bl	8000108 <__udivsi3>
 8001950:	0003      	movs	r3, r0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	431d      	orrs	r5, r3
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <setTimeNow+0x13c>)
 800195a:	222f      	movs	r2, #47	; 0x2f
 800195c:	5c9b      	ldrb	r3, [r3, r2]
 800195e:	210a      	movs	r1, #10
 8001960:	0018      	movs	r0, r3
 8001962:	f7fe fc57 	bl	8000214 <__aeabi_uidivmod>
 8001966:	000b      	movs	r3, r1
 8001968:	b2db      	uxtb	r3, r3
 800196a:	002a      	movs	r2, r5
 800196c:	431a      	orrs	r2, r3
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <setTimeNow+0x13c>)
 8001970:	214d      	movs	r1, #77	; 0x4d
 8001972:	5c5b      	ldrb	r3, [r3, r1]
 8001974:	035b      	lsls	r3, r3, #13
 8001976:	4313      	orrs	r3, r2
 8001978:	001a      	movs	r2, r3
 800197a:	4b03      	ldr	r3, [pc, #12]	; (8001988 <setTimeNow+0x134>)
 800197c:	4322      	orrs	r2, r4
 800197e:	605a      	str	r2, [r3, #4]
				   (menu[5].value / 10 << RTC_DR_MT_Pos) | // Month tens (1 -> April)
				   (menu[5].value % 10 << RTC_DR_MU_Pos) | // Month units (0 -> April)
				   (menu[4].value / 10 << RTC_DR_DT_Pos) | // Day tens (0 -> 01)
				   (menu[4].value % 10 << RTC_DR_DU_Pos) | // Day units (1 -> 01)
				   (menu[7].value << RTC_DR_WDU_Pos));	   // Weekday (3 -> Monday)
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40002800 	.word	0x40002800
 800198c:	ffc08080 	.word	0xffc08080
 8001990:	20000000 	.word	0x20000000
 8001994:	ff0000c0 	.word	0xff0000c0

08001998 <setActualMenu>:

char *setActualMenu(uint8_t v, uint8_t h)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	0002      	movs	r2, r0
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	1dbb      	adds	r3, r7, #6
 80019a6:	1c0a      	adds	r2, r1, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	if (v != 0)
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d100      	bne.n	80019b4 <setActualMenu+0x1c>
 80019b2:	e0a3      	b.n	8001afc <setActualMenu+0x164>
				}
			}
		}
		else
		{ // Якщо команда ВН�?З - входу/редагування
			if (menu[actualIndex].isParam && !isParamEditMode)
 80019b4:	4bca      	ldr	r3, [pc, #808]	; (8001ce0 <setActualMenu+0x348>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	0019      	movs	r1, r3
 80019ba:	4aca      	ldr	r2, [pc, #808]	; (8001ce4 <setActualMenu+0x34c>)
 80019bc:	000b      	movs	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	185b      	adds	r3, r3, r1
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	18d3      	adds	r3, r2, r3
 80019c6:	3302      	adds	r3, #2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d017      	beq.n	80019fe <setActualMenu+0x66>
 80019ce:	4bc6      	ldr	r3, [pc, #792]	; (8001ce8 <setActualMenu+0x350>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4053      	eors	r3, r2
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d010      	beq.n	80019fe <setActualMenu+0x66>
			{										 // Якщо не в режимі редагування, то ...
				isParamEditMode = true;				 // Переходимо в режим редагування параметра
 80019dc:	4bc2      	ldr	r3, [pc, #776]	; (8001ce8 <setActualMenu+0x350>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
				tmpVal = menu[actualIndex].value; // Тимчасовій змінній присвоюємо актуальне значення параметра
 80019e2:	4bbf      	ldr	r3, [pc, #764]	; (8001ce0 <setActualMenu+0x348>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	0019      	movs	r1, r3
 80019e8:	4abe      	ldr	r2, [pc, #760]	; (8001ce4 <setActualMenu+0x34c>)
 80019ea:	000b      	movs	r3, r1
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	185b      	adds	r3, r3, r1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	3307      	adds	r3, #7
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	4bbc      	ldr	r3, [pc, #752]	; (8001cec <setActualMenu+0x354>)
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e07e      	b.n	8001afc <setActualMenu+0x164>
			}
			else if (menu[actualIndex].isParam && isParamEditMode)
 80019fe:	4bb8      	ldr	r3, [pc, #736]	; (8001ce0 <setActualMenu+0x348>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	0019      	movs	r1, r3
 8001a04:	4ab7      	ldr	r2, [pc, #732]	; (8001ce4 <setActualMenu+0x34c>)
 8001a06:	000b      	movs	r3, r1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	185b      	adds	r3, r3, r1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	18d3      	adds	r3, r2, r3
 8001a10:	3302      	adds	r3, #2
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d015      	beq.n	8001a44 <setActualMenu+0xac>
 8001a18:	4bb3      	ldr	r3, [pc, #716]	; (8001ce8 <setActualMenu+0x350>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d011      	beq.n	8001a44 <setActualMenu+0xac>
			{										 // Якщо в режимі редагування
				menu[actualIndex].value = tmpVal; // Зберігаємо задане значення
 8001a20:	4baf      	ldr	r3, [pc, #700]	; (8001ce0 <setActualMenu+0x348>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	0019      	movs	r1, r3
 8001a26:	4bb1      	ldr	r3, [pc, #708]	; (8001cec <setActualMenu+0x354>)
 8001a28:	7818      	ldrb	r0, [r3, #0]
 8001a2a:	4aae      	ldr	r2, [pc, #696]	; (8001ce4 <setActualMenu+0x34c>)
 8001a2c:	000b      	movs	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	185b      	adds	r3, r3, r1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	18d3      	adds	r3, r2, r3
 8001a36:	3307      	adds	r3, #7
 8001a38:	1c02      	adds	r2, r0, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
				isParamEditMode = false;			 // І виходимо з режиму редагування
 8001a3c:	4baa      	ldr	r3, [pc, #680]	; (8001ce8 <setActualMenu+0x350>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e05b      	b.n	8001afc <setActualMenu+0x164>
			}
			else
			{
				bool nochild = true; // Прапорець, чи є дочірні елементи
 8001a44:	230f      	movs	r3, #15
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < menuArraySize; i++)
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e024      	b.n	8001aa0 <setActualMenu+0x108>
				{
					if (menu[i].parentid == menu[actualIndex].id)
 8001a56:	240e      	movs	r4, #14
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	49a1      	ldr	r1, [pc, #644]	; (8001ce4 <setActualMenu+0x34c>)
 8001a5e:	0013      	movs	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	189b      	adds	r3, r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	18cb      	adds	r3, r1, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	4b9c      	ldr	r3, [pc, #624]	; (8001ce0 <setActualMenu+0x348>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	0018      	movs	r0, r3
 8001a72:	499c      	ldr	r1, [pc, #624]	; (8001ce4 <setActualMenu+0x34c>)
 8001a74:	0003      	movs	r3, r0
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	181b      	adds	r3, r3, r0
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	5c5b      	ldrb	r3, [r3, r1]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d108      	bne.n	8001a94 <setActualMenu+0xfc>
					{
						actualIndex = i; // Якщо є, робимо перший попавшийся актуальним елементом
 8001a82:	4b97      	ldr	r3, [pc, #604]	; (8001ce0 <setActualMenu+0x348>)
 8001a84:	193a      	adds	r2, r7, r4
 8001a86:	7812      	ldrb	r2, [r2, #0]
 8001a88:	701a      	strb	r2, [r3, #0]
						nochild = false; // Потомки є
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
						break;			 // Виходимо з for
 8001a92:	e00a      	b.n	8001aaa <setActualMenu+0x112>
				for (uint8_t i = 0; i < menuArraySize; i++)
 8001a94:	210e      	movs	r1, #14
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	3201      	adds	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	230e      	movs	r3, #14
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b19      	cmp	r3, #25
 8001aa8:	d9d5      	bls.n	8001a56 <setActualMenu+0xbe>
					}
				}
				if (nochild)
 8001aaa:	230f      	movs	r3, #15
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <setActualMenu+0x164>
				{ // Якщо ж потомків немає, воспринимаємо як команду
					switch (menu[actualIndex].id)
 8001ab4:	4b8a      	ldr	r3, [pc, #552]	; (8001ce0 <setActualMenu+0x348>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	0019      	movs	r1, r3
 8001aba:	4a8a      	ldr	r2, [pc, #552]	; (8001ce4 <setActualMenu+0x34c>)
 8001abc:	000b      	movs	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	185b      	adds	r3, r3, r1
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	5c9b      	ldrb	r3, [r3, r2]
 8001ac6:	2b11      	cmp	r3, #17
 8001ac8:	d012      	beq.n	8001af0 <setActualMenu+0x158>
 8001aca:	dc16      	bgt.n	8001afa <setActualMenu+0x162>
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d002      	beq.n	8001ad6 <setActualMenu+0x13e>
 8001ad0:	2b0d      	cmp	r3, #13
 8001ad2:	d003      	beq.n	8001adc <setActualMenu+0x144>
						{
							Clock();
						}
						break;
					default:
						break;
 8001ad4:	e011      	b.n	8001afa <setActualMenu+0x162>
						setTimeNow();
 8001ad6:	f7ff febd 	bl	8001854 <setTimeNow>
						break;
 8001ada:	e00f      	b.n	8001afc <setActualMenu+0x164>
						StartMusic(menu[19].value); // *19 		P_3.3	Alarm_Melody
 8001adc:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <setActualMenu+0x34c>)
 8001ade:	22c5      	movs	r2, #197	; 0xc5
 8001ae0:	5c9b      	ldrb	r3, [r3, r2]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 f967 	bl	8001db8 <StartMusic>
						break;
 8001aea:	e007      	b.n	8001afc <setActualMenu+0x164>
							Clock();
 8001aec:	f7ff fdfe 	bl	80016ec <Clock>
						while (Clock())
 8001af0:	f7ff fdfc 	bl	80016ec <Clock>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d1f9      	bne.n	8001aec <setActualMenu+0x154>
						break;
 8001af8:	e000      	b.n	8001afc <setActualMenu+0x164>
						break;
 8001afa:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if (h != 0)
 8001afc:	1dbb      	adds	r3, r7, #6
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d061      	beq.n	8001bc8 <setActualMenu+0x230>
	{ // Якщо горизонтальна навігація
		if (isParamEditMode)
 8001b04:	4b78      	ldr	r3, [pc, #480]	; (8001ce8 <setActualMenu+0x350>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d040      	beq.n	8001b8e <setActualMenu+0x1f6>
		{					// У режимі редагування параметра
			tmpVal += h; // Змінюємо його значення і ...
 8001b0c:	4b77      	ldr	r3, [pc, #476]	; (8001cec <setActualMenu+0x354>)
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	1dbb      	adds	r3, r7, #6
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	18d3      	adds	r3, r2, r3
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b74      	ldr	r3, [pc, #464]	; (8001cec <setActualMenu+0x354>)
 8001b1a:	701a      	strb	r2, [r3, #0]
			// ... контролюємо, щоб воно залишилося в заданому діапазоні
			if (tmpVal > menu[actualIndex]._max)
 8001b1c:	4b70      	ldr	r3, [pc, #448]	; (8001ce0 <setActualMenu+0x348>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	0019      	movs	r1, r3
 8001b22:	4a70      	ldr	r2, [pc, #448]	; (8001ce4 <setActualMenu+0x34c>)
 8001b24:	000b      	movs	r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	185b      	adds	r3, r3, r1
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	18d3      	adds	r3, r2, r3
 8001b2e:	3309      	adds	r3, #9
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	4b6e      	ldr	r3, [pc, #440]	; (8001cec <setActualMenu+0x354>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d20c      	bcs.n	8001b54 <setActualMenu+0x1bc>
				tmpVal = menu[actualIndex]._min;
 8001b3a:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <setActualMenu+0x348>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	0019      	movs	r1, r3
 8001b40:	4a68      	ldr	r2, [pc, #416]	; (8001ce4 <setActualMenu+0x34c>)
 8001b42:	000b      	movs	r3, r1
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	185b      	adds	r3, r3, r1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	3308      	adds	r3, #8
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <setActualMenu+0x354>)
 8001b52:	701a      	strb	r2, [r3, #0]
			if (tmpVal < menu[actualIndex]._min)
 8001b54:	4b62      	ldr	r3, [pc, #392]	; (8001ce0 <setActualMenu+0x348>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	0019      	movs	r1, r3
 8001b5a:	4a62      	ldr	r2, [pc, #392]	; (8001ce4 <setActualMenu+0x34c>)
 8001b5c:	000b      	movs	r3, r1
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	185b      	adds	r3, r3, r1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	3308      	adds	r3, #8
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	4b60      	ldr	r3, [pc, #384]	; (8001cec <setActualMenu+0x354>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d92a      	bls.n	8001bc8 <setActualMenu+0x230>
				tmpVal = menu[actualIndex]._max;
 8001b72:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <setActualMenu+0x348>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	0019      	movs	r1, r3
 8001b78:	4a5a      	ldr	r2, [pc, #360]	; (8001ce4 <setActualMenu+0x34c>)
 8001b7a:	000b      	movs	r3, r1
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	185b      	adds	r3, r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	18d3      	adds	r3, r2, r3
 8001b84:	3309      	adds	r3, #9
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b58      	ldr	r3, [pc, #352]	; (8001cec <setActualMenu+0x354>)
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e01c      	b.n	8001bc8 <setActualMenu+0x230>
		}
		else
		{ // Якщо режим редагування не активний, навігація серед дочірніх одного батька
			actualIndex = getNearMenuIndexByID(menu[actualIndex].parentid,
 8001b8e:	4b54      	ldr	r3, [pc, #336]	; (8001ce0 <setActualMenu+0x348>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	0019      	movs	r1, r3
 8001b94:	4a53      	ldr	r2, [pc, #332]	; (8001ce4 <setActualMenu+0x34c>)
 8001b96:	000b      	movs	r3, r1
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	185b      	adds	r3, r3, r1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	18d3      	adds	r3, r2, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	7818      	ldrb	r0, [r3, #0]
 8001ba4:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <setActualMenu+0x348>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	0019      	movs	r1, r3
 8001baa:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <setActualMenu+0x34c>)
 8001bac:	000b      	movs	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	185b      	adds	r3, r3, r1
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	5c99      	ldrb	r1, [r3, r2]
 8001bb6:	1dbb      	adds	r3, r7, #6
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	001a      	movs	r2, r3
 8001bbc:	f000 f89a 	bl	8001cf4 <getNearMenuIndexByID>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <setActualMenu+0x348>)
 8001bc6:	701a      	strb	r2, [r3, #0]
											   menu[actualIndex].id, h);
		}
	}
	// Отображаем информацию
	if (isParamEditMode)
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <setActualMenu+0x350>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d079      	beq.n	8001cc4 <setActualMenu+0x32c>
	{
		tmpV[0] = intToChar(tmpVal / 1000);
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <setActualMenu+0x354>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	23fa      	movs	r3, #250	; 0xfa
 8001bd8:	0099      	lsls	r1, r3, #2
 8001bda:	0010      	movs	r0, r2
 8001bdc:	f7fe fb1e 	bl	800021c <__divsi3>
 8001be0:	0003      	movs	r3, r0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff fae3 	bl	80011b0 <intToChar>
 8001bea:	0003      	movs	r3, r0
 8001bec:	001a      	movs	r2, r3
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <setActualMenu+0x358>)
 8001bf0:	701a      	strb	r2, [r3, #0]
		tmpV[1] = intToChar(tmpVal / 100 - tmpV[0] * 10);
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <setActualMenu+0x354>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2164      	movs	r1, #100	; 0x64
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7fe fa85 	bl	8000108 <__udivsi3>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <setActualMenu+0x358>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	1c19      	adds	r1, r3, #0
 8001c08:	0149      	lsls	r1, r1, #5
 8001c0a:	1ac9      	subs	r1, r1, r3
 8001c0c:	0089      	lsls	r1, r1, #2
 8001c0e:	1acb      	subs	r3, r1, r3
 8001c10:	18db      	adds	r3, r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	18d3      	adds	r3, r2, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff fac9 	bl	80011b0 <intToChar>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	001a      	movs	r2, r3
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <setActualMenu+0x358>)
 8001c24:	705a      	strb	r2, [r3, #1]
		tmpV[2] = intToChar(tmpVal / 10 - tmpV[0] * 100 - tmpV[1] * 10);
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <setActualMenu+0x354>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	210a      	movs	r1, #10
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7fe fa6b 	bl	8000108 <__udivsi3>
 8001c32:	0003      	movs	r3, r0
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <setActualMenu+0x358>)
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	1c19      	adds	r1, r3, #0
 8001c3c:	0149      	lsls	r1, r1, #5
 8001c3e:	1ac9      	subs	r1, r1, r3
 8001c40:	0089      	lsls	r1, r1, #2
 8001c42:	1acb      	subs	r3, r1, r3
 8001c44:	18db      	adds	r3, r3, r3
 8001c46:	b2d9      	uxtb	r1, r3
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <setActualMenu+0x358>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	1c18      	adds	r0, r3, #0
 8001c4e:	0080      	lsls	r0, r0, #2
 8001c50:	18c0      	adds	r0, r0, r3
 8001c52:	1c04      	adds	r4, r0, #0
 8001c54:	0164      	lsls	r4, r4, #5
 8001c56:	1a20      	subs	r0, r4, r0
 8001c58:	18c3      	adds	r3, r0, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	18cb      	adds	r3, r1, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	18d3      	adds	r3, r2, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff faa3 	bl	80011b0 <intToChar>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <setActualMenu+0x358>)
 8001c70:	709a      	strb	r2, [r3, #2]
		tmpV[3] = intToChar(tmpVal - tmpV[0] * 1000 - tmpV[1] * 100 - tmpV[2] * 10);
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <setActualMenu+0x358>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2218      	movs	r2, #24
 8001c78:	4353      	muls	r3, r2
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <setActualMenu+0x358>)
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	1c19      	adds	r1, r3, #0
 8001c82:	0089      	lsls	r1, r1, #2
 8001c84:	18c9      	adds	r1, r1, r3
 8001c86:	1c08      	adds	r0, r1, #0
 8001c88:	0140      	lsls	r0, r0, #5
 8001c8a:	1a41      	subs	r1, r0, r1
 8001c8c:	18cb      	adds	r3, r1, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	18d3      	adds	r3, r2, r3
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <setActualMenu+0x354>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <setActualMenu+0x358>)
 8001c9e:	789b      	ldrb	r3, [r3, #2]
 8001ca0:	1c19      	adds	r1, r3, #0
 8001ca2:	0149      	lsls	r1, r1, #5
 8001ca4:	1ac9      	subs	r1, r1, r3
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	1acb      	subs	r3, r1, r3
 8001caa:	18db      	adds	r3, r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	18d3      	adds	r3, r2, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7ff fa7c 	bl	80011b0 <intToChar>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	001a      	movs	r2, r3
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <setActualMenu+0x358>)
 8001cbe:	70da      	strb	r2, [r3, #3]
		return tmpV;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <setActualMenu+0x358>)
 8001cc2:	e009      	b.n	8001cd8 <setActualMenu+0x340>
	}
	else
	{
		return menu[actualIndex]._name;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <setActualMenu+0x348>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	001a      	movs	r2, r3
 8001cca:	0013      	movs	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	189b      	adds	r3, r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <setActualMenu+0x34c>)
 8001cd4:	189b      	adds	r3, r3, r2
 8001cd6:	3303      	adds	r3, #3
	}
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b005      	add	sp, #20
 8001cde:	bd90      	pop	{r4, r7, pc}
 8001ce0:	20000135 	.word	0x20000135
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000136 	.word	0x20000136
 8001cec:	20000137 	.word	0x20000137
 8001cf0:	20000140 	.word	0x20000140

08001cf4 <getNearMenuIndexByID>:
	}
	return -1;
}

uint8_t getNearMenuIndexByID(uint8_t parentid, uint8_t id, uint8_t side)
{					   // Функція отримання індексу пункту меню наступного або попереднього від актуального
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	0004      	movs	r4, r0
 8001cfc:	0008      	movs	r0, r1
 8001cfe:	0011      	movs	r1, r2
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	1c22      	adds	r2, r4, #0
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	1dbb      	adds	r3, r7, #6
 8001d08:	1c02      	adds	r2, r0, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	1d7b      	adds	r3, r7, #5
 8001d0e:	1c0a      	adds	r2, r1, #0
 8001d10:	701a      	strb	r2, [r3, #0]
	uint8_t prevID = -1;   // Змінна для зберігання індексу попереднього елемента
 8001d12:	230e      	movs	r3, #14
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	22ff      	movs	r2, #255	; 0xff
 8001d18:	701a      	strb	r2, [r3, #0]
	uint8_t nextID = -1;   // Змінна для зберігання індексу наступного елемента
 8001d1a:	230d      	movs	r3, #13
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	22ff      	movs	r2, #255	; 0xff
 8001d20:	701a      	strb	r2, [r3, #0]
	uint8_t actualID = -1; // Змінна для зберігання індексу актуального елемента
 8001d22:	230c      	movs	r3, #12
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	22ff      	movs	r2, #255	; 0xff
 8001d28:	701a      	strb	r2, [r3, #0]

	uint8_t firstID = -1; // Змінна для зберігання індексу першого елемента
 8001d2a:	230b      	movs	r3, #11
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	22ff      	movs	r2, #255	; 0xff
 8001d30:	701a      	strb	r2, [r3, #0]
	uint8_t lastID = -1;  // Змінна для зберігання індексу останнього елемента
 8001d32:	230a      	movs	r3, #10
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < menuArraySize; i++)
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e02b      	b.n	8001d9c <getNearMenuIndexByID+0xa8>
	{
		if (menu[i].parentid == parentid)
 8001d44:	200f      	movs	r0, #15
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	491a      	ldr	r1, [pc, #104]	; (8001db4 <getNearMenuIndexByID+0xc0>)
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	189b      	adds	r3, r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	18cb      	adds	r3, r1, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	1dfa      	adds	r2, r7, #7
 8001d5c:	7812      	ldrb	r2, [r2, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d116      	bne.n	8001d90 <getNearMenuIndexByID+0x9c>
		{ // Перебираємо всі елементи з одним батьківським ID
			if (firstID == -1)
				firstID = i; // Запам'ятовуємо перший елемент списку

			if (menu[i].id == id)
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	4913      	ldr	r1, [pc, #76]	; (8001db4 <getNearMenuIndexByID+0xc0>)
 8001d68:	0013      	movs	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	189b      	adds	r3, r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	5c5b      	ldrb	r3, [r3, r1]
 8001d72:	1dba      	adds	r2, r7, #6
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d104      	bne.n	8001d84 <getNearMenuIndexByID+0x90>
			{
				actualID = i; // Запам'ятовуємо актуальний елемент списку
 8001d7a:	230c      	movs	r3, #12
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	183a      	adds	r2, r7, r0
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	701a      	strb	r2, [r3, #0]
				else if (actualID != -1 && nextID == -1)
				{ // Якщо зустрівся елемент після актуального, робимо його наступним
					nextID = i;
				}
			}
			lastID = i; // Кожний наступний елемент - останній
 8001d84:	230a      	movs	r3, #10
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	220f      	movs	r2, #15
 8001d8a:	18ba      	adds	r2, r7, r2
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < menuArraySize; i++)
 8001d90:	210f      	movs	r1, #15
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	3201      	adds	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b19      	cmp	r3, #25
 8001da4:	d9ce      	bls.n	8001d44 <getNearMenuIndexByID+0x50>
	if (prevID == -1)
		prevID = lastID; // Якщо попереднього елемента немає - по колу видаємо останній
	if (side == -1)
		return prevID; // В залежності від напрямку обертання, видаємо потрібний індекс
	else
		return nextID;
 8001da6:	230d      	movs	r3, #13
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781b      	ldrb	r3, [r3, #0]
	return -1;
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b005      	add	sp, #20
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	20000000 	.word	0x20000000

08001db8 <StartMusic>:

void StartMusic(uint16_t melody)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	1dbb      	adds	r3, r7, #6
 8001dc2:	801a      	strh	r2, [r3, #0]
	MusicStep = 0;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <StartMusic+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	801a      	strh	r2, [r3, #0]
	PlayMusic = 1;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <StartMusic+0x44>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
	sound(Music[MusicStep].freq, Music[MusicStep].time);
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <StartMusic+0x40>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <StartMusic+0x48>)
 8001dd8:	0092      	lsls	r2, r2, #2
 8001dda:	5ad0      	ldrh	r0, [r2, r3]
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <StartMusic+0x40>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <StartMusic+0x48>)
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	18d3      	adds	r3, r2, r3
 8001de6:	3302      	adds	r3, #2
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	0019      	movs	r1, r3
 8001dec:	f000 f80a 	bl	8001e04 <sound>
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000144 	.word	0x20000144
 8001dfc:	20000146 	.word	0x20000146
 8001e00:	08002598 	.word	0x08002598

08001e04 <sound>:

void sound(uint16_t freq, uint16_t time_ms)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	1dbb      	adds	r3, r7, #6
 8001e0e:	801a      	strh	r2, [r3, #0]
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	1c0a      	adds	r2, r1, #0
 8001e14:	801a      	strh	r2, [r3, #0]
	if (freq > 0)
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <sound+0x4e>
	{
		TIM2->ARR = SYSCLK / TIM2->PSC / freq;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	05db      	lsls	r3, r3, #23
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	0019      	movs	r1, r3
 8001e26:	4828      	ldr	r0, [pc, #160]	; (8001ec8 <sound+0xc4>)
 8001e28:	f7fe f96e 	bl	8000108 <__udivsi3>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	0018      	movs	r0, r3
 8001e30:	1dbb      	adds	r3, r7, #6
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	05d4      	lsls	r4, r2, #23
 8001e38:	0019      	movs	r1, r3
 8001e3a:	f7fe f965 	bl	8000108 <__udivsi3>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->CCR1 = TIM2->ARR / 2;
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	05db      	lsls	r3, r3, #23
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	05db      	lsls	r3, r3, #23
 8001e4c:	0852      	lsrs	r2, r2, #1
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e50:	e008      	b.n	8001e64 <sound+0x60>
	}
	else
	{
		TIM2->ARR = 1000;
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	05db      	lsls	r3, r3, #23
 8001e56:	22fa      	movs	r2, #250	; 0xfa
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->CCR1 = 0;
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	05db      	lsls	r3, r3, #23
 8001e60:	2200      	movs	r2, #0
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34
	}
	TIM2->CNT = 0;
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	05db      	lsls	r3, r3, #23
 8001e68:	2200      	movs	r2, #0
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

	sound_time = ((SYSCLK / TIM2->PSC / TIM2->ARR) * time_ms) / 1000;
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	05db      	lsls	r3, r3, #23
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	0019      	movs	r1, r3
 8001e74:	4814      	ldr	r0, [pc, #80]	; (8001ec8 <sound+0xc4>)
 8001e76:	f7fe f947 	bl	8000108 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	05db      	lsls	r3, r3, #23
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	0019      	movs	r1, r3
 8001e86:	0010      	movs	r0, r2
 8001e88:	f7fe f93e 	bl	8000108 <__udivsi3>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	001a      	movs	r2, r3
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	4353      	muls	r3, r2
 8001e96:	22fa      	movs	r2, #250	; 0xfa
 8001e98:	0091      	lsls	r1, r2, #2
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7fe f934 	bl	8000108 <__udivsi3>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <sound+0xc8>)
 8001ea6:	801a      	strh	r2, [r3, #0]
	sound_counter = 0;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <sound+0xcc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	801a      	strh	r2, [r3, #0]
	SET_BIT(TIM2->CR1, TIM_CR1_CEN); // Запуск таймера;
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	05db      	lsls	r3, r3, #23
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	05db      	lsls	r3, r3, #23
 8001eb8:	2101      	movs	r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b003      	add	sp, #12
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	01e84800 	.word	0x01e84800
 8001ecc:	20000148 	.word	0x20000148
 8001ed0:	2000014a 	.word	0x2000014a

08001ed4 <SysTick_Handler>:
/* Handlers--------------------------------------------------------*/
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <SysTick_Handler+0x2c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <SysTick_Handler+0x2c>)
 8001ee0:	601a      	str	r2, [r3, #0]
	if (Delay_counter_ms)
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <SysTick_Handler+0x30>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <SysTick_Handler+0x26>
	{
		Delay_counter_ms--;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Handler+0x30>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <SysTick_Handler+0x30>)
 8001ef8:	801a      	strh	r2, [r3, #0]
	}
}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000138 	.word	0x20000138
 8001f04:	2000013c 	.word	0x2000013c

08001f08 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
    // Перевірка для DecrementButton (EXTI3)
    if (EXTI->PR & EXTI_PR_PR0)
 8001f0e:	4bb7      	ldr	r3, [pc, #732]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d100      	bne.n	8001f1a <EXTI0_1_IRQHandler+0x12>
 8001f18:	e0ae      	b.n	8002078 <EXTI0_1_IRQHandler+0x170>
    {
        EXTI->IMR &= ~EXTI_IMR_IM0;
 8001f1a:	4bb4      	ldr	r3, [pc, #720]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4bb3      	ldr	r3, [pc, #716]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001f20:	2101      	movs	r1, #1
 8001f22:	438a      	bics	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
        uint8_t button_Decrement_pressed = 0;
 8001f26:	1dfb      	adds	r3, r7, #7
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]

        for (uint8_t i = 0; i < debounceTime; i++)
 8001f2c:	1dbb      	adds	r3, r7, #6
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e022      	b.n	8001f7a <EXTI0_1_IRQHandler+0x72>
        {

            button_Decrement_pressed += (flagDecrementButtonDown)?((BUTTON_PRESSED(0, GPIOA)==0)?0:1):((BUTTON_PRESSED(0, GPIOA)==0)?1:0);
 8001f34:	4bae      	ldr	r3, [pc, #696]	; (80021f0 <EXTI0_1_IRQHandler+0x2e8>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <EXTI0_1_IRQHandler+0x46>
 8001f3c:	23a0      	movs	r3, #160	; 0xa0
 8001f3e:	05db      	lsls	r3, r3, #23
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	1e5a      	subs	r2, r3, #1
 8001f48:	4193      	sbcs	r3, r2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	e007      	b.n	8001f5e <EXTI0_1_IRQHandler+0x56>
 8001f4e:	23a0      	movs	r3, #160	; 0xa0
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	425a      	negs	r2, r3
 8001f5a:	4153      	adcs	r3, r2
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	b2d9      	uxtb	r1, r3
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	1dfa      	adds	r2, r7, #7
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	188a      	adds	r2, r1, r2
 8001f68:	701a      	strb	r2, [r3, #0]
            Delay_ms(1);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff f902 	bl	8001174 <Delay_ms>
        for (uint8_t i = 0; i < debounceTime; i++)
 8001f70:	1dbb      	adds	r3, r7, #6
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	1dbb      	adds	r3, r7, #6
 8001f76:	3201      	adds	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	1dbb      	adds	r3, r7, #6
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b0b      	cmp	r3, #11
 8001f80:	d9d8      	bls.n	8001f34 <EXTI0_1_IRQHandler+0x2c>
        }

        if ((!flagDecrementButtonDown && (button_Decrement_pressed>3*debounceTime/4)) || ( flagDecrementButtonDown && ( button_Decrement_pressed < debounceTime/4 )))
 8001f82:	4b9b      	ldr	r3, [pc, #620]	; (80021f0 <EXTI0_1_IRQHandler+0x2e8>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4053      	eors	r3, r2
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <EXTI0_1_IRQHandler+0x90>
 8001f90:	1dfb      	adds	r3, r7, #7
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b09      	cmp	r3, #9
 8001f96:	d807      	bhi.n	8001fa8 <EXTI0_1_IRQHandler+0xa0>
 8001f98:	4b95      	ldr	r3, [pc, #596]	; (80021f0 <EXTI0_1_IRQHandler+0x2e8>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d062      	beq.n	8002066 <EXTI0_1_IRQHandler+0x15e>
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d85e      	bhi.n	8002066 <EXTI0_1_IRQHandler+0x15e>
        {
            if (!flagDecrementButtonDown)
 8001fa8:	4b91      	ldr	r3, [pc, #580]	; (80021f0 <EXTI0_1_IRQHandler+0x2e8>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2201      	movs	r2, #1
 8001fae:	4053      	eors	r3, r2
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d014      	beq.n	8001fe0 <EXTI0_1_IRQHandler+0xd8>
            {
                timeDecrementButtonDown = SysTimer_ms;
 8001fb6:	4b8f      	ldr	r3, [pc, #572]	; (80021f4 <EXTI0_1_IRQHandler+0x2ec>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b8e      	ldr	r3, [pc, #568]	; (80021f8 <EXTI0_1_IRQHandler+0x2f0>)
 8001fbe:	701a      	strb	r2, [r3, #0]
                flagDecrementButtonDown = true;
 8001fc0:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <EXTI0_1_IRQHandler+0x2e8>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]

                EXTI->RTSR &= ~EXTI_RTSR_RT3;
 8001fc6:	4b89      	ldr	r3, [pc, #548]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	4b88      	ldr	r3, [pc, #544]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001fcc:	2108      	movs	r1, #8
 8001fce:	438a      	bics	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
                EXTI->FTSR |= EXTI_FTSR_FT3;
 8001fd2:	4b86      	ldr	r3, [pc, #536]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	4b85      	ldr	r3, [pc, #532]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001fd8:	2108      	movs	r1, #8
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	e042      	b.n	8002066 <EXTI0_1_IRQHandler+0x15e>
            }
            else
            {
                uint8_t pressDecrementButtonDuration = SysTimer_ms - timeDecrementButtonDown;
 8001fe0:	4b84      	ldr	r3, [pc, #528]	; (80021f4 <EXTI0_1_IRQHandler+0x2ec>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b2d9      	uxtb	r1, r3
 8001fe6:	4b84      	ldr	r3, [pc, #528]	; (80021f8 <EXTI0_1_IRQHandler+0x2f0>)
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	1cfb      	adds	r3, r7, #3
 8001fec:	1a8a      	subs	r2, r1, r2
 8001fee:	701a      	strb	r2, [r3, #0]

                EXTI->FTSR &= ~EXTI_FTSR_FT0;
 8001ff0:	4b7e      	ldr	r3, [pc, #504]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4b7d      	ldr	r3, [pc, #500]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]
                EXTI->RTSR |= EXTI_RTSR_RT0;
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002002:	2101      	movs	r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]

                if (pressDecrementButtonDuration >= timeButtonLongPressed)
 8002008:	1cfb      	adds	r3, r7, #3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2bc7      	cmp	r3, #199	; 0xc7
 800200e:	d903      	bls.n	8002018 <EXTI0_1_IRQHandler+0x110>
                {
                    flagDecrementButtonLong = true;
 8002010:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <EXTI0_1_IRQHandler+0x2f4>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	e023      	b.n	8002060 <EXTI0_1_IRQHandler+0x158>
                }
                else if (pressDecrementButtonDuration >= timeButtonPressed)
 8002018:	1cfb      	adds	r3, r7, #3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b63      	cmp	r3, #99	; 0x63
 800201e:	d91f      	bls.n	8002060 <EXTI0_1_IRQHandler+0x158>
                {
                    flagDecrementButton = true;
 8002020:	4b77      	ldr	r3, [pc, #476]	; (8002200 <EXTI0_1_IRQHandler+0x2f8>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]

                    if (flagPendingDecrementDoubleClick && (SysTimer_ms - timeLastDecrementButtonPress <= timeDoubleClick))
 8002026:	4b77      	ldr	r3, [pc, #476]	; (8002204 <EXTI0_1_IRQHandler+0x2fc>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d010      	beq.n	8002050 <EXTI0_1_IRQHandler+0x148>
 800202e:	4b71      	ldr	r3, [pc, #452]	; (80021f4 <EXTI0_1_IRQHandler+0x2ec>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a75      	ldr	r2, [pc, #468]	; (8002208 <EXTI0_1_IRQHandler+0x300>)
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	2b96      	cmp	r3, #150	; 0x96
 800203a:	d809      	bhi.n	8002050 <EXTI0_1_IRQHandler+0x148>
                    {
                        flagDecrementButtonDouble = true;
 800203c:	4b73      	ldr	r3, [pc, #460]	; (800220c <EXTI0_1_IRQHandler+0x304>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
                        flagDecrementButton = false;
 8002042:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <EXTI0_1_IRQHandler+0x2f8>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
                        flagPendingDecrementDoubleClick = false;
 8002048:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <EXTI0_1_IRQHandler+0x2fc>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e007      	b.n	8002060 <EXTI0_1_IRQHandler+0x158>
                    }
                    else
                    {
                        flagPendingDecrementDoubleClick = true;
 8002050:	4b6c      	ldr	r3, [pc, #432]	; (8002204 <EXTI0_1_IRQHandler+0x2fc>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
                        timeLastDecrementButtonPress = SysTimer_ms;
 8002056:	4b67      	ldr	r3, [pc, #412]	; (80021f4 <EXTI0_1_IRQHandler+0x2ec>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <EXTI0_1_IRQHandler+0x300>)
 800205e:	701a      	strb	r2, [r3, #0]
                    }
                }

                flagDecrementButtonDown = false;
 8002060:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <EXTI0_1_IRQHandler+0x2e8>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
            }
        }

        EXTI->PR = EXTI_PR_PR0;
 8002066:	4b61      	ldr	r3, [pc, #388]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002068:	2201      	movs	r2, #1
 800206a:	615a      	str	r2, [r3, #20]
        EXTI->IMR |= EXTI_IMR_IM0;
 800206c:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
    }

    // Перевірка для EnterButton (EXTI1)
    if (EXTI->PR & EXTI_PR_PR1)
 8002078:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d100      	bne.n	8002084 <EXTI0_1_IRQHandler+0x17c>
 8002082:	e0ae      	b.n	80021e2 <EXTI0_1_IRQHandler+0x2da>
    {
        EXTI->IMR &= ~EXTI_IMR_IM1;
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 800208a:	2102      	movs	r1, #2
 800208c:	438a      	bics	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
        uint8_t button_Enter_pressed = 0;
 8002090:	1d7b      	adds	r3, r7, #5
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]

        for (uint8_t i = 0; i < debounceTime; i++)
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e022      	b.n	80020e4 <EXTI0_1_IRQHandler+0x1dc>
        {
        	button_Enter_pressed += (flagEnterButtonDown)?((BUTTON_PRESSED(1, GPIOA)==0)?0:1):((BUTTON_PRESSED(1, GPIOA)==0)?1:0);
 800209e:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <EXTI0_1_IRQHandler+0x308>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <EXTI0_1_IRQHandler+0x1b0>
 80020a6:	23a0      	movs	r3, #160	; 0xa0
 80020a8:	05db      	lsls	r3, r3, #23
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	4193      	sbcs	r3, r2
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e007      	b.n	80020c8 <EXTI0_1_IRQHandler+0x1c0>
 80020b8:	23a0      	movs	r3, #160	; 0xa0
 80020ba:	05db      	lsls	r3, r3, #23
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2202      	movs	r2, #2
 80020c0:	4013      	ands	r3, r2
 80020c2:	425a      	negs	r2, r3
 80020c4:	4153      	adcs	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	b2d9      	uxtb	r1, r3
 80020ca:	1d7b      	adds	r3, r7, #5
 80020cc:	1d7a      	adds	r2, r7, #5
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	188a      	adds	r2, r1, r2
 80020d2:	701a      	strb	r2, [r3, #0]
            Delay_ms(1);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7ff f84d 	bl	8001174 <Delay_ms>
        for (uint8_t i = 0; i < debounceTime; i++)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	3201      	adds	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b0b      	cmp	r3, #11
 80020ea:	d9d8      	bls.n	800209e <EXTI0_1_IRQHandler+0x196>
        }

        if ( (!flagEnterButtonDown && (button_Enter_pressed>3*debounceTime/4)) || ( flagEnterButtonDown && (button_Enter_pressed < debounceTime/4 )))
 80020ec:	4b48      	ldr	r3, [pc, #288]	; (8002210 <EXTI0_1_IRQHandler+0x308>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	4053      	eors	r3, r2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <EXTI0_1_IRQHandler+0x1fa>
 80020fa:	1d7b      	adds	r3, r7, #5
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b09      	cmp	r3, #9
 8002100:	d807      	bhi.n	8002112 <EXTI0_1_IRQHandler+0x20a>
 8002102:	4b43      	ldr	r3, [pc, #268]	; (8002210 <EXTI0_1_IRQHandler+0x308>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d062      	beq.n	80021d0 <EXTI0_1_IRQHandler+0x2c8>
 800210a:	1d7b      	adds	r3, r7, #5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d85e      	bhi.n	80021d0 <EXTI0_1_IRQHandler+0x2c8>
        {
            if (!flagEnterButtonDown)
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <EXTI0_1_IRQHandler+0x308>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	4053      	eors	r3, r2
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d014      	beq.n	800214a <EXTI0_1_IRQHandler+0x242>
            {
                timeEnterButtonDown = SysTimer_ms;
 8002120:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <EXTI0_1_IRQHandler+0x2ec>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <EXTI0_1_IRQHandler+0x30c>)
 8002128:	701a      	strb	r2, [r3, #0]
                flagEnterButtonDown = true;
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <EXTI0_1_IRQHandler+0x308>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]

                EXTI->RTSR &= ~EXTI_RTSR_RT1;
 8002130:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002136:	2102      	movs	r1, #2
 8002138:	438a      	bics	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
                EXTI->FTSR |= EXTI_FTSR_FT1;
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002142:	2102      	movs	r1, #2
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	e042      	b.n	80021d0 <EXTI0_1_IRQHandler+0x2c8>
            }
            else
            {
                uint8_t pressEnterButtonDuration = SysTimer_ms - timeEnterButtonDown;
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <EXTI0_1_IRQHandler+0x2ec>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b2d9      	uxtb	r1, r3
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <EXTI0_1_IRQHandler+0x30c>)
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	1cbb      	adds	r3, r7, #2
 8002156:	1a8a      	subs	r2, r1, r2
 8002158:	701a      	strb	r2, [r3, #0]

                EXTI->FTSR &= ~EXTI_FTSR_FT1;
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002160:	2102      	movs	r1, #2
 8002162:	438a      	bics	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
                EXTI->RTSR |= EXTI_RTSR_RT1;
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 800216c:	2102      	movs	r1, #2
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]

                if (pressEnterButtonDuration >= timeButtonLongPressed)
 8002172:	1cbb      	adds	r3, r7, #2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2bc7      	cmp	r3, #199	; 0xc7
 8002178:	d903      	bls.n	8002182 <EXTI0_1_IRQHandler+0x27a>
                {
                    flagEnterButtonLong = true;
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <EXTI0_1_IRQHandler+0x310>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e023      	b.n	80021ca <EXTI0_1_IRQHandler+0x2c2>
                }
                else if (pressEnterButtonDuration >= timeButtonPressed)
 8002182:	1cbb      	adds	r3, r7, #2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b63      	cmp	r3, #99	; 0x63
 8002188:	d91f      	bls.n	80021ca <EXTI0_1_IRQHandler+0x2c2>
                {
                    flagEnterButton = true;
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <EXTI0_1_IRQHandler+0x314>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]

                    if (flagPendingEnterDoubleClick && (SysTimer_ms - timeLastEnterButtonPress <= timeDoubleClick))
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <EXTI0_1_IRQHandler+0x318>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <EXTI0_1_IRQHandler+0x2b2>
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <EXTI0_1_IRQHandler+0x2ec>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a21      	ldr	r2, [pc, #132]	; (8002224 <EXTI0_1_IRQHandler+0x31c>)
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	2b96      	cmp	r3, #150	; 0x96
 80021a4:	d809      	bhi.n	80021ba <EXTI0_1_IRQHandler+0x2b2>
                    {
                        flagEnterButtonDouble = true;
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <EXTI0_1_IRQHandler+0x320>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
                        flagEnterButton = false;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <EXTI0_1_IRQHandler+0x314>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
                        flagPendingEnterDoubleClick = false;
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <EXTI0_1_IRQHandler+0x318>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e007      	b.n	80021ca <EXTI0_1_IRQHandler+0x2c2>
                    }
                    else
                    {
                        flagPendingEnterDoubleClick = true;
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <EXTI0_1_IRQHandler+0x318>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
                        timeLastEnterButtonPress = SysTimer_ms;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <EXTI0_1_IRQHandler+0x2ec>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <EXTI0_1_IRQHandler+0x31c>)
 80021c8:	701a      	strb	r2, [r3, #0]
                    }
                }

                flagEnterButtonDown = false;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <EXTI0_1_IRQHandler+0x308>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
            }
        }

        EXTI->PR = EXTI_PR_PR1;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 80021d2:	2202      	movs	r2, #2
 80021d4:	615a      	str	r2, [r3, #20]
        EXTI->IMR |= EXTI_IMR_IM1;
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <EXTI0_1_IRQHandler+0x2e4>)
 80021dc:	2102      	movs	r1, #2
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
    }
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	40010400 	.word	0x40010400
 80021f0:	20000127 	.word	0x20000127
 80021f4:	20000138 	.word	0x20000138
 80021f8:	20000121 	.word	0x20000121
 80021fc:	2000012d 	.word	0x2000012d
 8002200:	2000012a 	.word	0x2000012a
 8002204:	20000133 	.word	0x20000133
 8002208:	20000124 	.word	0x20000124
 800220c:	20000130 	.word	0x20000130
 8002210:	20000128 	.word	0x20000128
 8002214:	20000122 	.word	0x20000122
 8002218:	2000012e 	.word	0x2000012e
 800221c:	2000012b 	.word	0x2000012b
 8002220:	20000134 	.word	0x20000134
 8002224:	20000125 	.word	0x20000125
 8002228:	20000131 	.word	0x20000131

0800222c <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
    // Перевірка, чи було переривання від лінії EXTI2
    if (EXTI->PR & EXTI_PR_PR2)
 8002232:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	2204      	movs	r2, #4
 8002238:	4013      	ands	r3, r2
 800223a:	d100      	bne.n	800223e <EXTI2_3_IRQHandler+0x12>
 800223c:	e0ae      	b.n	800239c <EXTI2_3_IRQHandler+0x170>
    {
        // Забороняємо переривання для даної лінії, поки не завершимо обробку
        EXTI->IMR &= ~EXTI_IMR_IM2;
 800223e:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 8002244:	2104      	movs	r1, #4
 8002246:	438a      	bics	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
		uint8_t button_Increment_pressed = 0;
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
        for(uint8_t i=0;i<debounceTime;i++){
 8002250:	1dbb      	adds	r3, r7, #6
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e022      	b.n	800229e <EXTI2_3_IRQHandler+0x72>
			button_Increment_pressed += (flagIncrementButtonDown)?((BUTTON_PRESSED(2, GPIOA)==0)?0:1):((BUTTON_PRESSED(2, GPIOA)==0)?1:0);
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <EXTI2_3_IRQHandler+0x17c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <EXTI2_3_IRQHandler+0x46>
 8002260:	23a0      	movs	r3, #160	; 0xa0
 8002262:	05db      	lsls	r3, r3, #23
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2204      	movs	r2, #4
 8002268:	4013      	ands	r3, r2
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	4193      	sbcs	r3, r2
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e007      	b.n	8002282 <EXTI2_3_IRQHandler+0x56>
 8002272:	23a0      	movs	r3, #160	; 0xa0
 8002274:	05db      	lsls	r3, r3, #23
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2204      	movs	r2, #4
 800227a:	4013      	ands	r3, r2
 800227c:	425a      	negs	r2, r3
 800227e:	4153      	adcs	r3, r2
 8002280:	b2db      	uxtb	r3, r3
 8002282:	b2d9      	uxtb	r1, r3
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	1dfa      	adds	r2, r7, #7
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	188a      	adds	r2, r1, r2
 800228c:	701a      	strb	r2, [r3, #0]
			Delay_ms(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f7fe ff70 	bl	8001174 <Delay_ms>
        for(uint8_t i=0;i<debounceTime;i++){
 8002294:	1dbb      	adds	r3, r7, #6
 8002296:	781a      	ldrb	r2, [r3, #0]
 8002298:	1dbb      	adds	r3, r7, #6
 800229a:	3201      	adds	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	1dbb      	adds	r3, r7, #6
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b0b      	cmp	r3, #11
 80022a4:	d9d8      	bls.n	8002258 <EXTI2_3_IRQHandler+0x2c>
		}

        if ((!flagIncrementButtonDown && (button_Increment_pressed>3*debounceTime/4)) || ( flagIncrementButtonDown && ( button_Increment_pressed < debounceTime/4 ))) // Перевіряємо стан кнопки після затримки
 80022a6:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <EXTI2_3_IRQHandler+0x17c>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4053      	eors	r3, r2
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <EXTI2_3_IRQHandler+0x90>
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d807      	bhi.n	80022cc <EXTI2_3_IRQHandler+0xa0>
 80022bc:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <EXTI2_3_IRQHandler+0x17c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d062      	beq.n	800238a <EXTI2_3_IRQHandler+0x15e>
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d85e      	bhi.n	800238a <EXTI2_3_IRQHandler+0x15e>
        {
            if ( !flagIncrementButtonDown )
 80022cc:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <EXTI2_3_IRQHandler+0x17c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2201      	movs	r2, #1
 80022d2:	4053      	eors	r3, r2
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d014      	beq.n	8002304 <EXTI2_3_IRQHandler+0xd8>
            {
                // Початок натискання
                timeIncrementButtonDown = SysTimer_ms;
 80022da:	4b34      	ldr	r3, [pc, #208]	; (80023ac <EXTI2_3_IRQHandler+0x180>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <EXTI2_3_IRQHandler+0x184>)
 80022e2:	701a      	strb	r2, [r3, #0]
                flagIncrementButtonDown = true;
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <EXTI2_3_IRQHandler+0x17c>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]

                // Переводимо переривання на спадаючий фронт для відстеження відпускання
                EXTI->RTSR &= ~EXTI_RTSR_RT2; // Вимикаємо переривання по зростаючому фронту
 80022ea:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 80022f0:	2104      	movs	r1, #4
 80022f2:	438a      	bics	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
                EXTI->FTSR |= EXTI_FTSR_FT2;  // Включаємо переривання по спадаючому фронту
 80022f6:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 80022fc:	2104      	movs	r1, #4
 80022fe:	430a      	orrs	r2, r1
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	e042      	b.n	800238a <EXTI2_3_IRQHandler+0x15e>
            }
            else
            {
                // Кнопка відпущена
                uint8_t pressIncrementButtonDuration = SysTimer_ms - timeIncrementButtonDown;
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <EXTI2_3_IRQHandler+0x180>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2d9      	uxtb	r1, r3
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <EXTI2_3_IRQHandler+0x184>)
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	1d7b      	adds	r3, r7, #5
 8002310:	1a8a      	subs	r2, r1, r2
 8002312:	701a      	strb	r2, [r3, #0]

                // Переводимо переривання на зростаючий фронт для відстеження наступного натискання
				EXTI->FTSR &= ~EXTI_FTSR_FT2; // Вимикаємо переривання по спадаючому фронту
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 800231a:	2104      	movs	r1, #4
 800231c:	438a      	bics	r2, r1
 800231e:	60da      	str	r2, [r3, #12]
                EXTI->RTSR |= EXTI_RTSR_RT2;  // Включаємо переривання по зростаючому фронту
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 8002326:	2104      	movs	r1, #4
 8002328:	430a      	orrs	r2, r1
 800232a:	609a      	str	r2, [r3, #8]
            
                // Обробка короткого та довгого натискання
                if (pressIncrementButtonDuration >= timeButtonLongPressed)
 800232c:	1d7b      	adds	r3, r7, #5
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2bc7      	cmp	r3, #199	; 0xc7
 8002332:	d903      	bls.n	800233c <EXTI2_3_IRQHandler+0x110>
                {
                    // Довге натискання
                    flagIncrementButtonLong = true;
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <EXTI2_3_IRQHandler+0x188>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e023      	b.n	8002384 <EXTI2_3_IRQHandler+0x158>
                }
                else if (pressIncrementButtonDuration >= timeButtonPressed)
 800233c:	1d7b      	adds	r3, r7, #5
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b63      	cmp	r3, #99	; 0x63
 8002342:	d91f      	bls.n	8002384 <EXTI2_3_IRQHandler+0x158>
                {
                    // Коротке натискання
                    flagIncrementButton = true;
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <EXTI2_3_IRQHandler+0x18c>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]

                    // Обробка подвійного натискання
                    if (flagPendingIncrementDoubleClick && (SysTimer_ms - timeLastIncrementButtonPress <= timeDoubleClick))
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <EXTI2_3_IRQHandler+0x190>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <EXTI2_3_IRQHandler+0x148>
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <EXTI2_3_IRQHandler+0x180>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <EXTI2_3_IRQHandler+0x194>)
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	2b96      	cmp	r3, #150	; 0x96
 800235e:	d809      	bhi.n	8002374 <EXTI2_3_IRQHandler+0x148>
                    {
                        flagIncrementButtonDouble = true;
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <EXTI2_3_IRQHandler+0x198>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
                        flagIncrementButton = false;
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <EXTI2_3_IRQHandler+0x18c>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
                        flagPendingIncrementDoubleClick = false;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <EXTI2_3_IRQHandler+0x190>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e007      	b.n	8002384 <EXTI2_3_IRQHandler+0x158>
                    }
                    else
                    {
                        flagPendingIncrementDoubleClick = true;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <EXTI2_3_IRQHandler+0x190>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
                        timeLastIncrementButtonPress = SysTimer_ms;
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <EXTI2_3_IRQHandler+0x180>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <EXTI2_3_IRQHandler+0x194>)
 8002382:	701a      	strb	r2, [r3, #0]
                    }
                }

                // Скидаємо прапорець натискання
                flagIncrementButtonDown = false;
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <EXTI2_3_IRQHandler+0x17c>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
            }
        }
        // Скидаємо прапорець EXTI2
        EXTI->PR = EXTI_PR_PR2;
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 800238c:	2204      	movs	r2, #4
 800238e:	615a      	str	r2, [r3, #20]
        // Увімкнення переривань після обробки
        EXTI->IMR |= EXTI_IMR_IM2;
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <EXTI2_3_IRQHandler+0x178>)
 8002396:	2104      	movs	r1, #4
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
    }
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40010400 	.word	0x40010400
 80023a8:	20000126 	.word	0x20000126
 80023ac:	20000138 	.word	0x20000138
 80023b0:	20000120 	.word	0x20000120
 80023b4:	2000012c 	.word	0x2000012c
 80023b8:	20000129 	.word	0x20000129
 80023bc:	20000132 	.word	0x20000132
 80023c0:	20000123 	.word	0x20000123
 80023c4:	2000012f 	.word	0x2000012f

080023c8 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
    // Перевіряємо, чи було переривання від лінії EXTI9
    if (EXTI->PR & EXTI_PR_PR9)
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d037      	beq.n	8002448 <EXTI4_15_IRQHandler+0x80>
    {
        // Забороняємо переривання для лінії EXTI9
        EXTI->IMR &= ~EXTI_IMR_IM9;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 80023de:	491d      	ldr	r1, [pc, #116]	; (8002454 <EXTI4_15_IRQHandler+0x8c>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

        // Перевірка стану піну 9 (припускаємо, що сигнал 0 – активний)
        if (BUTTON_PRESSED(9,GPIOB) == 0)  // Якщо сигнал 0
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <EXTI4_15_IRQHandler+0x90>)
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4013      	ands	r3, r2
 80023ee:	d110      	bne.n	8002412 <EXTI4_15_IRQHandler+0x4a>
        {
            // Переводимо переривання на зростаючий фронт (чекаємо на сигнал 1)
            EXTI->RTSR |= EXTI_RTSR_RT9;   // Увімкнення переривання на зростаючий фронт
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	0089      	lsls	r1, r1, #2
 80023fa:	430a      	orrs	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]
            EXTI->FTSR &= ~EXTI_FTSR_FT9;  // Вимкнення переривання на спадний фронт
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 8002404:	4913      	ldr	r1, [pc, #76]	; (8002454 <EXTI4_15_IRQHandler+0x8c>)
 8002406:	400a      	ands	r2, r1
 8002408:	60da      	str	r2, [r3, #12]

            // Входимо в режим мінімального енергоспоживання
            LowPowerMode(ENTER);
 800240a:	2001      	movs	r0, #1
 800240c:	f7fe fea2 	bl	8001154 <LowPowerMode>
 8002410:	e00f      	b.n	8002432 <EXTI4_15_IRQHandler+0x6a>
        }
        else  // Якщо сигнал 1 (відновлення сигналу)
        {
            // Повертаємо контролер у нормальний режим роботи
            LowPowerMode(EXIT);
 8002412:	2000      	movs	r0, #0
 8002414:	f7fe fe9e 	bl	8001154 <LowPowerMode>

            // Переводимо переривання на спадний фронт (чекаємо на сигнал 0)
            EXTI->FTSR |= EXTI_FTSR_FT9;   // Увімкнення переривання на спадний фронт
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	0089      	lsls	r1, r1, #2
 8002422:	430a      	orrs	r2, r1
 8002424:	60da      	str	r2, [r3, #12]
            EXTI->RTSR &= ~EXTI_RTSR_RT9;  // Вимкнення переривання на зростаючий фронт
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 800242c:	4909      	ldr	r1, [pc, #36]	; (8002454 <EXTI4_15_IRQHandler+0x8c>)
 800242e:	400a      	ands	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
        }

        // Скидаємо прапорець переривання на лінії EXTI9
        EXTI->PR = EXTI_PR_PR9;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	615a      	str	r2, [r3, #20]

        // Увімкнення переривань після обробки
        EXTI->IMR |= EXTI_IMR_IM9;
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <EXTI4_15_IRQHandler+0x88>)
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0089      	lsls	r1, r1, #2
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
    }
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	40010400 	.word	0x40010400
 8002454:	fffffdff 	.word	0xfffffdff
 8002458:	50000400 	.word	0x50000400

0800245c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM2->SR, TIM_SR_UIF))
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	05db      	lsls	r3, r3, #23
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2201      	movs	r2, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d007      	beq.n	800247c <TIM2_IRQHandler+0x20>
	{
		//		CounterTIM2++;
		CLEAR_BIT(TIM2->SR, TIM_SR_UIF); // Сбросим флаг прерывания
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	05db      	lsls	r3, r3, #23
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	611a      	str	r2, [r3, #16]
	}
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <TIM21_IRQHandler>:

void TIM21_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM21->SR, TIM_SR_UIF))
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <TIM21_IRQHandler+0x20>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2201      	movs	r2, #1
 800248e:	4013      	ands	r3, r2
 8002490:	d005      	beq.n	800249e <TIM21_IRQHandler+0x1a>
	{
		//		CounterTIM2++;
		CLEAR_BIT(TIM21->SR, TIM_SR_UIF); // Сбросим флаг прерывания
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <TIM21_IRQHandler+0x20>)
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <TIM21_IRQHandler+0x20>)
 8002498:	2101      	movs	r1, #1
 800249a:	438a      	bics	r2, r1
 800249c:	611a      	str	r2, [r3, #16]
	}
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40010800 	.word	0x40010800

080024a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <Reset_Handler>:
 80024b4:	4813      	ldr	r0, [pc, #76]	; (8002504 <LoopForever+0x2>)
 80024b6:	4685      	mov	sp, r0
 80024b8:	f7ff fff6 	bl	80024a8 <SystemInit>
 80024bc:	4812      	ldr	r0, [pc, #72]	; (8002508 <LoopForever+0x6>)
 80024be:	6801      	ldr	r1, [r0, #0]
 80024c0:	0e09      	lsrs	r1, r1, #24
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <LoopForever+0xa>)
 80024c4:	4291      	cmp	r1, r2
 80024c6:	d105      	bne.n	80024d4 <ApplicationStart>
 80024c8:	4811      	ldr	r0, [pc, #68]	; (8002510 <LoopForever+0xe>)
 80024ca:	4912      	ldr	r1, [pc, #72]	; (8002514 <LoopForever+0x12>)
 80024cc:	6001      	str	r1, [r0, #0]
 80024ce:	4812      	ldr	r0, [pc, #72]	; (8002518 <LoopForever+0x16>)
 80024d0:	4912      	ldr	r1, [pc, #72]	; (800251c <LoopForever+0x1a>)
 80024d2:	6001      	str	r1, [r0, #0]

080024d4 <ApplicationStart>:
 80024d4:	4812      	ldr	r0, [pc, #72]	; (8002520 <LoopForever+0x1e>)
 80024d6:	4913      	ldr	r1, [pc, #76]	; (8002524 <LoopForever+0x22>)
 80024d8:	4a13      	ldr	r2, [pc, #76]	; (8002528 <LoopForever+0x26>)
 80024da:	2300      	movs	r3, #0
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:
 80024de:	58d4      	ldr	r4, [r2, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:
 80024e4:	18c4      	adds	r4, r0, r3
 80024e6:	428c      	cmp	r4, r1
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <LoopForever+0x2a>)
 80024ec:	4c10      	ldr	r4, [pc, #64]	; (8002530 <LoopForever+0x2e>)
 80024ee:	2300      	movs	r3, #0
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:
 80024f6:	42a2      	cmp	r2, r4
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>
 80024fa:	f000 f81d 	bl	8002538 <__libc_init_array>
 80024fe:	f7fe f801 	bl	8000504 <main>

08002502 <LoopForever>:
 8002502:	e7fe      	b.n	8002502 <LoopForever>
 8002504:	20000800 	.word	0x20000800
 8002508:	00000004 	.word	0x00000004
 800250c:	0000001f 	.word	0x0000001f
 8002510:	40021034 	.word	0x40021034
 8002514:	00000001 	.word	0x00000001
 8002518:	40010000 	.word	0x40010000
 800251c:	00000000 	.word	0x00000000
 8002520:	20000000 	.word	0x20000000
 8002524:	20000104 	.word	0x20000104
 8002528:	08002750 	.word	0x08002750
 800252c:	20000104 	.word	0x20000104
 8002530:	2000014c 	.word	0x2000014c

08002534 <ADC1_IRQHandler>:
 8002534:	e7fe      	b.n	8002534 <ADC1_IRQHandler>
	...

08002538 <__libc_init_array>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	2600      	movs	r6, #0
 800253c:	4c0c      	ldr	r4, [pc, #48]	; (8002570 <__libc_init_array+0x38>)
 800253e:	4d0d      	ldr	r5, [pc, #52]	; (8002574 <__libc_init_array+0x3c>)
 8002540:	1b64      	subs	r4, r4, r5
 8002542:	10a4      	asrs	r4, r4, #2
 8002544:	42a6      	cmp	r6, r4
 8002546:	d109      	bne.n	800255c <__libc_init_array+0x24>
 8002548:	2600      	movs	r6, #0
 800254a:	f000 f819 	bl	8002580 <_init>
 800254e:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <__libc_init_array+0x40>)
 8002550:	4d0a      	ldr	r5, [pc, #40]	; (800257c <__libc_init_array+0x44>)
 8002552:	1b64      	subs	r4, r4, r5
 8002554:	10a4      	asrs	r4, r4, #2
 8002556:	42a6      	cmp	r6, r4
 8002558:	d105      	bne.n	8002566 <__libc_init_array+0x2e>
 800255a:	bd70      	pop	{r4, r5, r6, pc}
 800255c:	00b3      	lsls	r3, r6, #2
 800255e:	58eb      	ldr	r3, [r5, r3]
 8002560:	4798      	blx	r3
 8002562:	3601      	adds	r6, #1
 8002564:	e7ee      	b.n	8002544 <__libc_init_array+0xc>
 8002566:	00b3      	lsls	r3, r6, #2
 8002568:	58eb      	ldr	r3, [r5, r3]
 800256a:	4798      	blx	r3
 800256c:	3601      	adds	r6, #1
 800256e:	e7f2      	b.n	8002556 <__libc_init_array+0x1e>
 8002570:	08002748 	.word	0x08002748
 8002574:	08002748 	.word	0x08002748
 8002578:	0800274c 	.word	0x0800274c
 800257c:	08002748 	.word	0x08002748

08002580 <_init>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr

0800258c <_fini>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr
