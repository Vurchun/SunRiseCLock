
CMSIS_SunRiseClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08001fc4  08001fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002174  08002174  000202e4  2**0
                  CONTENTS
  4 .ARM          00000000  08002174  08002174  000202e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002174  08002174  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002174  08002174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0800217c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200002e4  08002460  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000340  08002460  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012db  00000000  00000000  0002034f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000407  00000000  00000000  0002162a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00021a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fe  00000000  00000000  00021b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008fce  00000000  00000000  00021c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000144b  00000000  00000000  0002ac54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000300db  00000000  00000000  0002c09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000438  00000000  00000000  0005c17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0005c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e4 	.word	0x200002e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001fac 	.word	0x08001fac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e8 	.word	0x200002e8
 8000104:	08001fac 	.word	0x08001fac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b7f      	cmp	r3, #127	; 0x7f
 8000406:	d809      	bhi.n	800041c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	001a      	movs	r2, r3
 800040e:	231f      	movs	r3, #31
 8000410:	401a      	ands	r2, r3
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <__NVIC_EnableIRQ+0x30>)
 8000414:	2101      	movs	r1, #1
 8000416:	4091      	lsls	r1, r2
 8000418:	000a      	movs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
  }
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}
 8000424:	e000e100 	.word	0xe000e100

08000428 <main>:
void sound(int freq, int time_ms);



int main(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	SystemClock_Config();
 800042e:	f000 f891 	bl	8000554 <SystemClock_Config>
	SysTickTimerInit(32000); // 1ms
 8000432:	23fa      	movs	r3, #250	; 0xfa
 8000434:	01db      	lsls	r3, r3, #7
 8000436:	0018      	movs	r0, r3
 8000438:	f000 f884 	bl	8000544 <SysTickTimerInit>
	GPIO_Init();
 800043c:	f000 fb30 	bl	8000aa0 <GPIO_Init>
	LPUART1_UART_Init();
 8000440:	f000 f934 	bl	80006ac <LPUART1_UART_Init>
	RTC_Init();
 8000444:	f000 f938 	bl	80006b8 <RTC_Init>
	TIM2_Init();
 8000448:	f000 f9a6 	bl	8000798 <TIM2_Init>
	TIM21_Init();
 800044c:	f000 fa78 	bl	8000940 <TIM21_Init>

	writeCHARSEG(' ', ' ');
 8000450:	2120      	movs	r1, #32
 8000452:	2020      	movs	r0, #32
 8000454:	f000 fdd4 	bl	8001000 <writeCHARSEG>
	pinEN_OFF();
 8000458:	4b33      	ldr	r3, [pc, #204]	; (8000528 <main+0x100>)
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	0612      	lsls	r2, r2, #24
 800045e:	619a      	str	r2, [r3, #24]

	int vmenu = 0; // Змінна, що зберігає дію по вертикалі 1 - вхід в меню, -1 - вихід з меню
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
	int hmenu = 0; // Змінна, що зберігає дію по горизонталі 1 - вправо, -1 - вліво
 8000464:	2300      	movs	r3, #0
 8000466:	60bb      	str	r3, [r7, #8]
	char *tmpValue;

	while (1)
	{
		if (flagDecrementButton)
 8000468:	4b30      	ldr	r3, [pc, #192]	; (800052c <main+0x104>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d005      	beq.n	800047c <main+0x54>
		{
			hmenu = 1;					 // Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 8000470:	2301      	movs	r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
			flagDecrementButton = false; // Действие обработано - сбрасываем флаг
 8000474:	4b2d      	ldr	r3, [pc, #180]	; (800052c <main+0x104>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	e008      	b.n	800048e <main+0x66>
		}
		else if(flagDecrementButtonLong){
 800047c:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <main+0x108>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d004      	beq.n	800048e <main+0x66>
			hmenu = 5;					 // Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 8000484:	2305      	movs	r3, #5
 8000486:	60bb      	str	r3, [r7, #8]
			flagDecrementButtonLong = false; // Действие обработано - сбрасываем флаг
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <main+0x108>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
		}

		if (flagIncrementButton)
 800048e:	4b29      	ldr	r3, [pc, #164]	; (8000534 <main+0x10c>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d006      	beq.n	80004a4 <main+0x7c>
		{
			hmenu = -1;					 // Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 8000496:	2301      	movs	r3, #1
 8000498:	425b      	negs	r3, r3
 800049a:	60bb      	str	r3, [r7, #8]
			flagIncrementButton = false; // Действие обработано - сбрасываем флаг
 800049c:	4b25      	ldr	r3, [pc, #148]	; (8000534 <main+0x10c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
 80004a2:	e009      	b.n	80004b8 <main+0x90>
		}
		else if(flagIncrementButtonLong){
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <main+0x110>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d005      	beq.n	80004b8 <main+0x90>
			hmenu = -5;					 // Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 80004ac:	2305      	movs	r3, #5
 80004ae:	425b      	negs	r3, r3
 80004b0:	60bb      	str	r3, [r7, #8]
			flagIncrementButtonLong = false; // Действие обработано - сбрасываем флаг
 80004b2:	4b21      	ldr	r3, [pc, #132]	; (8000538 <main+0x110>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
		}

		if (flagEnterButton)
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <main+0x114>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d005      	beq.n	80004cc <main+0xa4>
		{							 // Кнопка нажата
			vmenu = 1;				 // По нажатию кнопки - переходим на уровень вниз
 80004c0:	2301      	movs	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
			flagEnterButton = false; // Действие обработано - сбрасываем флаг
 80004c4:	4b1d      	ldr	r3, [pc, #116]	; (800053c <main+0x114>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
 80004ca:	e009      	b.n	80004e0 <main+0xb8>
		}
		else if (flagEnterButtonLong)
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <main+0x118>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d005      	beq.n	80004e0 <main+0xb8>
		{
			vmenu = -1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	425b      	negs	r3, r3
 80004d8:	60fb      	str	r3, [r7, #12]
			flagEnterButtonLong = false; // Действие обработано - сбрасываем флаг
 80004da:	4b19      	ldr	r3, [pc, #100]	; (8000540 <main+0x118>)
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
		}
		if (vmenu != 0 || hmenu != 0)
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d102      	bne.n	80004ec <main+0xc4>
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d007      	beq.n	80004fc <main+0xd4>
			tmpValue = setActualMenu(vmenu, hmenu); // Если было действие - реагируем на него
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 f922 	bl	800173c <setActualMenu>
 80004f8:	0003      	movs	r3, r0
 80004fa:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < 4; i++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	e00e      	b.n	8000520 <main+0xf8>
		{
			writeCHARSEG(tmpValue[i], i);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	18d3      	adds	r3, r2, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fd76 	bl	8001000 <writeCHARSEG>
			Delay_ms(50);
 8000514:	2032      	movs	r0, #50	; 0x32
 8000516:	f000 fd33 	bl	8000f80 <Delay_ms>
		for (int i = 0; i < 4; i++)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	2b03      	cmp	r3, #3
 8000524:	dded      	ble.n	8000502 <main+0xda>
		if (flagDecrementButton)
 8000526:	e79f      	b.n	8000468 <main+0x40>
 8000528:	50000800 	.word	0x50000800
 800052c:	20000300 	.word	0x20000300
 8000530:	20000303 	.word	0x20000303
 8000534:	20000302 	.word	0x20000302
 8000538:	20000305 	.word	0x20000305
 800053c:	20000301 	.word	0x20000301
 8000540:	20000304 	.word	0x20000304

08000544 <SysTickTimerInit>:
		}
	}
}

void SysTickTimerInit(uint32_t ticks)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
//	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk, (ticks - 1) << SysTick_LOAD_RELOAD_Pos);// 4. Налаштуємо переривання на частоту (SysTick генерує переривання кожну *с)
//	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk, (ticks - 1) << SysTick_VAL_CURRENT_Pos);// 5. Почнемо відлік з максимального значення
//	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk);	// 6. Запустимо таймер
//	//#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
//	//#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}

08000554 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// Налаштування PWR CR для регулювання напруги
	MODIFY_REG(PWR->CR, PWR_CR_VOS_Msk, 0b01 << PWR_CR_VOS_Pos);
 8000558:	4b49      	ldr	r3, [pc, #292]	; (8000680 <SystemClock_Config+0x12c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a49      	ldr	r2, [pc, #292]	; (8000684 <SystemClock_Config+0x130>)
 800055e:	401a      	ands	r2, r3
 8000560:	4b47      	ldr	r3, [pc, #284]	; (8000680 <SystemClock_Config+0x12c>)
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	0109      	lsls	r1, r1, #4
 8000566:	430a      	orrs	r2, r1
 8000568:	601a      	str	r2, [r3, #0]

	// Вимкнення HSI16DIV
	CLEAR_BIT(RCC->CR, RCC_CR_HSIDIVEN);
 800056a:	4b47      	ldr	r3, [pc, #284]	; (8000688 <SystemClock_Config+0x134>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	4b46      	ldr	r3, [pc, #280]	; (8000688 <SystemClock_Config+0x134>)
 8000570:	2108      	movs	r1, #8
 8000572:	438a      	bics	r2, r1
 8000574:	601a      	str	r2, [r3, #0]

	// Вимкнення MSI
	CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000576:	4b44      	ldr	r3, [pc, #272]	; (8000688 <SystemClock_Config+0x134>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b43      	ldr	r3, [pc, #268]	; (8000688 <SystemClock_Config+0x134>)
 800057c:	4943      	ldr	r1, [pc, #268]	; (800068c <SystemClock_Config+0x138>)
 800057e:	400a      	ands	r2, r1
 8000580:	601a      	str	r2, [r3, #0]

	// Якщо джерело системної частоти не HSI16
	if ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI)
 8000582:	4b41      	ldr	r3, [pc, #260]	; (8000688 <SystemClock_Config+0x134>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	220c      	movs	r2, #12
 8000588:	4013      	ands	r3, r2
 800058a:	2b04      	cmp	r3, #4
 800058c:	d01b      	beq.n	80005c6 <SystemClock_Config+0x72>
	{
		// Увімкнення HSI16
		SET_BIT(RCC->CR, RCC_CR_HSION);
 800058e:	4b3e      	ldr	r3, [pc, #248]	; (8000688 <SystemClock_Config+0x134>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b3d      	ldr	r3, [pc, #244]	; (8000688 <SystemClock_Config+0x134>)
 8000594:	2101      	movs	r1, #1
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]

		// Очікування стабілізації HSI16
		while (!(RCC->CR & RCC_CR_HSIRDY))
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	4b3a      	ldr	r3, [pc, #232]	; (8000688 <SystemClock_Config+0x134>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2204      	movs	r2, #4
 80005a2:	4013      	ands	r3, r2
 80005a4:	d0fa      	beq.n	800059c <SystemClock_Config+0x48>
		{
		}

		// Перемикання системної тактової частоти на HSI16
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_HSI);
 80005a6:	4b38      	ldr	r3, [pc, #224]	; (8000688 <SystemClock_Config+0x134>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	2203      	movs	r2, #3
 80005ac:	4393      	bics	r3, r2
 80005ae:	001a      	movs	r2, r3
 80005b0:	4b35      	ldr	r3, [pc, #212]	; (8000688 <SystemClock_Config+0x134>)
 80005b2:	2101      	movs	r1, #1
 80005b4:	430a      	orrs	r2, r1
 80005b6:	60da      	str	r2, [r3, #12]

		// Очікування завершення перемикання
		while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI)
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	4b33      	ldr	r3, [pc, #204]	; (8000688 <SystemClock_Config+0x134>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	220c      	movs	r2, #12
 80005c0:	4013      	ands	r3, r2
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d1f9      	bne.n	80005ba <SystemClock_Config+0x66>
		{
		}
	}

	// Налаштування MCO prescaler і джерела сигналу
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOPRE_Msk, 0b000 << RCC_CFGR_MCOPRE_Pos);
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <SystemClock_Config+0x134>)
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <SystemClock_Config+0x134>)
 80005cc:	4930      	ldr	r1, [pc, #192]	; (8000690 <SystemClock_Config+0x13c>)
 80005ce:	400a      	ands	r2, r1
 80005d0:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL_Msk, 0b000 << RCC_CFGR_MCOSEL_Pos);
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <SystemClock_Config+0x134>)
 80005d4:	68da      	ldr	r2, [r3, #12]
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <SystemClock_Config+0x134>)
 80005d8:	492e      	ldr	r1, [pc, #184]	; (8000694 <SystemClock_Config+0x140>)
 80005da:	400a      	ands	r2, r1
 80005dc:	60da      	str	r2, [r3, #12]

	// Налаштування PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLDIV_Msk, 0b01 << RCC_CFGR_PLLDIV_Pos);
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <SystemClock_Config+0x134>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <SystemClock_Config+0x144>)
 80005e4:	401a      	ands	r2, r3
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0x134>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	03c9      	lsls	r1, r1, #15
 80005ec:	430a      	orrs	r2, r1
 80005ee:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL_Msk, 0b0001 << RCC_CFGR_PLLMUL_Pos);
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0x134>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <SystemClock_Config+0x148>)
 80005f6:	401a      	ands	r2, r3
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <SystemClock_Config+0x134>)
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	02c9      	lsls	r1, r1, #11
 80005fe:	430a      	orrs	r2, r1
 8000600:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC_Msk, 0b0 << RCC_CFGR_PLLSRC_Pos);
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <SystemClock_Config+0x134>)
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <SystemClock_Config+0x134>)
 8000608:	4925      	ldr	r1, [pc, #148]	; (80006a0 <SystemClock_Config+0x14c>)
 800060a:	400a      	ands	r2, r1
 800060c:	60da      	str	r2, [r3, #12]

	// Вимкнення системного пробудження від MSI після STOP режиму
	SET_BIT(RCC->CFGR, RCC_CFGR_STOPWUCK);
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <SystemClock_Config+0x134>)
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <SystemClock_Config+0x134>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0209      	lsls	r1, r1, #8
 8000618:	430a      	orrs	r2, r1
 800061a:	60da      	str	r2, [r3, #12]

	// Налаштування прескалерів для шин APB1, APB2 та AHB
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2_Msk, 0b000 << RCC_CFGR_PPRE2_Pos);
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <SystemClock_Config+0x134>)
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <SystemClock_Config+0x134>)
 8000622:	4920      	ldr	r1, [pc, #128]	; (80006a4 <SystemClock_Config+0x150>)
 8000624:	400a      	ands	r2, r1
 8000626:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1_Msk, 0b000 << RCC_CFGR_PPRE1_Pos);
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <SystemClock_Config+0x134>)
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <SystemClock_Config+0x134>)
 800062e:	491e      	ldr	r1, [pc, #120]	; (80006a8 <SystemClock_Config+0x154>)
 8000630:	400a      	ands	r2, r1
 8000632:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE_Msk, 0b0000 << RCC_CFGR_HPRE_Pos);
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <SystemClock_Config+0x134>)
 8000636:	68da      	ldr	r2, [r3, #12]
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <SystemClock_Config+0x134>)
 800063a:	21f0      	movs	r1, #240	; 0xf0
 800063c:	438a      	bics	r2, r1
 800063e:	60da      	str	r2, [r3, #12]

	// Перемикання на PLL
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <SystemClock_Config+0x134>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <SystemClock_Config+0x134>)
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0449      	lsls	r1, r1, #17
 800064a:	430a      	orrs	r2, r1
 800064c:	601a      	str	r2, [r3, #0]

	// Очікування стабілізації PLL
	while (!(RCC->CR & RCC_CR_PLLRDY))
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <SystemClock_Config+0x134>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	049b      	lsls	r3, r3, #18
 8000658:	4013      	ands	r3, r2
 800065a:	d0f9      	beq.n	8000650 <SystemClock_Config+0xfc>
	{
	}

	// Перемикання системної частоти на PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_PLL);
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <SystemClock_Config+0x134>)
 800065e:	68da      	ldr	r2, [r3, #12]
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <SystemClock_Config+0x134>)
 8000662:	2103      	movs	r1, #3
 8000664:	430a      	orrs	r2, r1
 8000666:	60da      	str	r2, [r3, #12]

	// Очікування завершення перемикання
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL)
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <SystemClock_Config+0x134>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	220c      	movs	r2, #12
 8000670:	4013      	ands	r3, r2
 8000672:	2b0c      	cmp	r3, #12
 8000674:	d1f9      	bne.n	800066a <SystemClock_Config+0x116>
	{
	}
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40007000 	.word	0x40007000
 8000684:	ffffe7ff 	.word	0xffffe7ff
 8000688:	40021000 	.word	0x40021000
 800068c:	fffffeff 	.word	0xfffffeff
 8000690:	8fffffff 	.word	0x8fffffff
 8000694:	f0ffffff 	.word	0xf0ffffff
 8000698:	ff3fffff 	.word	0xff3fffff
 800069c:	ffc3ffff 	.word	0xffc3ffff
 80006a0:	fffeffff 	.word	0xfffeffff
 80006a4:	ffffc7ff 	.word	0xffffc7ff
 80006a8:	fffff8ff 	.word	0xfffff8ff

080006ac <LPUART1_UART_Init>:
/*READ INIT*/
void LPUART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
//	LPUART1->CR1 |= USART_CR1_M1;				 // Конфігуруємо довжину слова - 7 біт (M1=1, M0=0)
//	LPUART1->CR2 &= ~USART_CR2_STOP;			 // Налаштовуємо стоп-біти - 1 стоп-біт (SBK=0)
//	LPUART1->CR1 &= ~USART_CR1_PCE;				 // Встановлюємо парність - без парності (PCE=0)
//	LPUART1->CR1 |= USART_CR1_RE | USART_CR1_TE; // Увімкнення режиму прийому та передачі (RE=1, TE=1)
//	LPUART1->CR1 |= USART_CR1_UE;				 // Увімкнення LPUART1
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <RTC_Init>:
/*READ INIT*/
void RTC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	// 1. Enable power and backup domain access
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 80006bc:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <RTC_Init+0xc0>)
 80006be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006c0:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <RTC_Init+0xc0>)
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	0549      	lsls	r1, r1, #21
 80006c6:	430a      	orrs	r2, r1
 80006c8:	639a      	str	r2, [r3, #56]	; 0x38
	SET_BIT(PWR->CR, PWR_CR_DBP);
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <RTC_Init+0xc4>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <RTC_Init+0xc4>)
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0049      	lsls	r1, r1, #1
 80006d4:	430a      	orrs	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]

	// 2. Enable LSE Oscillator
	SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <RTC_Init+0xc0>)
 80006da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <RTC_Init+0xc0>)
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	0049      	lsls	r1, r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	651a      	str	r2, [r3, #80]	; 0x50
	while (!(READ_BIT(RCC->CSR, RCC_CSR_LSERDY)))
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <RTC_Init+0xc0>)
 80006ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4013      	ands	r3, r2
 80006f2:	d0f9      	beq.n	80006e8 <RTC_Init+0x30>
	{
	}

	// 3. Set LSE as RTC clock source and enable RTC
	MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL_Msk, 0b01 << RCC_CSR_RTCSEL_Pos); // LSE selected as RTC clock
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <RTC_Init+0xc0>)
 80006f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <RTC_Init+0xc8>)
 80006fa:	401a      	ands	r2, r3
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <RTC_Init+0xc0>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	0249      	lsls	r1, r1, #9
 8000702:	430a      	orrs	r2, r1
 8000704:	651a      	str	r2, [r3, #80]	; 0x50
	SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <RTC_Init+0xc0>)
 8000708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <RTC_Init+0xc0>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	02c9      	lsls	r1, r1, #11
 8000710:	430a      	orrs	r2, r1
 8000712:	651a      	str	r2, [r3, #80]	; 0x50

	// 4. Disable RTC write protection
	RTC->WPR = 0xCA; // Step 1
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <RTC_Init+0xcc>)
 8000716:	22ca      	movs	r2, #202	; 0xca
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53; // Step 2
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <RTC_Init+0xcc>)
 800071c:	2253      	movs	r2, #83	; 0x53
 800071e:	625a      	str	r2, [r3, #36]	; 0x24

	// 5. Enter initialization mode
	SET_BIT(RTC->ISR, RTC_ISR_INIT);
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <RTC_Init+0xcc>)
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <RTC_Init+0xcc>)
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	430a      	orrs	r2, r1
 800072a:	60da      	str	r2, [r3, #12]
	while (!(READ_BIT(RTC->ISR, RTC_ISR_INITF)))
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <RTC_Init+0xcc>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	2240      	movs	r2, #64	; 0x40
 8000734:	4013      	ands	r3, r2
 8000736:	d0fa      	beq.n	800072e <RTC_Init+0x76>
	{
	}

	// 6. Set the time in BCD format (17:36:00)
	MODIFY_REG(RTC->TR,
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <RTC_Init+0xcc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a12      	ldr	r2, [pc, #72]	; (8000788 <RTC_Init+0xd0>)
 800073e:	401a      	ands	r2, r3
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <RTC_Init+0xcc>)
 8000742:	4912      	ldr	r1, [pc, #72]	; (800078c <RTC_Init+0xd4>)
 8000744:	430a      	orrs	r2, r1
 8000746:	601a      	str	r2, [r3, #0]
				   (0x6 << RTC_TR_MNU_Pos) | // Minute units (6 -> 36)
				   (0x0 << RTC_TR_ST_Pos) |	 // Second tens (0 -> 00)
				   (0x0 << RTC_TR_SU_Pos));	 // Second units (0 -> 00)

	// 7. Set the date in BCD format (01/02/2024, Monday)
	MODIFY_REG(RTC->DR,
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <RTC_Init+0xcc>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <RTC_Init+0xd8>)
 800074e:	401a      	ands	r2, r3
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <RTC_Init+0xcc>)
 8000752:	4910      	ldr	r1, [pc, #64]	; (8000794 <RTC_Init+0xdc>)
 8000754:	430a      	orrs	r2, r1
 8000756:	605a      	str	r2, [r3, #4]
				   (0x0 << RTC_DR_DT_Pos) |	 // Day tens (0 -> 01)
				   (0x1 << RTC_DR_DU_Pos) |	 // Day units (1 -> 01)
				   (0x2 << RTC_DR_WDU_Pos)); // Weekday (3 -> Monday)

	// 8. Exit initialization mode
	CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <RTC_Init+0xcc>)
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <RTC_Init+0xcc>)
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	438a      	bics	r2, r1
 8000762:	60da      	str	r2, [r3, #12]

	// 9. Re-enable RTC write protection
	RTC->WPR = 0xFE; // Disable write access for RTC register
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <RTC_Init+0xcc>)
 8000766:	22fe      	movs	r2, #254	; 0xfe
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x64; //				-||-
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <RTC_Init+0xcc>)
 800076c:	2264      	movs	r2, #100	; 0x64
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000
 800077c:	40007000 	.word	0x40007000
 8000780:	fffcffff 	.word	0xfffcffff
 8000784:	40002800 	.word	0x40002800
 8000788:	ffc08080 	.word	0xffc08080
 800078c:	00173600 	.word	0x00173600
 8000790:	ff0000c0 	.word	0xff0000c0
 8000794:	00244401 	.word	0x00244401

08000798 <TIM2_Init>:

void TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	// Увімкнення тактування GPIOA (для PA15, як PWM вихід)
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 800079c:	4b61      	ldr	r3, [pc, #388]	; (8000924 <TIM2_Init+0x18c>)
 800079e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a0:	4b60      	ldr	r3, [pc, #384]	; (8000924 <TIM2_Init+0x18c>)
 80007a2:	2101      	movs	r1, #1
 80007a4:	430a      	orrs	r2, r1
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин 15 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 15, 0b10, 0, 0b11); // BuzzerPin
 80007a8:	4b5f      	ldr	r3, [pc, #380]	; (8000928 <TIM2_Init+0x190>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	089a      	lsrs	r2, r3, #2
 80007b0:	4b5d      	ldr	r3, [pc, #372]	; (8000928 <TIM2_Init+0x190>)
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	0609      	lsls	r1, r1, #24
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	4b5b      	ldr	r3, [pc, #364]	; (8000928 <TIM2_Init+0x190>)
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	4b5a      	ldr	r3, [pc, #360]	; (8000928 <TIM2_Init+0x190>)
 80007c0:	495a      	ldr	r1, [pc, #360]	; (800092c <TIM2_Init+0x194>)
 80007c2:	400a      	ands	r2, r1
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	4b58      	ldr	r3, [pc, #352]	; (8000928 <TIM2_Init+0x190>)
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	4b57      	ldr	r3, [pc, #348]	; (8000928 <TIM2_Init+0x190>)
 80007cc:	21c0      	movs	r1, #192	; 0xc0
 80007ce:	0609      	lsls	r1, r1, #24
 80007d0:	430a      	orrs	r2, r1
 80007d2:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AF1 для пина 15
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL15_Msk, 0b0101 << GPIO_AFRH_AFSEL15_Pos);
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	091a      	lsrs	r2, r3, #4
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	21a0      	movs	r1, #160	; 0xa0
 80007e4:	05c9      	lsls	r1, r1, #23
 80007e6:	430a      	orrs	r2, r1
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24

	// Увімкнення тактування TIM2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80007ea:	4b4e      	ldr	r3, [pc, #312]	; (8000924 <TIM2_Init+0x18c>)
 80007ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ee:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <TIM2_Init+0x18c>)
 80007f0:	2101      	movs	r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	639a      	str	r2, [r3, #56]	; 0x38
	CLEAR_BIT(TIM2->CR1, TIM_CR1_CEN);
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	2101      	movs	r1, #1
 8000802:	438a      	bics	r2, r1
 8000804:	601a      	str	r2, [r3, #0]

	/*Настройка таймера 2*/
	// TIMx control register 1 (TIMx_CR1)
	// SET_BIT(TIM2->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM2->CR1, TIM_CR1_UDIS);								 // Генерировать событие Update
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	2102      	movs	r1, #2
 8000812:	438a      	bics	r2, r1
 8000814:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_URS);								 // Генерировать прерывание
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2104      	movs	r1, #4
 8000822:	438a      	bics	r2, r1
 8000824:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_OPM);								 // One pulse mode off(Счетчик не останавливается при обновлении)
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2108      	movs	r1, #8
 8000832:	438a      	bics	r2, r1
 8000834:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM2->CR1, TIM_CR1_DIR);								 // Считаем вверх
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	2110      	movs	r1, #16
 8000842:	438a      	bics	r2, r1
 8000844:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM2->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); // Выравнивание по краю
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	2160      	movs	r1, #96	; 0x60
 8000852:	438a      	bics	r2, r1
 8000854:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM2->CR1, TIM_CR1_ARPE);								 // Auto-reload preload enable
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	430a      	orrs	r2, r1
 8000864:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM2->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); // Предделение выключено
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	492f      	ldr	r1, [pc, #188]	; (8000930 <TIM2_Init+0x198>)
 8000872:	400a      	ands	r2, r1
 8000874:	601a      	str	r2, [r3, #0]

	/*Настройка прерываний*/
	// TIMx DMA/Interrupt enable register (TIMx_DIER)
	SET_BIT(TIM2->DIER, TIM_DIER_UIE); // Update interrupt enable
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	2101      	movs	r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	60da      	str	r2, [r3, #12]

	// TIMx status register (TIMx_SR) - Статусные регистры

	TIM2->PSC = 3200 - 1;
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	4a2a      	ldr	r2, [pc, #168]	; (8000934 <TIM2_Init+0x19c>)
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10000 - 1;
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	4a29      	ldr	r2, [pc, #164]	; (8000938 <TIM2_Init+0x1a0>)
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM2_IRQn); // Разрешить прерывания по таймеру 2
 8000896:	200f      	movs	r0, #15
 8000898:	f7ff fdac 	bl	80003f4 <__NVIC_EnableIRQ>
	/*Настройка шим(Канал 1)*/
	MODIFY_REG(TIM2->CCMR1, TIM_CCMR1_CC1S_Msk, 0b00 << TIM_CCMR1_CC1S_Pos);  // CC1 channel is configured as output
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	699a      	ldr	r2, [r3, #24]
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2103      	movs	r1, #3
 80008a8:	438a      	bics	r2, r1
 80008aa:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM2->CCMR1, TIM_CCMR1_OC1FE);								  // Fast mode disable
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	2104      	movs	r1, #4
 80008b8:	438a      	bics	r2, r1
 80008ba:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM2->CCMR1, TIM_CCMR1_OC1PE);									  // Preload enable
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	699a      	ldr	r2, [r3, #24]
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2108      	movs	r1, #8
 80008c8:	430a      	orrs	r2, r1
 80008ca:	619a      	str	r2, [r3, #24]
	MODIFY_REG(TIM2->CCMR1, TIM_CCMR1_OC1M_Msk, 0b110 << TIM_CCMR1_OC1M_Pos); // PWM MODE 1
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	2270      	movs	r2, #112	; 0x70
 80008d4:	4393      	bics	r3, r2
 80008d6:	001a      	movs	r2, r3
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2160      	movs	r1, #96	; 0x60
 80008de:	430a      	orrs	r2, r1
 80008e0:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM2->CCMR1, TIM_CCMR1_OC1CE);								  // OC1Ref is not affected by the ETRF input
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	699a      	ldr	r2, [r3, #24]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	438a      	bics	r2, r1
 80008f0:	619a      	str	r2, [r3, #24]

	/*Запуск ШИМ*/
	// 15.4.9 TIMx capture/compare enable register (TIMx_CCER)
	SET_BIT(TIM2->CCER, TIM_CCER_CC1E);	   // On - OC1 signal is output on the corresponding output pin.
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	6a1a      	ldr	r2, [r3, #32]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(TIM21->CCER, TIM_CCER_CC1P); // OC1 active high.
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <TIM2_Init+0x1a4>)
 8000904:	6a1a      	ldr	r2, [r3, #32]
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <TIM2_Init+0x1a4>)
 8000908:	2102      	movs	r1, #2
 800090a:	438a      	bics	r2, r1
 800090c:	621a      	str	r2, [r3, #32]

	SET_BIT(TIM2->CR1, TIM_CR1_CEN);
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2101      	movs	r1, #1
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	50000400 	.word	0x50000400
 800092c:	ffff7fff 	.word	0xffff7fff
 8000930:	fffffcff 	.word	0xfffffcff
 8000934:	00000c7f 	.word	0x00000c7f
 8000938:	0000270f 	.word	0x0000270f
 800093c:	40010800 	.word	0x40010800

08000940 <TIM21_Init>:

void TIM21_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	// Увімкнення тактування GPIOB (для PB5, як PWM вихід)
	RCC->IOPENR |= RCC_IOPENR_IOPBEN;
 8000944:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <TIM21_Init+0x144>)
 8000946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000948:	4b4e      	ldr	r3, [pc, #312]	; (8000a84 <TIM21_Init+0x144>)
 800094a:	2102      	movs	r1, #2
 800094c:	430a      	orrs	r2, r1
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин 5 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 5, 0b10, 0, 0b11); // mainLED
 8000950:	4b4d      	ldr	r3, [pc, #308]	; (8000a88 <TIM21_Init+0x148>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a4d      	ldr	r2, [pc, #308]	; (8000a8c <TIM21_Init+0x14c>)
 8000956:	401a      	ands	r2, r3
 8000958:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <TIM21_Init+0x148>)
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	0109      	lsls	r1, r1, #4
 800095e:	430a      	orrs	r2, r1
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <TIM21_Init+0x148>)
 8000964:	685a      	ldr	r2, [r3, #4]
 8000966:	4b48      	ldr	r3, [pc, #288]	; (8000a88 <TIM21_Init+0x148>)
 8000968:	2120      	movs	r1, #32
 800096a:	438a      	bics	r2, r1
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	4b46      	ldr	r3, [pc, #280]	; (8000a88 <TIM21_Init+0x148>)
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <TIM21_Init+0x148>)
 8000974:	21c0      	movs	r1, #192	; 0xc0
 8000976:	0109      	lsls	r1, r1, #4
 8000978:	430a      	orrs	r2, r1
 800097a:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AF1 для пина 5
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL5_Msk, 0b0101 << GPIO_AFRL_AFSEL5_Pos);
 800097c:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <TIM21_Init+0x148>)
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	4a43      	ldr	r2, [pc, #268]	; (8000a90 <TIM21_Init+0x150>)
 8000982:	401a      	ands	r2, r3
 8000984:	4b40      	ldr	r3, [pc, #256]	; (8000a88 <TIM21_Init+0x148>)
 8000986:	21a0      	movs	r1, #160	; 0xa0
 8000988:	03c9      	lsls	r1, r1, #15
 800098a:	430a      	orrs	r2, r1
 800098c:	621a      	str	r2, [r3, #32]

	// Увімкнення тактування TIM21
	RCC->APB2ENR |= RCC_APB2ENR_TIM21EN;
 800098e:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <TIM21_Init+0x144>)
 8000990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000992:	4b3c      	ldr	r3, [pc, #240]	; (8000a84 <TIM21_Init+0x144>)
 8000994:	2104      	movs	r1, #4
 8000996:	430a      	orrs	r2, r1
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
	CLEAR_BIT(TIM21->CR1, TIM_CR1_CEN);
 800099a:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <TIM21_Init+0x154>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <TIM21_Init+0x154>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	438a      	bics	r2, r1
 80009a4:	601a      	str	r2, [r3, #0]

	/*Настройка таймера 21*/
	// TIMx control register 1 (TIMx_CR1)
	// SET_BIT(TIM21->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM21->CR1, TIM_CR1_UDIS);							  // Генерировать событие Update
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <TIM21_Init+0x154>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <TIM21_Init+0x154>)
 80009ac:	2102      	movs	r1, #2
 80009ae:	438a      	bics	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_URS);								  // Генерировать прерывание
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <TIM21_Init+0x154>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <TIM21_Init+0x154>)
 80009b8:	2104      	movs	r1, #4
 80009ba:	438a      	bics	r2, r1
 80009bc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_OPM);								  // One pulse mode off(Счетчик не останавливается при обновлении)
 80009be:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <TIM21_Init+0x154>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <TIM21_Init+0x154>)
 80009c4:	2108      	movs	r1, #8
 80009c6:	438a      	bics	r2, r1
 80009c8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_DIR);								  // Считаем вверх
 80009ca:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <TIM21_Init+0x154>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <TIM21_Init+0x154>)
 80009d0:	2110      	movs	r1, #16
 80009d2:	438a      	bics	r2, r1
 80009d4:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM21->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); // Выравнивание по краю
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <TIM21_Init+0x154>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <TIM21_Init+0x154>)
 80009dc:	2160      	movs	r1, #96	; 0x60
 80009de:	438a      	bics	r2, r1
 80009e0:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM21->CR1, TIM_CR1_ARPE);								  // Auto-reload preload enable
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <TIM21_Init+0x154>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <TIM21_Init+0x154>)
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	430a      	orrs	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM21->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); // Предделение выключено
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <TIM21_Init+0x154>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <TIM21_Init+0x154>)
 80009f4:	4928      	ldr	r1, [pc, #160]	; (8000a98 <TIM21_Init+0x158>)
 80009f6:	400a      	ands	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]

	/*Настройка прерываний*/
	// TIMx DMA/Interrupt enable register (TIMx_DIER)
	SET_BIT(TIM21->DIER, TIM_DIER_UIE); // Update interrupt enable
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <TIM21_Init+0x154>)
 80009fc:	68da      	ldr	r2, [r3, #12]
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <TIM21_Init+0x154>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	60da      	str	r2, [r3, #12]

	// TIMx status register (TIMx_SR) - Статусные регистры
	TIM21->PSC = 32 - 1;
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <TIM21_Init+0x154>)
 8000a08:	221f      	movs	r2, #31
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM21->ARR = 10000 - 1;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <TIM21_Init+0x154>)
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <TIM21_Init+0x15c>)
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM21_IRQn); // Разрешить прерывания по таймеру 21
 8000a12:	2014      	movs	r0, #20
 8000a14:	f7ff fcee 	bl	80003f4 <__NVIC_EnableIRQ>

	/*Настройка шим(Канал 1)*/
	MODIFY_REG(TIM21->CCMR1, TIM_CCMR1_CC1S_Msk, 0b00 << TIM_CCMR1_CC1S_Pos);  // CC1 channel is configured as output
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <TIM21_Init+0x154>)
 8000a1a:	699a      	ldr	r2, [r3, #24]
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <TIM21_Init+0x154>)
 8000a1e:	2103      	movs	r1, #3
 8000a20:	438a      	bics	r2, r1
 8000a22:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM21->CCMR1, TIM_CCMR1_OC1FE);								   // Fast mode disable
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <TIM21_Init+0x154>)
 8000a26:	699a      	ldr	r2, [r3, #24]
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <TIM21_Init+0x154>)
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	438a      	bics	r2, r1
 8000a2e:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM21->CCMR1, TIM_CCMR1_OC1PE);									   // Preload enable
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <TIM21_Init+0x154>)
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <TIM21_Init+0x154>)
 8000a36:	2108      	movs	r1, #8
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	619a      	str	r2, [r3, #24]
	MODIFY_REG(TIM21->CCMR1, TIM_CCMR1_OC1M_Msk, 0b110 << TIM_CCMR1_OC1M_Pos); // PWM MODE 1
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <TIM21_Init+0x154>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	2270      	movs	r2, #112	; 0x70
 8000a42:	4393      	bics	r3, r2
 8000a44:	001a      	movs	r2, r3
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <TIM21_Init+0x154>)
 8000a48:	2160      	movs	r1, #96	; 0x60
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM21->CCMR1, TIM_CCMR1_OC1CE);								   // OC1Ref is not affected by the ETRF input
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <TIM21_Init+0x154>)
 8000a50:	699a      	ldr	r2, [r3, #24]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <TIM21_Init+0x154>)
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	438a      	bics	r2, r1
 8000a58:	619a      	str	r2, [r3, #24]

	/*Запуск ШИМ*/
	// TIMx capture/compare enable register (TIMx_CCER)
	SET_BIT(TIM21->CCER, TIM_CCER_CC1E); // On - OC1 signal is output on the corresponding output pin.
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <TIM21_Init+0x154>)
 8000a5c:	6a1a      	ldr	r2, [r3, #32]
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <TIM21_Init+0x154>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	621a      	str	r2, [r3, #32]
	SET_BIT(TIM21->CCER, TIM_CCER_CC1P); // OC1 active high.
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <TIM21_Init+0x154>)
 8000a68:	6a1a      	ldr	r2, [r3, #32]
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <TIM21_Init+0x154>)
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	621a      	str	r2, [r3, #32]

	SET_BIT(TIM21->CR1, TIM_CR1_CEN);
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <TIM21_Init+0x154>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <TIM21_Init+0x154>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000
 8000a88:	50000400 	.word	0x50000400
 8000a8c:	fffff3ff 	.word	0xfffff3ff
 8000a90:	ff0fffff 	.word	0xff0fffff
 8000a94:	40010800 	.word	0x40010800
 8000a98:	fffffcff 	.word	0xfffffcff
 8000a9c:	0000270f 	.word	0x0000270f

08000aa0 <GPIO_Init>:

void GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	// Включення тактування портів A, B, C
	RCC->IOPENR |= RCC_IOPENR_IOPAEN | RCC_IOPENR_IOPBEN | RCC_IOPENR_IOPCEN;
 8000aa4:	4bfd      	ldr	r3, [pc, #1012]	; (8000e9c <GPIO_Init+0x3fc>)
 8000aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa8:	4bfc      	ldr	r3, [pc, #1008]	; (8000e9c <GPIO_Init+0x3fc>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	430a      	orrs	r2, r1
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c

	// Налаштування світлодіодів (виводи PA, PB)
	CONFIGURE_GPIO(GPIOA, 7, 0b01, 0, 0b11);  // LEDa
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4afa      	ldr	r2, [pc, #1000]	; (8000ea0 <GPIO_Init+0x400>)
 8000ab8:	401a      	ands	r2, r3
 8000aba:	23a0      	movs	r3, #160	; 0xa0
 8000abc:	05db      	lsls	r3, r3, #23
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	01c9      	lsls	r1, r1, #7
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	23a0      	movs	r3, #160	; 0xa0
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	438a      	bics	r2, r1
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	23a0      	movs	r3, #160	; 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	23a0      	movs	r3, #160	; 0xa0
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	21c0      	movs	r1, #192	; 0xc0
 8000ae2:	0209      	lsls	r1, r1, #8
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 1, 0b01, 0, 0b11);  // LEDb
 8000ae8:	4bee      	ldr	r3, [pc, #952]	; (8000ea4 <GPIO_Init+0x404>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	220c      	movs	r2, #12
 8000aee:	4393      	bics	r3, r2
 8000af0:	001a      	movs	r2, r3
 8000af2:	4bec      	ldr	r3, [pc, #944]	; (8000ea4 <GPIO_Init+0x404>)
 8000af4:	2104      	movs	r1, #4
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	4bea      	ldr	r3, [pc, #936]	; (8000ea4 <GPIO_Init+0x404>)
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	4be9      	ldr	r3, [pc, #932]	; (8000ea4 <GPIO_Init+0x404>)
 8000b00:	2102      	movs	r1, #2
 8000b02:	438a      	bics	r2, r1
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	4be7      	ldr	r3, [pc, #924]	; (8000ea4 <GPIO_Init+0x404>)
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	4be6      	ldr	r3, [pc, #920]	; (8000ea4 <GPIO_Init+0x404>)
 8000b0c:	210c      	movs	r1, #12
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 6, 0b01, 0, 0b11);  // LEDc
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4ae3      	ldr	r2, [pc, #908]	; (8000ea8 <GPIO_Init+0x408>)
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0149      	lsls	r1, r1, #5
 8000b24:	430a      	orrs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	23a0      	movs	r3, #160	; 0xa0
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	438a      	bics	r2, r1
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	23a0      	movs	r3, #160	; 0xa0
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	23a0      	movs	r3, #160	; 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	21c0      	movs	r1, #192	; 0xc0
 8000b44:	0189      	lsls	r1, r1, #6
 8000b46:	430a      	orrs	r2, r1
 8000b48:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 5, 0b01, 0, 0b11);  // LEDd
 8000b4a:	23a0      	movs	r3, #160	; 0xa0
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4ad6      	ldr	r2, [pc, #856]	; (8000eac <GPIO_Init+0x40c>)
 8000b52:	401a      	ands	r2, r3
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	00c9      	lsls	r1, r1, #3
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	23a0      	movs	r3, #160	; 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	438a      	bics	r2, r1
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	23a0      	movs	r3, #160	; 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	23a0      	movs	r3, #160	; 0xa0
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	21c0      	movs	r1, #192	; 0xc0
 8000b7c:	0109      	lsls	r1, r1, #4
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 11, 0b01, 0, 0b11); // LEDe
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4ac9      	ldr	r2, [pc, #804]	; (8000eb0 <GPIO_Init+0x410>)
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	23a0      	movs	r3, #160	; 0xa0
 8000b8e:	05db      	lsls	r3, r3, #23
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	03c9      	lsls	r1, r1, #15
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	23a0      	movs	r3, #160	; 0xa0
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	23a0      	movs	r3, #160	; 0xa0
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	49c4      	ldr	r1, [pc, #784]	; (8000eb4 <GPIO_Init+0x414>)
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	23a0      	movs	r3, #160	; 0xa0
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	23a0      	movs	r3, #160	; 0xa0
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	21c0      	movs	r1, #192	; 0xc0
 8000bb4:	0409      	lsls	r1, r1, #16
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 9, 0b01, 0, 0b11);  // LEDf
 8000bba:	23a0      	movs	r3, #160	; 0xa0
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4abd      	ldr	r2, [pc, #756]	; (8000eb8 <GPIO_Init+0x418>)
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	23a0      	movs	r3, #160	; 0xa0
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	02c9      	lsls	r1, r1, #11
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	49b8      	ldr	r1, [pc, #736]	; (8000ebc <GPIO_Init+0x41c>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	23a0      	movs	r3, #160	; 0xa0
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	23a0      	movs	r3, #160	; 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	21c0      	movs	r1, #192	; 0xc0
 8000bec:	0309      	lsls	r1, r1, #12
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 0, 0b01, 0, 0b11);  // LEDg
 8000bf2:	4bac      	ldr	r3, [pc, #688]	; (8000ea4 <GPIO_Init+0x404>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	4393      	bics	r3, r2
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	4ba9      	ldr	r3, [pc, #676]	; (8000ea4 <GPIO_Init+0x404>)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	4ba7      	ldr	r3, [pc, #668]	; (8000ea4 <GPIO_Init+0x404>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4ba6      	ldr	r3, [pc, #664]	; (8000ea4 <GPIO_Init+0x404>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	438a      	bics	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	4ba4      	ldr	r3, [pc, #656]	; (8000ea4 <GPIO_Init+0x404>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	4ba3      	ldr	r3, [pc, #652]	; (8000ea4 <GPIO_Init+0x404>)
 8000c16:	2103      	movs	r1, #3
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 3, 0b01, 0, 0b11);  // LEDdp
 8000c1c:	4ba1      	ldr	r3, [pc, #644]	; (8000ea4 <GPIO_Init+0x404>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	22c0      	movs	r2, #192	; 0xc0
 8000c22:	4393      	bics	r3, r2
 8000c24:	001a      	movs	r2, r3
 8000c26:	4b9f      	ldr	r3, [pc, #636]	; (8000ea4 <GPIO_Init+0x404>)
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	4b9d      	ldr	r3, [pc, #628]	; (8000ea4 <GPIO_Init+0x404>)
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	4b9c      	ldr	r3, [pc, #624]	; (8000ea4 <GPIO_Init+0x404>)
 8000c34:	2108      	movs	r1, #8
 8000c36:	438a      	bics	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	4b9a      	ldr	r3, [pc, #616]	; (8000ea4 <GPIO_Init+0x404>)
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	4b99      	ldr	r3, [pc, #612]	; (8000ea4 <GPIO_Init+0x404>)
 8000c40:	21c0      	movs	r1, #192	; 0xc0
 8000c42:	430a      	orrs	r2, r1
 8000c44:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 3, 0b01, 0, 0b11);  // LEDD1
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	22c0      	movs	r2, #192	; 0xc0
 8000c4e:	4393      	bics	r3, r2
 8000c50:	001a      	movs	r2, r3
 8000c52:	23a0      	movs	r3, #160	; 0xa0
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	23a0      	movs	r3, #160	; 0xa0
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2108      	movs	r1, #8
 8000c68:	438a      	bics	r2, r1
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	23a0      	movs	r3, #160	; 0xa0
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	23a0      	movs	r3, #160	; 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	21c0      	movs	r1, #192	; 0xc0
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 4, 0b01, 0, 0b11);  // LEDD2
 8000c7c:	23a0      	movs	r3, #160	; 0xa0
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a8f      	ldr	r2, [pc, #572]	; (8000ec0 <GPIO_Init+0x420>)
 8000c84:	401a      	ands	r2, r3
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	0049      	lsls	r1, r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	23a0      	movs	r3, #160	; 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	23a0      	movs	r3, #160	; 0xa0
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	21c0      	movs	r1, #192	; 0xc0
 8000cae:	0089      	lsls	r1, r1, #2
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 12, 0b01, 0, 0b11); // LEDD3
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a82      	ldr	r2, [pc, #520]	; (8000ec4 <GPIO_Init+0x424>)
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	23a0      	movs	r3, #160	; 0xa0
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	0449      	lsls	r1, r1, #17
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	23a0      	movs	r3, #160	; 0xa0
 8000ccc:	05db      	lsls	r3, r3, #23
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	23a0      	movs	r3, #160	; 0xa0
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	497c      	ldr	r1, [pc, #496]	; (8000ec8 <GPIO_Init+0x428>)
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	23a0      	movs	r3, #160	; 0xa0
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	23a0      	movs	r3, #160	; 0xa0
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	21c0      	movs	r1, #192	; 0xc0
 8000ce6:	0489      	lsls	r1, r1, #18
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 4, 0b01, 0, 0b11);  // LEDD4
 8000cec:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <GPIO_Init+0x404>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a73      	ldr	r2, [pc, #460]	; (8000ec0 <GPIO_Init+0x420>)
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <GPIO_Init+0x404>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0049      	lsls	r1, r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	4b69      	ldr	r3, [pc, #420]	; (8000ea4 <GPIO_Init+0x404>)
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <GPIO_Init+0x404>)
 8000d04:	2110      	movs	r1, #16
 8000d06:	438a      	bics	r2, r1
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	4b66      	ldr	r3, [pc, #408]	; (8000ea4 <GPIO_Init+0x404>)
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	4b65      	ldr	r3, [pc, #404]	; (8000ea4 <GPIO_Init+0x404>)
 8000d10:	21c0      	movs	r1, #192	; 0xc0
 8000d12:	0089      	lsls	r1, r1, #2
 8000d14:	430a      	orrs	r2, r1
 8000d16:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 10, 0b01, 0, 0b11); // LEDl1l2
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a6b      	ldr	r2, [pc, #428]	; (8000ecc <GPIO_Init+0x42c>)
 8000d20:	401a      	ands	r2, r3
 8000d22:	23a0      	movs	r3, #160	; 0xa0
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0349      	lsls	r1, r1, #13
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	23a0      	movs	r3, #160	; 0xa0
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	23a0      	movs	r3, #160	; 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	4965      	ldr	r1, [pc, #404]	; (8000ed0 <GPIO_Init+0x430>)
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	23a0      	movs	r3, #160	; 0xa0
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	23a0      	movs	r3, #160	; 0xa0
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	21c0      	movs	r1, #192	; 0xc0
 8000d4a:	0389      	lsls	r1, r1, #14
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 8, 0b01, 0, 0b11);  // LEDalarm
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a5f      	ldr	r2, [pc, #380]	; (8000ed4 <GPIO_Init+0x434>)
 8000d58:	401a      	ands	r2, r3
 8000d5a:	23a0      	movs	r3, #160	; 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	0249      	lsls	r1, r1, #9
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	23a0      	movs	r3, #160	; 0xa0
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	4959      	ldr	r1, [pc, #356]	; (8000ed8 <GPIO_Init+0x438>)
 8000d72:	400a      	ands	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	23a0      	movs	r3, #160	; 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	23a0      	movs	r3, #160	; 0xa0
 8000d7e:	05db      	lsls	r3, r3, #23
 8000d80:	21c0      	movs	r1, #192	; 0xc0
 8000d82:	0289      	lsls	r1, r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOC, 15, 0b01, 0, 0b11); // pinEN
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <GPIO_Init+0x43c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	089a      	lsrs	r2, r3, #2
 8000d90:	4b52      	ldr	r3, [pc, #328]	; (8000edc <GPIO_Init+0x43c>)
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	05c9      	lsls	r1, r1, #23
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <GPIO_Init+0x43c>)
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	4b4f      	ldr	r3, [pc, #316]	; (8000edc <GPIO_Init+0x43c>)
 8000da0:	494f      	ldr	r1, [pc, #316]	; (8000ee0 <GPIO_Init+0x440>)
 8000da2:	400a      	ands	r2, r1
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	4b4d      	ldr	r3, [pc, #308]	; (8000edc <GPIO_Init+0x43c>)
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <GPIO_Init+0x43c>)
 8000dac:	21c0      	movs	r1, #192	; 0xc0
 8000dae:	0609      	lsls	r1, r1, #24
 8000db0:	430a      	orrs	r2, r1
 8000db2:	609a      	str	r2, [r3, #8]

	// Налаштування кнопок із EXTI
	CONFIGURE_GPIO(GPIOA, 0, 0b00, 0, 0b11); // decrement
 8000db4:	23a0      	movs	r3, #160	; 0xa0
 8000db6:	05db      	lsls	r3, r3, #23
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	438a      	bics	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	23a0      	movs	r3, #160	; 0xa0
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	23a0      	movs	r3, #160	; 0xa0
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	2101      	movs	r1, #1
 8000dd0:	438a      	bics	r2, r1
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	23a0      	movs	r3, #160	; 0xa0
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	2103      	movs	r1, #3
 8000de0:	430a      	orrs	r2, r1
 8000de2:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(0, 0b000, 0, 1, 0);		 // EXTI для decrement
 8000de4:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <GPIO_Init+0x444>)
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <GPIO_Init+0x444>)
 8000dea:	210f      	movs	r1, #15
 8000dec:	438a      	bics	r2, r1
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <GPIO_Init+0x448>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <GPIO_Init+0x448>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ee8 <GPIO_Init+0x448>)
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <GPIO_Init+0x448>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOA, 1, 0b00, 0, 0b11); // enter
 8000e08:	23a0      	movs	r3, #160	; 0xa0
 8000e0a:	05db      	lsls	r3, r3, #23
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	23a0      	movs	r3, #160	; 0xa0
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	210c      	movs	r1, #12
 8000e14:	438a      	bics	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	23a0      	movs	r3, #160	; 0xa0
 8000e1a:	05db      	lsls	r3, r3, #23
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	2102      	movs	r1, #2
 8000e24:	438a      	bics	r2, r1
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	23a0      	movs	r3, #160	; 0xa0
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	210c      	movs	r1, #12
 8000e34:	430a      	orrs	r2, r1
 8000e36:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(1, 0b000, 0, 1, 0);		 // EXTI для enter
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <GPIO_Init+0x444>)
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <GPIO_Init+0x444>)
 8000e3e:	21f0      	movs	r1, #240	; 0xf0
 8000e40:	438a      	bics	r2, r1
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <GPIO_Init+0x448>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <GPIO_Init+0x448>)
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <GPIO_Init+0x448>)
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <GPIO_Init+0x448>)
 8000e56:	2102      	movs	r1, #2
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOA, 2, 0b00, 0, 0b11); // increment
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	23a0      	movs	r3, #160	; 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2130      	movs	r1, #48	; 0x30
 8000e68:	438a      	bics	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	2104      	movs	r1, #4
 8000e78:	438a      	bics	r2, r1
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	23a0      	movs	r3, #160	; 0xa0
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	2130      	movs	r1, #48	; 0x30
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(2, 0b000, 0, 1, 0);		 // EXTI для increment
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <GPIO_Init+0x444>)
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <GPIO_Init+0x444>)
 8000e92:	4916      	ldr	r1, [pc, #88]	; (8000eec <GPIO_Init+0x44c>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	e02a      	b.n	8000ef0 <GPIO_Init+0x450>
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	ffff3fff 	.word	0xffff3fff
 8000ea4:	50000400 	.word	0x50000400
 8000ea8:	ffffcfff 	.word	0xffffcfff
 8000eac:	fffff3ff 	.word	0xfffff3ff
 8000eb0:	ff3fffff 	.word	0xff3fffff
 8000eb4:	fffff7ff 	.word	0xfffff7ff
 8000eb8:	fff3ffff 	.word	0xfff3ffff
 8000ebc:	fffffdff 	.word	0xfffffdff
 8000ec0:	fffffcff 	.word	0xfffffcff
 8000ec4:	fcffffff 	.word	0xfcffffff
 8000ec8:	ffffefff 	.word	0xffffefff
 8000ecc:	ffcfffff 	.word	0xffcfffff
 8000ed0:	fffffbff 	.word	0xfffffbff
 8000ed4:	fffcffff 	.word	0xfffcffff
 8000ed8:	fffffeff 	.word	0xfffffeff
 8000edc:	50000800 	.word	0x50000800
 8000ee0:	ffff7fff 	.word	0xffff7fff
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40010400 	.word	0x40010400
 8000eec:	fffff0ff 	.word	0xfffff0ff
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <GPIO_Init+0x4cc>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <GPIO_Init+0x4cc>)
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <GPIO_Init+0x4cc>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <GPIO_Init+0x4cc>)
 8000f02:	2104      	movs	r1, #4
 8000f04:	430a      	orrs	r2, r1
 8000f06:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOB, 9, 0b00, 0, 0b11); // pwr
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <GPIO_Init+0x4d0>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <GPIO_Init+0x4d0>)
 8000f0e:	4919      	ldr	r1, [pc, #100]	; (8000f74 <GPIO_Init+0x4d4>)
 8000f10:	400a      	ands	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <GPIO_Init+0x4d0>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <GPIO_Init+0x4d0>)
 8000f1a:	4917      	ldr	r1, [pc, #92]	; (8000f78 <GPIO_Init+0x4d8>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <GPIO_Init+0x4d0>)
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <GPIO_Init+0x4d0>)
 8000f26:	21c0      	movs	r1, #192	; 0xc0
 8000f28:	0309      	lsls	r1, r1, #12
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(9, 0b000, 2, 3, 1);		 // EXTI для pwr з обробкою по зростанню
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <GPIO_Init+0x4dc>)
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <GPIO_Init+0x4dc>)
 8000f34:	21f0      	movs	r1, #240	; 0xf0
 8000f36:	438a      	bics	r2, r1
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <GPIO_Init+0x4cc>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <GPIO_Init+0x4cc>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0089      	lsls	r1, r1, #2
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <GPIO_Init+0x4cc>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <GPIO_Init+0x4cc>)
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	0089      	lsls	r1, r1, #2
 8000f52:	430a      	orrs	r2, r1
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <GPIO_Init+0x4cc>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <GPIO_Init+0x4cc>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0089      	lsls	r1, r1, #2
 8000f60:	430a      	orrs	r2, r1
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	40010400 	.word	0x40010400
 8000f70:	50000400 	.word	0x50000400
 8000f74:	fff3ffff 	.word	0xfff3ffff
 8000f78:	fffffdff 	.word	0xfffffdff
 8000f7c:	40010000 	.word	0x40010000

08000f80 <Delay_ms>:

void Delay_ms(uint32_t Milliseconds)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <Delay_ms+0x2c>)
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
	while (Delay_counter_ms != 0)
 8000f8e:	e004      	b.n	8000f9a <Delay_ms+0x1a>
	{
		Delay_counter_ms--;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <Delay_ms+0x2c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <Delay_ms+0x2c>)
 8000f98:	601a      	str	r2, [r3, #0]
	while (Delay_counter_ms != 0)
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <Delay_ms+0x2c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f6      	bne.n	8000f90 <Delay_ms+0x10>
	}
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000328 	.word	0x20000328

08000fb0 <intToChar>:

	return result * fractionalMultiplier;
}

char intToChar(int num)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	switch (num)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	d819      	bhi.n	8000ff2 <intToChar+0x42>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	009a      	lsls	r2, r3, #2
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <intToChar+0x4c>)
 8000fc4:	18d3      	adds	r3, r2, r3
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	469f      	mov	pc, r3
	{
	case 0:
		return '0';
 8000fca:	2330      	movs	r3, #48	; 0x30
 8000fcc:	e012      	b.n	8000ff4 <intToChar+0x44>
	case 1:
		return '1';
 8000fce:	2331      	movs	r3, #49	; 0x31
 8000fd0:	e010      	b.n	8000ff4 <intToChar+0x44>
	case 2:
		return '2';
 8000fd2:	2332      	movs	r3, #50	; 0x32
 8000fd4:	e00e      	b.n	8000ff4 <intToChar+0x44>
	case 3:
		return '3';
 8000fd6:	2333      	movs	r3, #51	; 0x33
 8000fd8:	e00c      	b.n	8000ff4 <intToChar+0x44>
	case 4:
		return '4';
 8000fda:	2334      	movs	r3, #52	; 0x34
 8000fdc:	e00a      	b.n	8000ff4 <intToChar+0x44>
	case 5:
		return '5';
 8000fde:	2335      	movs	r3, #53	; 0x35
 8000fe0:	e008      	b.n	8000ff4 <intToChar+0x44>
	case 6:
		return '6';
 8000fe2:	2336      	movs	r3, #54	; 0x36
 8000fe4:	e006      	b.n	8000ff4 <intToChar+0x44>
	case 7:
		return '7';
 8000fe6:	2337      	movs	r3, #55	; 0x37
 8000fe8:	e004      	b.n	8000ff4 <intToChar+0x44>
	case 8:
		return '8';
 8000fea:	2338      	movs	r3, #56	; 0x38
 8000fec:	e002      	b.n	8000ff4 <intToChar+0x44>
	case 9:
		return '9';
 8000fee:	2339      	movs	r3, #57	; 0x39
 8000ff0:	e000      	b.n	8000ff4 <intToChar+0x44>
	default:
		return '?'; // Повертаємо '?' для невідомого числа
 8000ff2:	233f      	movs	r3, #63	; 0x3f
	}
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08002084 	.word	0x08002084

08001000 <writeCHARSEG>:

void writeCHARSEG(char CHAR, int seg)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	0002      	movs	r2, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	701a      	strb	r2, [r3, #0]
	switch (seg)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b03      	cmp	r3, #3
 8001012:	d049      	beq.n	80010a8 <writeCHARSEG+0xa8>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b03      	cmp	r3, #3
 8001018:	dc59      	bgt.n	80010ce <writeCHARSEG+0xce>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d02f      	beq.n	8001080 <writeCHARSEG+0x80>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	dc53      	bgt.n	80010ce <writeCHARSEG+0xce>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <writeCHARSEG+0x34>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d013      	beq.n	800105a <writeCHARSEG+0x5a>
 8001032:	e04c      	b.n	80010ce <writeCHARSEG+0xce>
	{
	case 0:
		LEDD1_ON();
 8001034:	23a0      	movs	r3, #160	; 0xa0
 8001036:	05db      	lsls	r3, r3, #23
 8001038:	2208      	movs	r2, #8
 800103a:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0352      	lsls	r2, r2, #13
 8001044:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 8001046:	23a0      	movs	r3, #160	; 0xa0
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	0552      	lsls	r2, r2, #21
 800104e:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 8001050:	4bef      	ldr	r3, [pc, #956]	; (8001410 <writeCHARSEG+0x410>)
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	0352      	lsls	r2, r2, #13
 8001056:	619a      	str	r2, [r3, #24]
		break;
 8001058:	e04d      	b.n	80010f6 <writeCHARSEG+0xf6>
	case 1:
		LEDD1_OFF();
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	0312      	lsls	r2, r2, #12
 8001062:	619a      	str	r2, [r3, #24]
		LEDD2_ON();
 8001064:	23a0      	movs	r3, #160	; 0xa0
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	2210      	movs	r2, #16
 800106a:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 800106c:	23a0      	movs	r3, #160	; 0xa0
 800106e:	05db      	lsls	r3, r3, #23
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	0552      	lsls	r2, r2, #21
 8001074:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 8001076:	4be6      	ldr	r3, [pc, #920]	; (8001410 <writeCHARSEG+0x410>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0352      	lsls	r2, r2, #13
 800107c:	619a      	str	r2, [r3, #24]
		break;
 800107e:	e03a      	b.n	80010f6 <writeCHARSEG+0xf6>
	case 2:
		LEDD1_OFF();
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	0312      	lsls	r2, r2, #12
 8001088:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 800108a:	23a0      	movs	r3, #160	; 0xa0
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0352      	lsls	r2, r2, #13
 8001092:	619a      	str	r2, [r3, #24]
		LEDD3_ON();
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	0152      	lsls	r2, r2, #5
 800109c:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 800109e:	4bdc      	ldr	r3, [pc, #880]	; (8001410 <writeCHARSEG+0x410>)
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	0352      	lsls	r2, r2, #13
 80010a4:	619a      	str	r2, [r3, #24]
		break;
 80010a6:	e026      	b.n	80010f6 <writeCHARSEG+0xf6>
	case 3:
		LEDD1_OFF();
 80010a8:	23a0      	movs	r3, #160	; 0xa0
 80010aa:	05db      	lsls	r3, r3, #23
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	0312      	lsls	r2, r2, #12
 80010b0:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 80010b2:	23a0      	movs	r3, #160	; 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	0352      	lsls	r2, r2, #13
 80010ba:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 80010bc:	23a0      	movs	r3, #160	; 0xa0
 80010be:	05db      	lsls	r3, r3, #23
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	0552      	lsls	r2, r2, #21
 80010c4:	619a      	str	r2, [r3, #24]
		LEDD4_ON();
 80010c6:	4bd2      	ldr	r3, [pc, #840]	; (8001410 <writeCHARSEG+0x410>)
 80010c8:	2210      	movs	r2, #16
 80010ca:	619a      	str	r2, [r3, #24]
		break;
 80010cc:	e013      	b.n	80010f6 <writeCHARSEG+0xf6>
	default:
		LEDD1_OFF();
 80010ce:	23a0      	movs	r3, #160	; 0xa0
 80010d0:	05db      	lsls	r3, r3, #23
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	0312      	lsls	r2, r2, #12
 80010d6:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 80010d8:	23a0      	movs	r3, #160	; 0xa0
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	0352      	lsls	r2, r2, #13
 80010e0:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 80010e2:	23a0      	movs	r3, #160	; 0xa0
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	0552      	lsls	r2, r2, #21
 80010ea:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 80010ec:	4bc8      	ldr	r3, [pc, #800]	; (8001410 <writeCHARSEG+0x410>)
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	0352      	lsls	r2, r2, #13
 80010f2:	619a      	str	r2, [r3, #24]
		break;
 80010f4:	46c0      	nop			; (mov r8, r8)
	}
	switch (CHAR)
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3b2e      	subs	r3, #46	; 0x2e
 80010fc:	2b31      	cmp	r3, #49	; 0x31
 80010fe:	d900      	bls.n	8001102 <writeCHARSEG+0x102>
 8001100:	e1cc      	b.n	800149c <writeCHARSEG+0x49c>
 8001102:	009a      	lsls	r2, r3, #2
 8001104:	4bc3      	ldr	r3, [pc, #780]	; (8001414 <writeCHARSEG+0x414>)
 8001106:	18d3      	adds	r3, r2, r3
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	469f      	mov	pc, r3
	{
	case 'P':
		LEDa_ON();
 800110c:	23a0      	movs	r3, #160	; 0xa0
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001114:	4bbe      	ldr	r3, [pc, #760]	; (8001410 <writeCHARSEG+0x410>)
 8001116:	2202      	movs	r2, #2
 8001118:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 800111a:	23a0      	movs	r3, #160	; 0xa0
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	03d2      	lsls	r2, r2, #15
 8001122:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 8001124:	23a0      	movs	r3, #160	; 0xa0
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	0392      	lsls	r2, r2, #14
 800112c:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800112e:	23a0      	movs	r3, #160	; 0xa0
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001138:	23a0      	movs	r3, #160	; 0xa0
 800113a:	05db      	lsls	r3, r3, #23
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001142:	4bb3      	ldr	r3, [pc, #716]	; (8001410 <writeCHARSEG+0x410>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	0252      	lsls	r2, r2, #9
 8001148:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800114a:	4bb1      	ldr	r3, [pc, #708]	; (8001410 <writeCHARSEG+0x410>)
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	0312      	lsls	r2, r2, #12
 8001150:	619a      	str	r2, [r3, #24]
		break;
 8001152:	e1c9      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '_':
		LEDa_OFF();
 8001154:	23a0      	movs	r3, #160	; 0xa0
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	0412      	lsls	r2, r2, #16
 800115c:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 800115e:	4bac      	ldr	r3, [pc, #688]	; (8001410 <writeCHARSEG+0x410>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0292      	lsls	r2, r2, #10
 8001164:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001166:	23a0      	movs	r3, #160	; 0xa0
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	0392      	lsls	r2, r2, #14
 8001176:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001178:	23a0      	movs	r3, #160	; 0xa0
 800117a:	05db      	lsls	r3, r3, #23
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	0512      	lsls	r2, r2, #20
 8001180:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001182:	23a0      	movs	r3, #160	; 0xa0
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	0492      	lsls	r2, r2, #18
 800118a:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 800118c:	4ba0      	ldr	r3, [pc, #640]	; (8001410 <writeCHARSEG+0x410>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0252      	lsls	r2, r2, #9
 8001192:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <writeCHARSEG+0x410>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	0312      	lsls	r2, r2, #12
 800119a:	619a      	str	r2, [r3, #24]
		break;
 800119c:	e1a4      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '.':
		LEDa_OFF();
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	0412      	lsls	r2, r2, #16
 80011a6:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 80011a8:	4b99      	ldr	r3, [pc, #612]	; (8001410 <writeCHARSEG+0x410>)
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	0292      	lsls	r2, r2, #10
 80011ae:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 80011b0:	23a0      	movs	r3, #160	; 0xa0
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	03d2      	lsls	r2, r2, #15
 80011b8:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80011ba:	23a0      	movs	r3, #160	; 0xa0
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	0392      	lsls	r2, r2, #14
 80011c2:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80011c4:	23a0      	movs	r3, #160	; 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	0512      	lsls	r2, r2, #20
 80011cc:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80011ce:	23a0      	movs	r3, #160	; 0xa0
 80011d0:	05db      	lsls	r3, r3, #23
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	0492      	lsls	r2, r2, #18
 80011d6:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80011d8:	4b8d      	ldr	r3, [pc, #564]	; (8001410 <writeCHARSEG+0x410>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	0252      	lsls	r2, r2, #9
 80011de:	619a      	str	r2, [r3, #24]
		LEDdp_ON();
 80011e0:	4b8b      	ldr	r3, [pc, #556]	; (8001410 <writeCHARSEG+0x410>)
 80011e2:	2208      	movs	r2, #8
 80011e4:	619a      	str	r2, [r3, #24]
		break;
 80011e6:	e17f      	b.n	80014e8 <writeCHARSEG+0x4e8>

	case '0':
		LEDa_ON();
 80011e8:	23a0      	movs	r3, #160	; 0xa0
 80011ea:	05db      	lsls	r3, r3, #23
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80011f0:	4b87      	ldr	r3, [pc, #540]	; (8001410 <writeCHARSEG+0x410>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80011f6:	23a0      	movs	r3, #160	; 0xa0
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 80011fe:	23a0      	movs	r3, #160	; 0xa0
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	2220      	movs	r2, #32
 8001204:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 8001206:	23a0      	movs	r3, #160	; 0xa0
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 800121a:	4b7d      	ldr	r3, [pc, #500]	; (8001410 <writeCHARSEG+0x410>)
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0252      	lsls	r2, r2, #9
 8001220:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001222:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <writeCHARSEG+0x410>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	0312      	lsls	r2, r2, #12
 8001228:	619a      	str	r2, [r3, #24]
		break;
 800122a:	e15d      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '1':
		LEDa_OFF();
 800122c:	23a0      	movs	r3, #160	; 0xa0
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	0412      	lsls	r2, r2, #16
 8001234:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <writeCHARSEG+0x410>)
 8001238:	2202      	movs	r2, #2
 800123a:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800123c:	23a0      	movs	r3, #160	; 0xa0
 800123e:	05db      	lsls	r3, r3, #23
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 8001244:	23a0      	movs	r3, #160	; 0xa0
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	0392      	lsls	r2, r2, #14
 800124c:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 800124e:	23a0      	movs	r3, #160	; 0xa0
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0512      	lsls	r2, r2, #20
 8001256:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001258:	23a0      	movs	r3, #160	; 0xa0
 800125a:	05db      	lsls	r3, r3, #23
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	0492      	lsls	r2, r2, #18
 8001260:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <writeCHARSEG+0x410>)
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0252      	lsls	r2, r2, #9
 8001268:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800126a:	4b69      	ldr	r3, [pc, #420]	; (8001410 <writeCHARSEG+0x410>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	0312      	lsls	r2, r2, #12
 8001270:	619a      	str	r2, [r3, #24]
		break;
 8001272:	e139      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '2':
		LEDa_ON();
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 800127c:	4b64      	ldr	r3, [pc, #400]	; (8001410 <writeCHARSEG+0x410>)
 800127e:	2202      	movs	r2, #2
 8001280:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 8001282:	23a0      	movs	r3, #160	; 0xa0
 8001284:	05db      	lsls	r3, r3, #23
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	03d2      	lsls	r2, r2, #15
 800128a:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 800128c:	23a0      	movs	r3, #160	; 0xa0
 800128e:	05db      	lsls	r3, r3, #23
 8001290:	2220      	movs	r2, #32
 8001292:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 8001294:	23a0      	movs	r3, #160	; 0xa0
 8001296:	05db      	lsls	r3, r3, #23
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 800129e:	23a0      	movs	r3, #160	; 0xa0
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0492      	lsls	r2, r2, #18
 80012a6:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <writeCHARSEG+0x410>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80012ae:	4b58      	ldr	r3, [pc, #352]	; (8001410 <writeCHARSEG+0x410>)
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	619a      	str	r2, [r3, #24]
		break;
 80012b6:	e117      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '3':
		LEDa_ON();
 80012b8:	23a0      	movs	r3, #160	; 0xa0
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <writeCHARSEG+0x410>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80012c6:	23a0      	movs	r3, #160	; 0xa0
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 80012ce:	23a0      	movs	r3, #160	; 0xa0
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	2220      	movs	r2, #32
 80012d4:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80012d6:	23a0      	movs	r3, #160	; 0xa0
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	0512      	lsls	r2, r2, #20
 80012de:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80012e0:	23a0      	movs	r3, #160	; 0xa0
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	0492      	lsls	r2, r2, #18
 80012e8:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <writeCHARSEG+0x410>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80012f0:	4b47      	ldr	r3, [pc, #284]	; (8001410 <writeCHARSEG+0x410>)
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	0312      	lsls	r2, r2, #12
 80012f6:	619a      	str	r2, [r3, #24]
		break;
 80012f8:	e0f6      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '4':
		LEDa_OFF();
 80012fa:	23a0      	movs	r3, #160	; 0xa0
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	0412      	lsls	r2, r2, #16
 8001302:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <writeCHARSEG+0x410>)
 8001306:	2202      	movs	r2, #2
 8001308:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800130a:	23a0      	movs	r3, #160	; 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 8001312:	23a0      	movs	r3, #160	; 0xa0
 8001314:	05db      	lsls	r3, r3, #23
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	0392      	lsls	r2, r2, #14
 800131a:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 800131c:	23a0      	movs	r3, #160	; 0xa0
 800131e:	05db      	lsls	r3, r3, #23
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	0512      	lsls	r2, r2, #20
 8001324:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001326:	23a0      	movs	r3, #160	; 0xa0
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <writeCHARSEG+0x410>)
 8001332:	2201      	movs	r2, #1
 8001334:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <writeCHARSEG+0x410>)
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	0312      	lsls	r2, r2, #12
 800133c:	619a      	str	r2, [r3, #24]
		break;
 800133e:	e0d3      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '5':
		LEDa_ON();
 8001340:	23a0      	movs	r3, #160	; 0xa0
 8001342:	05db      	lsls	r3, r3, #23
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001348:	4b31      	ldr	r3, [pc, #196]	; (8001410 <writeCHARSEG+0x410>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	0292      	lsls	r2, r2, #10
 800134e:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001350:	23a0      	movs	r3, #160	; 0xa0
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001358:	23a0      	movs	r3, #160	; 0xa0
 800135a:	05db      	lsls	r3, r3, #23
 800135c:	2220      	movs	r2, #32
 800135e:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	0512      	lsls	r2, r2, #20
 8001368:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 800136a:	23a0      	movs	r3, #160	; 0xa0
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <writeCHARSEG+0x410>)
 8001376:	2201      	movs	r2, #1
 8001378:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <writeCHARSEG+0x410>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	0312      	lsls	r2, r2, #12
 8001380:	619a      	str	r2, [r3, #24]
		break;
 8001382:	e0b1      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '6':
		LEDa_ON();
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <writeCHARSEG+0x410>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	0292      	lsls	r2, r2, #10
 8001392:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001394:	23a0      	movs	r3, #160	; 0xa0
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 800139c:	23a0      	movs	r3, #160	; 0xa0
 800139e:	05db      	lsls	r3, r3, #23
 80013a0:	2220      	movs	r2, #32
 80013a2:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 80013a4:	23a0      	movs	r3, #160	; 0xa0
 80013a6:	05db      	lsls	r3, r3, #23
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 80013ae:	23a0      	movs	r3, #160	; 0xa0
 80013b0:	05db      	lsls	r3, r3, #23
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	0092      	lsls	r2, r2, #2
 80013b6:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <writeCHARSEG+0x410>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <writeCHARSEG+0x410>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	0312      	lsls	r2, r2, #12
 80013c4:	619a      	str	r2, [r3, #24]
		break;
 80013c6:	e08f      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '7':
		LEDa_ON();
 80013c8:	23a0      	movs	r3, #160	; 0xa0
 80013ca:	05db      	lsls	r3, r3, #23
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <writeCHARSEG+0x410>)
 80013d2:	2202      	movs	r2, #2
 80013d4:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80013d6:	23a0      	movs	r3, #160	; 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80013de:	23a0      	movs	r3, #160	; 0xa0
 80013e0:	05db      	lsls	r3, r3, #23
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	0392      	lsls	r2, r2, #14
 80013e6:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	0512      	lsls	r2, r2, #20
 80013f0:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80013f2:	23a0      	movs	r3, #160	; 0xa0
 80013f4:	05db      	lsls	r3, r3, #23
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	0492      	lsls	r2, r2, #18
 80013fa:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <writeCHARSEG+0x410>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0252      	lsls	r2, r2, #9
 8001402:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <writeCHARSEG+0x410>)
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	0312      	lsls	r2, r2, #12
 800140a:	619a      	str	r2, [r3, #24]
		break;
 800140c:	e06c      	b.n	80014e8 <writeCHARSEG+0x4e8>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	50000400 	.word	0x50000400
 8001414:	080020ac 	.word	0x080020ac
	case '8':
		LEDa_ON();
 8001418:	23a0      	movs	r3, #160	; 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <writeCHARSEG+0x4f0>)
 8001422:	2202      	movs	r2, #2
 8001424:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 800142e:	23a0      	movs	r3, #160	; 0xa0
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	2220      	movs	r2, #32
 8001434:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <writeCHARSEG+0x4f0>)
 800144c:	2201      	movs	r2, #1
 800144e:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <writeCHARSEG+0x4f0>)
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	0312      	lsls	r2, r2, #12
 8001456:	619a      	str	r2, [r3, #24]
		break;
 8001458:	e046      	b.n	80014e8 <writeCHARSEG+0x4e8>
	case '9':
		LEDa_ON();
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <writeCHARSEG+0x4f0>)
 8001464:	2202      	movs	r2, #2
 8001466:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001468:	23a0      	movs	r3, #160	; 0xa0
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	2220      	movs	r2, #32
 8001476:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001478:	23a0      	movs	r3, #160	; 0xa0
 800147a:	05db      	lsls	r3, r3, #23
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	0512      	lsls	r2, r2, #20
 8001480:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001482:	23a0      	movs	r3, #160	; 0xa0
 8001484:	05db      	lsls	r3, r3, #23
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <writeCHARSEG+0x4f0>)
 800148e:	2201      	movs	r2, #1
 8001490:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <writeCHARSEG+0x4f0>)
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0312      	lsls	r2, r2, #12
 8001498:	619a      	str	r2, [r3, #24]
		break;
 800149a:	e025      	b.n	80014e8 <writeCHARSEG+0x4e8>
	default:
		LEDa_OFF();
 800149c:	23a0      	movs	r3, #160	; 0xa0
 800149e:	05db      	lsls	r3, r3, #23
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	0412      	lsls	r2, r2, #16
 80014a4:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <writeCHARSEG+0x4f0>)
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0292      	lsls	r2, r2, #10
 80014ac:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 80014ae:	23a0      	movs	r3, #160	; 0xa0
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	03d2      	lsls	r2, r2, #15
 80014b6:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80014b8:	23a0      	movs	r3, #160	; 0xa0
 80014ba:	05db      	lsls	r3, r3, #23
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	0392      	lsls	r2, r2, #14
 80014c0:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80014c2:	23a0      	movs	r3, #160	; 0xa0
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	05db      	lsls	r3, r3, #23
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	0492      	lsls	r2, r2, #18
 80014d4:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <writeCHARSEG+0x4f0>)
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	0252      	lsls	r2, r2, #9
 80014dc:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <writeCHARSEG+0x4f0>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	0312      	lsls	r2, r2, #12
 80014e4:	619a      	str	r2, [r3, #24]
		break;
 80014e6:	46c0      	nop			; (mov r8, r8)
	}
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	50000400 	.word	0x50000400

080014f4 <Clock>:
		TIM21->CCR1 = 0;
	}
}

int Clock()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	char tmpClock[4] = {};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
	int j = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
	tmpClock[0] = READ_BIT(RTC->TR, RTC_TR_HT);
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <Clock+0x104>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	if (tmpClock[0] == 0)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <Clock+0x26>
	{
		j = 1;
 8001516:	2301      	movs	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
	}
	tmpClock[1] = READ_BIT(RTC->TR, RTC_TR_HU);
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <Clock+0x104>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	705a      	strb	r2, [r3, #1]
	tmpClock[2] = READ_BIT(RTC->TR, RTC_TR_MNT);
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <Clock+0x104>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	709a      	strb	r2, [r3, #2]
	tmpClock[3] = READ_BIT(RTC->TR, RTC_TR_MNU);
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <Clock+0x104>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	70da      	strb	r2, [r3, #3]

	if (((READ_BIT(RTC->TR, RTC_TR_HT) * 10 + READ_BIT(RTC->TR, RTC_TR_HU) > 5) && (READ_BIT(RTC->TR, RTC_TR_HT) * 10 + READ_BIT(RTC->TR, RTC_TR_HU) < 22)) || flagDecrementButton || flagEnterButton || flagIncrementButton || flagDecrementButtonLong || flagEnterButtonLong || flagIncrementButtonLong)
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <Clock+0x104>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	23c0      	movs	r3, #192	; 0xc0
 800153e:	039b      	lsls	r3, r3, #14
 8001540:	401a      	ands	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	189b      	adds	r3, r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	0019      	movs	r1, r3
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <Clock+0x104>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	23f0      	movs	r3, #240	; 0xf0
 8001552:	031b      	lsls	r3, r3, #12
 8001554:	4013      	ands	r3, r2
 8001556:	18cb      	adds	r3, r1, r3
 8001558:	2b05      	cmp	r3, #5
 800155a:	d911      	bls.n	8001580 <Clock+0x8c>
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <Clock+0x104>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	23c0      	movs	r3, #192	; 0xc0
 8001562:	039b      	lsls	r3, r3, #14
 8001564:	401a      	ands	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	189b      	adds	r3, r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	0019      	movs	r1, r3
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <Clock+0x104>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	23f0      	movs	r3, #240	; 0xf0
 8001576:	031b      	lsls	r3, r3, #12
 8001578:	4013      	ands	r3, r2
 800157a:	18cb      	adds	r3, r1, r3
 800157c:	2b15      	cmp	r3, #21
 800157e:	d917      	bls.n	80015b0 <Clock+0xbc>
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <Clock+0x108>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d113      	bne.n	80015b0 <Clock+0xbc>
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <Clock+0x10c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10f      	bne.n	80015b0 <Clock+0xbc>
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <Clock+0x110>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10b      	bne.n	80015b0 <Clock+0xbc>
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <Clock+0x114>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d107      	bne.n	80015b0 <Clock+0xbc>
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <Clock+0x118>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <Clock+0xbc>
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <Clock+0x11c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d014      	beq.n	80015da <Clock+0xe6>
	{
		for (int i = 0 + j; i < 4; i++)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	e00e      	b.n	80015d4 <Clock+0xe0>
		{
			writeCHARSEG(tmpClock[i], i);
 80015b6:	1d3a      	adds	r2, r7, #4
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	18d3      	adds	r3, r2, r3
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	0011      	movs	r1, r2
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff fd1c 	bl	8001000 <writeCHARSEG>
			Delay_ms(50);
 80015c8:	2032      	movs	r0, #50	; 0x32
 80015ca:	f7ff fcd9 	bl	8000f80 <Delay_ms>
		for (int i = 0 + j; i < 4; i++)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	dded      	ble.n	80015b6 <Clock+0xc2>
		}
	}
	return flagDecrementButtonLong && flagIncrementButtonLong ? 0 : 1;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <Clock+0x114>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <Clock+0xf6>
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <Clock+0x11c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <Clock+0xfa>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <Clock+0xfc>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b004      	add	sp, #16
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40002800 	.word	0x40002800
 80015fc:	20000300 	.word	0x20000300
 8001600:	20000301 	.word	0x20000301
 8001604:	20000302 	.word	0x20000302
 8001608:	20000303 	.word	0x20000303
 800160c:	20000304 	.word	0x20000304
 8001610:	20000305 	.word	0x20000305

08001614 <setTimeNow>:

void setTimeNow()
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	af00      	add	r7, sp, #0
	MODIFY_REG(RTC->TR,
 8001618:	4b44      	ldr	r3, [pc, #272]	; (800172c <setTimeNow+0x118>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a44      	ldr	r2, [pc, #272]	; (8001730 <setTimeNow+0x11c>)
 800161e:	4013      	ands	r3, r2
 8001620:	001c      	movs	r4, r3
 8001622:	4b44      	ldr	r3, [pc, #272]	; (8001734 <setTimeNow+0x120>)
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	210a      	movs	r1, #10
 8001628:	0018      	movs	r0, r3
 800162a:	f7fe fdf7 	bl	800021c <__divsi3>
 800162e:	0003      	movs	r3, r0
 8001630:	051d      	lsls	r5, r3, #20
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <setTimeNow+0x120>)
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	210a      	movs	r1, #10
 8001638:	0018      	movs	r0, r3
 800163a:	f7fe fed5 	bl	80003e8 <__aeabi_idivmod>
 800163e:	000b      	movs	r3, r1
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	431d      	orrs	r5, r3
 8001644:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <setTimeNow+0x120>)
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	210a      	movs	r1, #10
 800164a:	0018      	movs	r0, r3
 800164c:	f7fe fde6 	bl	800021c <__divsi3>
 8001650:	0003      	movs	r3, r0
 8001652:	031b      	lsls	r3, r3, #12
 8001654:	431d      	orrs	r5, r3
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <setTimeNow+0x120>)
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	210a      	movs	r1, #10
 800165c:	0018      	movs	r0, r3
 800165e:	f7fe fec3 	bl	80003e8 <__aeabi_idivmod>
 8001662:	000b      	movs	r3, r1
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	431d      	orrs	r5, r3
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <setTimeNow+0x120>)
 800166a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800166c:	210a      	movs	r1, #10
 800166e:	0018      	movs	r0, r3
 8001670:	f7fe fdd4 	bl	800021c <__divsi3>
 8001674:	0003      	movs	r3, r0
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	431d      	orrs	r5, r3
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <setTimeNow+0x120>)
 800167c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800167e:	210a      	movs	r1, #10
 8001680:	0018      	movs	r0, r3
 8001682:	f7fe feb1 	bl	80003e8 <__aeabi_idivmod>
 8001686:	000b      	movs	r3, r1
 8001688:	432b      	orrs	r3, r5
 800168a:	001a      	movs	r2, r3
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <setTimeNow+0x118>)
 800168e:	4322      	orrs	r2, r4
 8001690:	601a      	str	r2, [r3, #0]
				   (menu[1].value % 10 << RTC_TR_HU_Pos) |	// Hour units (7 -> 17)
				   (menu[2].value / 10 << RTC_TR_MNT_Pos) | // Minute tens (3 -> 36)
				   (menu[2].value % 10 << RTC_TR_MNU_Pos) | // Minute units (6 -> 36)
				   (menu[3].value / 10 << RTC_TR_ST_Pos) |	// Second tens (0 -> 00)
				   (menu[3].value % 10 << RTC_TR_SU_Pos));	// Second units (0 -> 00)
	MODIFY_REG(RTC->DR,
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <setTimeNow+0x118>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a28      	ldr	r2, [pc, #160]	; (8001738 <setTimeNow+0x124>)
 8001698:	4013      	ands	r3, r2
 800169a:	001c      	movs	r4, r3
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <setTimeNow+0x120>)
 800169e:	22b8      	movs	r2, #184	; 0xb8
 80016a0:	589b      	ldr	r3, [r3, r2]
 80016a2:	210a      	movs	r1, #10
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7fe fdb9 	bl	800021c <__divsi3>
 80016aa:	0003      	movs	r3, r0
 80016ac:	051d      	lsls	r5, r3, #20
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <setTimeNow+0x120>)
 80016b0:	22b8      	movs	r2, #184	; 0xb8
 80016b2:	589b      	ldr	r3, [r3, r2]
 80016b4:	210a      	movs	r1, #10
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7fe fe96 	bl	80003e8 <__aeabi_idivmod>
 80016bc:	000b      	movs	r3, r1
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431d      	orrs	r5, r3
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <setTimeNow+0x120>)
 80016c4:	229c      	movs	r2, #156	; 0x9c
 80016c6:	589b      	ldr	r3, [r3, r2]
 80016c8:	210a      	movs	r1, #10
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7fe fda6 	bl	800021c <__divsi3>
 80016d0:	0003      	movs	r3, r0
 80016d2:	031b      	lsls	r3, r3, #12
 80016d4:	431d      	orrs	r5, r3
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <setTimeNow+0x120>)
 80016d8:	229c      	movs	r2, #156	; 0x9c
 80016da:	589b      	ldr	r3, [r3, r2]
 80016dc:	210a      	movs	r1, #10
 80016de:	0018      	movs	r0, r3
 80016e0:	f7fe fe82 	bl	80003e8 <__aeabi_idivmod>
 80016e4:	000b      	movs	r3, r1
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	431d      	orrs	r5, r3
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <setTimeNow+0x120>)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	589b      	ldr	r3, [r3, r2]
 80016f0:	210a      	movs	r1, #10
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7fe fd92 	bl	800021c <__divsi3>
 80016f8:	0003      	movs	r3, r0
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	431d      	orrs	r5, r3
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <setTimeNow+0x120>)
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	589b      	ldr	r3, [r3, r2]
 8001704:	210a      	movs	r1, #10
 8001706:	0018      	movs	r0, r3
 8001708:	f7fe fe6e 	bl	80003e8 <__aeabi_idivmod>
 800170c:	000b      	movs	r3, r1
 800170e:	002a      	movs	r2, r5
 8001710:	431a      	orrs	r2, r3
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <setTimeNow+0x120>)
 8001714:	21d4      	movs	r1, #212	; 0xd4
 8001716:	585b      	ldr	r3, [r3, r1]
 8001718:	035b      	lsls	r3, r3, #13
 800171a:	4313      	orrs	r3, r2
 800171c:	001a      	movs	r2, r3
 800171e:	4b03      	ldr	r3, [pc, #12]	; (800172c <setTimeNow+0x118>)
 8001720:	4322      	orrs	r2, r4
 8001722:	605a      	str	r2, [r3, #4]
				   (menu[5].value / 10 << RTC_DR_MT_Pos) | // Month tens (1 -> April)
				   (menu[5].value % 10 << RTC_DR_MU_Pos) | // Month units (0 -> April)
				   (menu[4].value / 10 << RTC_DR_DT_Pos) | // Day tens (0 -> 01)
				   (menu[4].value % 10 << RTC_DR_DU_Pos) | // Day units (1 -> 01)
				   (menu[7].value << RTC_DR_WDU_Pos));	   // Weekday (3 -> Monday)
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bdb0      	pop	{r4, r5, r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40002800 	.word	0x40002800
 8001730:	ffc08080 	.word	0xffc08080
 8001734:	2000000c 	.word	0x2000000c
 8001738:	ff0000c0 	.word	0xff0000c0

0800173c <setActualMenu>:

char *setActualMenu(int v, int h)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	if (v != 0)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d100      	bne.n	800174e <setActualMenu+0x12>
 800174c:	e0bd      	b.n	80018ca <setActualMenu+0x18e>
	{ // Рухаємося по вертикалі
		if (v == -1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	d125      	bne.n	80017a0 <setActualMenu+0x64>
		{ // Команда ВГОРУ (скасування)
			if (isParamEditMode)
 8001754:	4bd1      	ldr	r3, [pc, #836]	; (8001a9c <setActualMenu+0x360>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <setActualMenu+0x28>
			{ // Якщо параметр у режимі редагування, то скасовуємо зміни
				isParamEditMode = false;
 800175c:	4bcf      	ldr	r3, [pc, #828]	; (8001a9c <setActualMenu+0x360>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e0b2      	b.n	80018ca <setActualMenu+0x18e>
			}
			else
			{ // Якщо пункт меню не у режимі редагування, переміщаємося до батька
				if (menu[actualIndex].parentid > 0)
 8001764:	4bce      	ldr	r3, [pc, #824]	; (8001aa0 <setActualMenu+0x364>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	49ce      	ldr	r1, [pc, #824]	; (8001aa4 <setActualMenu+0x368>)
 800176a:	0013      	movs	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	18cb      	adds	r3, r1, r3
 8001774:	3304      	adds	r3, #4
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	dc00      	bgt.n	800177e <setActualMenu+0x42>
 800177c:	e0a5      	b.n	80018ca <setActualMenu+0x18e>
				{ // Якщо є куди переміщатися вгору (ParentID>0)
					actualIndex = getMenuIndexByID(menu[actualIndex].parentid);
 800177e:	4bc8      	ldr	r3, [pc, #800]	; (8001aa0 <setActualMenu+0x364>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	49c8      	ldr	r1, [pc, #800]	; (8001aa4 <setActualMenu+0x368>)
 8001784:	0013      	movs	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	18cb      	adds	r3, r1, r3
 800178e:	3304      	adds	r3, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0018      	movs	r0, r3
 8001794:	f000 f98e 	bl	8001ab4 <getMenuIndexByID>
 8001798:	0002      	movs	r2, r0
 800179a:	4bc1      	ldr	r3, [pc, #772]	; (8001aa0 <setActualMenu+0x364>)
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e094      	b.n	80018ca <setActualMenu+0x18e>
				}
			}
		}
		else
		{ // Якщо команда ВН�?З - входу/редагування
			if (menu[actualIndex].isParam && !isParamEditMode)
 80017a0:	4bbf      	ldr	r3, [pc, #764]	; (8001aa0 <setActualMenu+0x364>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	49bf      	ldr	r1, [pc, #764]	; (8001aa4 <setActualMenu+0x368>)
 80017a6:	0013      	movs	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	18cb      	adds	r3, r1, r3
 80017b0:	3308      	adds	r3, #8
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d016      	beq.n	80017e6 <setActualMenu+0xaa>
 80017b8:	4bb8      	ldr	r3, [pc, #736]	; (8001a9c <setActualMenu+0x360>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4053      	eors	r3, r2
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00f      	beq.n	80017e6 <setActualMenu+0xaa>
			{										 // Якщо не в режимі редагування, то ...
				isParamEditMode = true;				 // Переходимо в режим редагування параметра
 80017c6:	4bb5      	ldr	r3, [pc, #724]	; (8001a9c <setActualMenu+0x360>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
				tmpVValue = menu[actualIndex].value; // Тимчасовій змінній присвоюємо актуальне значення параметра
 80017cc:	4bb4      	ldr	r3, [pc, #720]	; (8001aa0 <setActualMenu+0x364>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	49b4      	ldr	r1, [pc, #720]	; (8001aa4 <setActualMenu+0x368>)
 80017d2:	0013      	movs	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	18cb      	adds	r3, r1, r3
 80017dc:	3310      	adds	r3, #16
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4bb1      	ldr	r3, [pc, #708]	; (8001aa8 <setActualMenu+0x36c>)
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e071      	b.n	80018ca <setActualMenu+0x18e>
			}
			else if (menu[actualIndex].isParam && isParamEditMode)
 80017e6:	4bae      	ldr	r3, [pc, #696]	; (8001aa0 <setActualMenu+0x364>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	49ae      	ldr	r1, [pc, #696]	; (8001aa4 <setActualMenu+0x368>)
 80017ec:	0013      	movs	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	18cb      	adds	r3, r1, r3
 80017f6:	3308      	adds	r3, #8
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d013      	beq.n	8001826 <setActualMenu+0xea>
 80017fe:	4ba7      	ldr	r3, [pc, #668]	; (8001a9c <setActualMenu+0x360>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00f      	beq.n	8001826 <setActualMenu+0xea>
			{										 // Якщо в режимі редагування
				menu[actualIndex].value = tmpVValue; // Зберігаємо задане значення
 8001806:	4ba6      	ldr	r3, [pc, #664]	; (8001aa0 <setActualMenu+0x364>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4ba7      	ldr	r3, [pc, #668]	; (8001aa8 <setActualMenu+0x36c>)
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	48a5      	ldr	r0, [pc, #660]	; (8001aa4 <setActualMenu+0x368>)
 8001810:	0013      	movs	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	18c3      	adds	r3, r0, r3
 800181a:	3310      	adds	r3, #16
 800181c:	6019      	str	r1, [r3, #0]
				isParamEditMode = false;			 // І виходимо з режиму редагування
 800181e:	4b9f      	ldr	r3, [pc, #636]	; (8001a9c <setActualMenu+0x360>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e051      	b.n	80018ca <setActualMenu+0x18e>
			}
			else
			{
				bool nochild = true; // Прапорець, чи є дочірні елементи
 8001826:	230f      	movs	r3, #15
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < menuArraySize; i++)
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	e01d      	b.n	8001870 <setActualMenu+0x134>
				{
					if (menu[i].parentid == menu[actualIndex].id)
 8001834:	499b      	ldr	r1, [pc, #620]	; (8001aa4 <setActualMenu+0x368>)
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	0013      	movs	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	18cb      	adds	r3, r1, r3
 8001842:	3304      	adds	r3, #4
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	4b96      	ldr	r3, [pc, #600]	; (8001aa0 <setActualMenu+0x364>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4896      	ldr	r0, [pc, #600]	; (8001aa4 <setActualMenu+0x368>)
 800184c:	0013      	movs	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	581b      	ldr	r3, [r3, r0]
 8001856:	4299      	cmp	r1, r3
 8001858:	d107      	bne.n	800186a <setActualMenu+0x12e>
					{
						actualIndex = i; // Якщо є, робимо перший попавшийся актуальним елементом
 800185a:	4b91      	ldr	r3, [pc, #580]	; (8001aa0 <setActualMenu+0x364>)
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	601a      	str	r2, [r3, #0]
						nochild = false; // Потомки є
 8001860:	230f      	movs	r3, #15
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
						break;			 // Виходимо з for
 8001868:	e007      	b.n	800187a <setActualMenu+0x13e>
				for (int i = 0; i < menuArraySize; i++)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3301      	adds	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b8e      	ldr	r3, [pc, #568]	; (8001aac <setActualMenu+0x370>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	429a      	cmp	r2, r3
 8001878:	dbdc      	blt.n	8001834 <setActualMenu+0xf8>
					}
				}
				if (nochild)
 800187a:	230f      	movs	r3, #15
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d022      	beq.n	80018ca <setActualMenu+0x18e>
				{ // Якщо ж потомків немає, воспринимаємо як команду
					switch (menu[actualIndex].id)
 8001884:	4b86      	ldr	r3, [pc, #536]	; (8001aa0 <setActualMenu+0x364>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4986      	ldr	r1, [pc, #536]	; (8001aa4 <setActualMenu+0x368>)
 800188a:	0013      	movs	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	585b      	ldr	r3, [r3, r1]
 8001894:	2b11      	cmp	r3, #17
 8001896:	d012      	beq.n	80018be <setActualMenu+0x182>
 8001898:	dc16      	bgt.n	80018c8 <setActualMenu+0x18c>
 800189a:	2b04      	cmp	r3, #4
 800189c:	d002      	beq.n	80018a4 <setActualMenu+0x168>
 800189e:	2b0d      	cmp	r3, #13
 80018a0:	d003      	beq.n	80018aa <setActualMenu+0x16e>
						{
							Clock();
						}
						break;
					default:
						break;
 80018a2:	e011      	b.n	80018c8 <setActualMenu+0x18c>
						setTimeNow();
 80018a4:	f7ff feb6 	bl	8001614 <setTimeNow>
						break;
 80018a8:	e00f      	b.n	80018ca <setActualMenu+0x18e>
						StartMusic(menu[19].value); // *19 		P_3.3	Alarm_Melody
 80018aa:	4a7e      	ldr	r2, [pc, #504]	; (8001aa4 <setActualMenu+0x368>)
 80018ac:	2389      	movs	r3, #137	; 0x89
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	58d3      	ldr	r3, [r2, r3]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 f98a 	bl	8001bcc <StartMusic>
						break;
 80018b8:	e007      	b.n	80018ca <setActualMenu+0x18e>
							Clock();
 80018ba:	f7ff fe1b 	bl	80014f4 <Clock>
						while (Clock())
 80018be:	f7ff fe19 	bl	80014f4 <Clock>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d1f9      	bne.n	80018ba <setActualMenu+0x17e>
						break;
 80018c6:	e000      	b.n	80018ca <setActualMenu+0x18e>
						break;
 80018c8:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if (h != 0)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d057      	beq.n	8001980 <setActualMenu+0x244>
	{ // Якщо горизонтальна навігація
		if (isParamEditMode)
 80018d0:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <setActualMenu+0x360>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d03a      	beq.n	800194e <setActualMenu+0x212>
		{					// У режимі редагування параметра
			tmpVValue += h; // Змінюємо його значення і ...
 80018d8:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <setActualMenu+0x36c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	18d2      	adds	r2, r2, r3
 80018e0:	4b71      	ldr	r3, [pc, #452]	; (8001aa8 <setActualMenu+0x36c>)
 80018e2:	601a      	str	r2, [r3, #0]
			// ... контролюємо, щоб воно залишилося в заданому діапазоні
			if (tmpVValue > menu[actualIndex]._max)
 80018e4:	4b6e      	ldr	r3, [pc, #440]	; (8001aa0 <setActualMenu+0x364>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	496e      	ldr	r1, [pc, #440]	; (8001aa4 <setActualMenu+0x368>)
 80018ea:	0013      	movs	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	18cb      	adds	r3, r1, r3
 80018f4:	3318      	adds	r3, #24
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b6b      	ldr	r3, [pc, #428]	; (8001aa8 <setActualMenu+0x36c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	da0b      	bge.n	8001918 <setActualMenu+0x1dc>
				tmpVValue = menu[actualIndex]._min;
 8001900:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <setActualMenu+0x364>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4967      	ldr	r1, [pc, #412]	; (8001aa4 <setActualMenu+0x368>)
 8001906:	0013      	movs	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	18cb      	adds	r3, r1, r3
 8001910:	3314      	adds	r3, #20
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <setActualMenu+0x36c>)
 8001916:	601a      	str	r2, [r3, #0]
			if (tmpVValue < menu[actualIndex]._min)
 8001918:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <setActualMenu+0x364>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4961      	ldr	r1, [pc, #388]	; (8001aa4 <setActualMenu+0x368>)
 800191e:	0013      	movs	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	18cb      	adds	r3, r1, r3
 8001928:	3314      	adds	r3, #20
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <setActualMenu+0x36c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	dd25      	ble.n	8001980 <setActualMenu+0x244>
				tmpVValue = menu[actualIndex]._max;
 8001934:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <setActualMenu+0x364>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	495a      	ldr	r1, [pc, #360]	; (8001aa4 <setActualMenu+0x368>)
 800193a:	0013      	movs	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	18cb      	adds	r3, r1, r3
 8001944:	3318      	adds	r3, #24
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <setActualMenu+0x36c>)
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e018      	b.n	8001980 <setActualMenu+0x244>
		}
		else
		{ // Якщо режим редагування не активний, навігація серед дочірніх одного батька
			actualIndex = getNearMenuIndexByID(menu[actualIndex].parentid,
 800194e:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <setActualMenu+0x364>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4954      	ldr	r1, [pc, #336]	; (8001aa4 <setActualMenu+0x368>)
 8001954:	0013      	movs	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	18cb      	adds	r3, r1, r3
 800195e:	3304      	adds	r3, #4
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <setActualMenu+0x364>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	494f      	ldr	r1, [pc, #316]	; (8001aa4 <setActualMenu+0x368>)
 8001968:	0013      	movs	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	585b      	ldr	r3, [r3, r1]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	0019      	movs	r1, r3
 8001976:	f000 f8c3 	bl	8001b00 <getNearMenuIndexByID>
 800197a:	0002      	movs	r2, r0
 800197c:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <setActualMenu+0x364>)
 800197e:	601a      	str	r2, [r3, #0]
											   menu[actualIndex].id, h);
		}
	}
	// Отображаем информацию
	if (isParamEditMode)
 8001980:	4b46      	ldr	r3, [pc, #280]	; (8001a9c <setActualMenu+0x360>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d07a      	beq.n	8001a7e <setActualMenu+0x342>
	{
		tmpV[0] = intToChar(tmpVValue / 1000);
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <setActualMenu+0x36c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	22fa      	movs	r2, #250	; 0xfa
 800198e:	0091      	lsls	r1, r2, #2
 8001990:	0018      	movs	r0, r3
 8001992:	f7fe fc43 	bl	800021c <__divsi3>
 8001996:	0003      	movs	r3, r0
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff fb09 	bl	8000fb0 <intToChar>
 800199e:	0003      	movs	r3, r0
 80019a0:	001a      	movs	r2, r3
 80019a2:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <setActualMenu+0x374>)
 80019a4:	701a      	strb	r2, [r3, #0]
		tmpV[1] = intToChar(tmpVValue / 100 - tmpV[0] * 10);
 80019a6:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <setActualMenu+0x36c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2164      	movs	r1, #100	; 0x64
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7fe fc35 	bl	800021c <__divsi3>
 80019b2:	0003      	movs	r3, r0
 80019b4:	0019      	movs	r1, r3
 80019b6:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <setActualMenu+0x374>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	001a      	movs	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	075b      	lsls	r3, r3, #29
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	18cb      	adds	r3, r1, r3
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff faf0 	bl	8000fb0 <intToChar>
 80019d0:	0003      	movs	r3, r0
 80019d2:	001a      	movs	r2, r3
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <setActualMenu+0x374>)
 80019d6:	705a      	strb	r2, [r3, #1]
		tmpV[2] = intToChar(tmpVValue / 10 - tmpV[0] * 100 - tmpV[1] * 10);
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <setActualMenu+0x36c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	210a      	movs	r1, #10
 80019de:	0018      	movs	r0, r3
 80019e0:	f7fe fc1c 	bl	800021c <__divsi3>
 80019e4:	0003      	movs	r3, r0
 80019e6:	0019      	movs	r1, r3
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <setActualMenu+0x374>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	001a      	movs	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	065b      	lsls	r3, r3, #25
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	189b      	adds	r3, r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	18c9      	adds	r1, r1, r3
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <setActualMenu+0x374>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	001a      	movs	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	075b      	lsls	r3, r3, #29
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	18cb      	adds	r3, r1, r3
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff facb 	bl	8000fb0 <intToChar>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <setActualMenu+0x374>)
 8001a20:	709a      	strb	r2, [r3, #2]
		tmpV[3] = intToChar(tmpVValue - tmpV[0] * 1000 - tmpV[1] * 100 - tmpV[2] * 10);
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <setActualMenu+0x374>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	001a      	movs	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	059b      	lsls	r3, r3, #22
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	019b      	lsls	r3, r3, #6
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	189b      	adds	r3, r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	001a      	movs	r2, r3
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <setActualMenu+0x36c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	18d1      	adds	r1, r2, r3
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <setActualMenu+0x374>)
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	001a      	movs	r2, r3
 8001a46:	0013      	movs	r3, r2
 8001a48:	065b      	lsls	r3, r3, #25
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	18c9      	adds	r1, r1, r3
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <setActualMenu+0x374>)
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	075b      	lsls	r3, r3, #29
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	18cb      	adds	r3, r1, r3
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff fa9f 	bl	8000fb0 <intToChar>
 8001a72:	0003      	movs	r3, r0
 8001a74:	001a      	movs	r2, r3
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <setActualMenu+0x374>)
 8001a78:	70da      	strb	r2, [r3, #3]
		return tmpV;
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <setActualMenu+0x374>)
 8001a7c:	e00a      	b.n	8001a94 <setActualMenu+0x358>
	}
	else
	{
		return menu[actualIndex]._name;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <setActualMenu+0x364>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	0013      	movs	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <setActualMenu+0x368>)
 8001a90:	18d3      	adds	r3, r2, r3
 8001a92:	3301      	adds	r3, #1
	}
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000031c 	.word	0x2000031c
 8001aa0:	20000318 	.word	0x20000318
 8001aa4:	2000000c 	.word	0x2000000c
 8001aa8:	20000320 	.word	0x20000320
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	2000032c 	.word	0x2000032c

08001ab4 <getMenuIndexByID>:

int getMenuIndexByID(int id)
{ // Функція отримання індексу пункту меню за його ID
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menuArraySize; i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e00e      	b.n	8001ae0 <getMenuIndexByID+0x2c>
	{
		if (menu[i].id == id)
 8001ac2:	490d      	ldr	r1, [pc, #52]	; (8001af8 <getMenuIndexByID+0x44>)
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	585b      	ldr	r3, [r3, r1]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d101      	bne.n	8001ada <getMenuIndexByID+0x26>
			return i;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	e009      	b.n	8001aee <getMenuIndexByID+0x3a>
	for (int i = 0; i < menuArraySize; i++)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <getMenuIndexByID+0x48>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbeb      	blt.n	8001ac2 <getMenuIndexByID+0xe>
	}
	return -1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	425b      	negs	r3, r3
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b004      	add	sp, #16
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	2000000c 	.word	0x2000000c
 8001afc:	20000008 	.word	0x20000008

08001b00 <getNearMenuIndexByID>:

int getNearMenuIndexByID(int parentid, int id, int side)
{					   // Функція отримання індексу пункту меню наступного або попереднього від актуального
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	int prevID = -1;   // Змінна для зберігання індексу попереднього елемента
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	425b      	negs	r3, r3
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
	int nextID = -1;   // Змінна для зберігання індексу наступного елемента
 8001b12:	2301      	movs	r3, #1
 8001b14:	425b      	negs	r3, r3
 8001b16:	623b      	str	r3, [r7, #32]
	int actualID = -1; // Змінна для зберігання індексу актуального елемента
 8001b18:	2301      	movs	r3, #1
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

	int firstID = -1; // Змінна для зберігання індексу першого елемента
 8001b1e:	2301      	movs	r3, #1
 8001b20:	425b      	negs	r3, r3
 8001b22:	61bb      	str	r3, [r7, #24]
	int lastID = -1;  // Змінна для зберігання індексу останнього елемента
 8001b24:	2301      	movs	r3, #1
 8001b26:	425b      	negs	r3, r3
 8001b28:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < menuArraySize; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e030      	b.n	8001b92 <getNearMenuIndexByID+0x92>
	{
		if (menu[i].parentid == parentid)
 8001b30:	4924      	ldr	r1, [pc, #144]	; (8001bc4 <getNearMenuIndexByID+0xc4>)
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	0013      	movs	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	18cb      	adds	r3, r1, r3
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d121      	bne.n	8001b8c <getNearMenuIndexByID+0x8c>
		{ // Перебираємо всі елементи з одним батьківським ID
			if (firstID == -1)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <getNearMenuIndexByID+0x52>
				firstID = i; // Запам'ятовуємо перший елемент списку
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	61bb      	str	r3, [r7, #24]

			if (menu[i].id == id)
 8001b52:	491c      	ldr	r1, [pc, #112]	; (8001bc4 <getNearMenuIndexByID+0xc4>)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	0013      	movs	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	585b      	ldr	r3, [r3, r1]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d102      	bne.n	8001b6c <getNearMenuIndexByID+0x6c>
			{
				actualID = i; // Запам'ятовуємо актуальний елемент списку
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e00d      	b.n	8001b88 <getNearMenuIndexByID+0x88>
			}
			else
			{
				if (actualID == -1)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	d102      	bne.n	8001b78 <getNearMenuIndexByID+0x78>
				{ // Якщо зустрівся елемент до актуального, робимо його попереднім
					prevID = i;
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e007      	b.n	8001b88 <getNearMenuIndexByID+0x88>
				}
				else if (actualID != -1 && nextID == -1)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	d004      	beq.n	8001b88 <getNearMenuIndexByID+0x88>
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	3301      	adds	r3, #1
 8001b82:	d101      	bne.n	8001b88 <getNearMenuIndexByID+0x88>
				{ // Якщо зустрівся елемент після актуального, робимо його наступним
					nextID = i;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	623b      	str	r3, [r7, #32]
				}
			}
			lastID = i; // Кожний наступний елемент - останній
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < menuArraySize; i++)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <getNearMenuIndexByID+0xc8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dbc9      	blt.n	8001b30 <getNearMenuIndexByID+0x30>
		}
	}

	if (nextID == -1)
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <getNearMenuIndexByID+0xa6>
		nextID = firstID; // Якщо наступного елемента немає - по колу видаємо перший
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	623b      	str	r3, [r7, #32]
	if (prevID == -1)
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	3301      	adds	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <getNearMenuIndexByID+0xb0>
		prevID = lastID; // Якщо попереднього елемента немає - по колу видаємо останній
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
	if (side == -1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	d101      	bne.n	8001bba <getNearMenuIndexByID+0xba>
		return prevID; // В залежності від напрямку обертання, видаємо потрібний індекс
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	e000      	b.n	8001bbc <getNearMenuIndexByID+0xbc>
	else
		return nextID;
 8001bba:	6a3b      	ldr	r3, [r7, #32]
	return -1;
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b00a      	add	sp, #40	; 0x28
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	20000008 	.word	0x20000008

08001bcc <StartMusic>:

void StartMusic(int melody)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	MusicStep = 0;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <StartMusic+0x3c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
	PlayMusic = 1;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <StartMusic+0x40>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
	sound(Music[MusicStep].freq, Music[MusicStep].time);
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <StartMusic+0x3c>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <StartMusic+0x44>)
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	5ad3      	ldrh	r3, [r2, r3]
 8001bea:	0018      	movs	r0, r3
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <StartMusic+0x3c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <StartMusic+0x44>)
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	f000 f80a 	bl	8001c14 <sound>
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000330 	.word	0x20000330
 8001c0c:	20000334 	.word	0x20000334
 8001c10:	08001fc4 	.word	0x08001fc4

08001c14 <sound>:

void sound(int freq, int time_ms)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
	if (freq > 0)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	dd18      	ble.n	8001c56 <sound+0x42>
	{
		TIM2->ARR = SYSCLK / TIM2->PSC / freq;
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <sound+0xb4>)
 8001c2e:	f7fe fa6b 	bl	8000108 <__udivsi3>
 8001c32:	0003      	movs	r3, r0
 8001c34:	0018      	movs	r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	05d4      	lsls	r4, r2, #23
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	f7fe fa63 	bl	8000108 <__udivsi3>
 8001c42:	0003      	movs	r3, r0
 8001c44:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->CCR1 = TIM2->ARR / 2;
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	05db      	lsls	r3, r3, #23
 8001c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	05db      	lsls	r3, r3, #23
 8001c50:	0852      	lsrs	r2, r2, #1
 8001c52:	635a      	str	r2, [r3, #52]	; 0x34
 8001c54:	e008      	b.n	8001c68 <sound+0x54>
	}
	else
	{
		TIM2->ARR = 1000;
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	05db      	lsls	r3, r3, #23
 8001c5a:	22fa      	movs	r2, #250	; 0xfa
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->CCR1 = 0;
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	05db      	lsls	r3, r3, #23
 8001c64:	2200      	movs	r2, #0
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34
	}
	TIM2->CNT = 0;
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	05db      	lsls	r3, r3, #23
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

	sound_time = ((SYSCLK / TIM2->PSC / TIM2->ARR) * time_ms) / 1000;
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	05db      	lsls	r3, r3, #23
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	0019      	movs	r1, r3
 8001c78:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <sound+0xb4>)
 8001c7a:	f7fe fa45 	bl	8000108 <__udivsi3>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	001a      	movs	r2, r3
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	05db      	lsls	r3, r3, #23
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	0019      	movs	r1, r3
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	f7fe fa3c 	bl	8000108 <__udivsi3>
 8001c90:	0003      	movs	r3, r0
 8001c92:	001a      	movs	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4353      	muls	r3, r2
 8001c98:	22fa      	movs	r2, #250	; 0xfa
 8001c9a:	0091      	lsls	r1, r2, #2
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7fe fa33 	bl	8000108 <__udivsi3>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <sound+0xb8>)
 8001ca8:	601a      	str	r2, [r3, #0]
	sound_counter = 0;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <sound+0xbc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM2->CR1, TIM_CR1_CEN); // Запуск таймера;
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	05db      	lsls	r3, r3, #23
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	05db      	lsls	r3, r3, #23
 8001cba:	2101      	movs	r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b003      	add	sp, #12
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	01e84800 	.word	0x01e84800
 8001ccc:	20000338 	.word	0x20000338
 8001cd0:	2000033c 	.word	0x2000033c

08001cd4 <SysTick_Handler>:
/* Handlers--------------------------------------------------------*/
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <SysTick_Handler+0x28>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <SysTick_Handler+0x28>)
 8001ce0:	601a      	str	r2, [r3, #0]
	if (Delay_counter_ms)
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <SysTick_Handler+0x2c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <SysTick_Handler+0x20>
	{
		Delay_counter_ms--;
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Handler+0x2c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <SysTick_Handler+0x2c>)
 8001cf2:	601a      	str	r2, [r3, #0]
	}
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	20000324 	.word	0x20000324
 8001d00:	20000328 	.word	0x20000328

08001d04 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0)
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <EXTI0_1_IRQHandler+0xb8>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d025      	beq.n	8001d5e <EXTI0_1_IRQHandler+0x5a>
	{							// Перевірка, чи було переривання від лінії EXTI 0
		EXTI->PR = EXTI_PR_PR0; // Скидаємо прапорець EXTI 0
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <EXTI0_1_IRQHandler+0xb8>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	615a      	str	r2, [r3, #20]
		if (flagDecrementButtonDown)
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <EXTI0_1_IRQHandler+0xbc>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d018      	beq.n	8001d52 <EXTI0_1_IRQHandler+0x4e>
		{ // Обробка кнопки decrement
			if ((/*HAL_GetTick()*/ -timeDecrementButtonDown) > timeButtonLongPressed)
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <EXTI0_1_IRQHandler+0xc0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	425a      	negs	r2, r3
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <EXTI0_1_IRQHandler+0xc4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d903      	bls.n	8001d36 <EXTI0_1_IRQHandler+0x32>
			{
				flagDecrementButtonLong = true;
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <EXTI0_1_IRQHandler+0xc8>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e009      	b.n	8001d4a <EXTI0_1_IRQHandler+0x46>
			}
			else if ((/**HAL_GetTick()*/ -timeDecrementButtonDown) > timeButtonPressed)
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <EXTI0_1_IRQHandler+0xc0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	425a      	negs	r2, r3
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <EXTI0_1_IRQHandler+0xcc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d902      	bls.n	8001d4a <EXTI0_1_IRQHandler+0x46>
			{
				flagDecrementButton = true;
 8001d44:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <EXTI0_1_IRQHandler+0xd0>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
			}
			flagDecrementButtonDown = false;
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <EXTI0_1_IRQHandler+0xbc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e005      	b.n	8001d5e <EXTI0_1_IRQHandler+0x5a>
		}
		else
		{
			timeDecrementButtonDown = /*HAL_GetTick()*/ 0;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <EXTI0_1_IRQHandler+0xc0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
			flagDecrementButtonDown = true;
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <EXTI0_1_IRQHandler+0xbc>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (EXTI->PR & EXTI_PR_PR1)
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <EXTI0_1_IRQHandler+0xb8>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d025      	beq.n	8001db4 <EXTI0_1_IRQHandler+0xb0>
	{							// Перевірка, чи було переривання від лінії EXTI 1
		EXTI->PR = EXTI_PR_PR1; // Скидаємо прапорець EXTI 1
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <EXTI0_1_IRQHandler+0xb8>)
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	615a      	str	r2, [r3, #20]
		if (flagEnterButtonDown)
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <EXTI0_1_IRQHandler+0xd4>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d018      	beq.n	8001da8 <EXTI0_1_IRQHandler+0xa4>
		{ // Обробка кнопки enter
			if ((/*HAL_GetTick()*/ -timeEnterButtonDown) > timeButtonLongPressed)
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <EXTI0_1_IRQHandler+0xd8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <EXTI0_1_IRQHandler+0xc4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d903      	bls.n	8001d8c <EXTI0_1_IRQHandler+0x88>
			{
				flagEnterButtonLong = true;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <EXTI0_1_IRQHandler+0xdc>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e009      	b.n	8001da0 <EXTI0_1_IRQHandler+0x9c>
			}
			else if ((/*HAL_GetTick()*/ -timeEnterButtonDown) > timeButtonPressed)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <EXTI0_1_IRQHandler+0xd8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	425a      	negs	r2, r3
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <EXTI0_1_IRQHandler+0xcc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d902      	bls.n	8001da0 <EXTI0_1_IRQHandler+0x9c>
			{
				flagEnterButton = true;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <EXTI0_1_IRQHandler+0xe0>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
			}
			flagEnterButtonDown = false;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <EXTI0_1_IRQHandler+0xd4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
		{
			timeEnterButtonDown = /*HAL_GetTick()*/ 0;
			flagEnterButtonDown = true;
		}
	}
}
 8001da6:	e005      	b.n	8001db4 <EXTI0_1_IRQHandler+0xb0>
			timeEnterButtonDown = /*HAL_GetTick()*/ 0;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <EXTI0_1_IRQHandler+0xd8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
			flagEnterButtonDown = true;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <EXTI0_1_IRQHandler+0xd4>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40010400 	.word	0x40010400
 8001dc0:	20000306 	.word	0x20000306
 8001dc4:	2000030c 	.word	0x2000030c
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000303 	.word	0x20000303
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	20000300 	.word	0x20000300
 8001dd8:	20000307 	.word	0x20000307
 8001ddc:	20000310 	.word	0x20000310
 8001de0:	20000304 	.word	0x20000304
 8001de4:	20000301 	.word	0x20000301

08001de8 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	// Перевірка, чи було переривання від лінії EXTI 2
	if (EXTI->PR & EXTI_PR_PR2)
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <EXTI2_3_IRQHandler+0x60>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d025      	beq.n	8001e42 <EXTI2_3_IRQHandler+0x5a>
	{
		// Скидаємо прапорець EXTI 2
		EXTI->PR = EXTI_PR_PR2;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <EXTI2_3_IRQHandler+0x60>)
 8001df8:	2204      	movs	r2, #4
 8001dfa:	615a      	str	r2, [r3, #20]

		// Обробка кнопки increment
		if (flagIncrementButtonDown)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <EXTI2_3_IRQHandler+0x64>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d018      	beq.n	8001e36 <EXTI2_3_IRQHandler+0x4e>
		{
			if ((/*HAL_GetTick()*/ -timeIncrementButtonDown) > timeButtonLongPressed)
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <EXTI2_3_IRQHandler+0x68>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	425a      	negs	r2, r3
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <EXTI2_3_IRQHandler+0x6c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d903      	bls.n	8001e1a <EXTI2_3_IRQHandler+0x32>
			{
				flagIncrementButtonLong = true;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <EXTI2_3_IRQHandler+0x70>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e009      	b.n	8001e2e <EXTI2_3_IRQHandler+0x46>
			}
			else if ((/*HAL_GetTick()*/ -timeIncrementButtonDown) > timeButtonPressed)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <EXTI2_3_IRQHandler+0x68>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	425a      	negs	r2, r3
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <EXTI2_3_IRQHandler+0x74>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d902      	bls.n	8001e2e <EXTI2_3_IRQHandler+0x46>
			{
				flagIncrementButton = true;
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <EXTI2_3_IRQHandler+0x78>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
			}
			flagIncrementButtonDown = false;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <EXTI2_3_IRQHandler+0x64>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
		{
			timeIncrementButtonDown = /*HAL_GetTick()*/ 0;
			flagIncrementButtonDown = true;
		}
	}
}
 8001e34:	e005      	b.n	8001e42 <EXTI2_3_IRQHandler+0x5a>
			timeIncrementButtonDown = /*HAL_GetTick()*/ 0;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <EXTI2_3_IRQHandler+0x68>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
			flagIncrementButtonDown = true;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <EXTI2_3_IRQHandler+0x64>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40010400 	.word	0x40010400
 8001e4c:	20000308 	.word	0x20000308
 8001e50:	20000314 	.word	0x20000314
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000305 	.word	0x20000305
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20000302 	.word	0x20000302

08001e64 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	// Перевірка, чи було переривання від лінії EXTI 9
	if (EXTI->PR & EXTI_PR_PR9)
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <EXTI4_15_IRQHandler+0x20>)
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d003      	beq.n	8001e7c <EXTI4_15_IRQHandler+0x18>
	{
/*
Обработка LPOWER
*/
		// Скидаємо прапорець EXTI 9
		EXTI->PR = EXTI_PR_PR9;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <EXTI4_15_IRQHandler+0x20>)
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	615a      	str	r2, [r3, #20]

		// Обробка подій, пов'язаних з EXTI 9
		// Код обробки може бути доданий тут
	}
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	40010400 	.word	0x40010400

08001e88 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM2->SR, TIM_SR_UIF))
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <TIM2_IRQHandler+0x20>
	{
		//		CounterTIM2++;
		CLEAR_BIT(TIM2->SR, TIM_SR_UIF); // Сбросим флаг прерывания
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	05db      	lsls	r3, r3, #23
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	05db      	lsls	r3, r3, #23
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	438a      	bics	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]
	}
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <TIM21_IRQHandler>:

void TIM21_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM21->SR, TIM_SR_UIF))
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <TIM21_IRQHandler+0x20>)
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d005      	beq.n	8001eca <TIM21_IRQHandler+0x1a>
	{
		//		CounterTIM2++;
		CLEAR_BIT(TIM21->SR, TIM_SR_UIF); // Сбросим флаг прерывания
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <TIM21_IRQHandler+0x20>)
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <TIM21_IRQHandler+0x20>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	438a      	bics	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
	}
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010800 	.word	0x40010800

08001ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001ee0:	4813      	ldr	r0, [pc, #76]	; (8001f30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001ee2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee4:	f7ff fff6 	bl	8001ed4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001ee8:	4812      	ldr	r0, [pc, #72]	; (8001f34 <LoopForever+0x6>)
    LDR R1, [R0]
 8001eea:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001eec:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <LoopForever+0xa>)
    CMP R1, R2
 8001ef0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001ef2:	d105      	bne.n	8001f00 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001ef4:	4811      	ldr	r0, [pc, #68]	; (8001f3c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001ef6:	4912      	ldr	r1, [pc, #72]	; (8001f40 <LoopForever+0x12>)
    STR R1, [R0]
 8001ef8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001efa:	4812      	ldr	r0, [pc, #72]	; (8001f44 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001efc:	4912      	ldr	r1, [pc, #72]	; (8001f48 <LoopForever+0x1a>)
    STR R1, [R0]
 8001efe:	6001      	str	r1, [r0, #0]

08001f00 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	4812      	ldr	r0, [pc, #72]	; (8001f4c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001f02:	4913      	ldr	r1, [pc, #76]	; (8001f50 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001f04:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <LoopForever+0x26>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001f18:	4c10      	ldr	r4, [pc, #64]	; (8001f5c <LoopForever+0x2e>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f26:	f000 f81d 	bl	8001f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2a:	f7fe fa7d 	bl	8000428 <main>

08001f2e <LoopForever>:

LoopForever:
    b LoopForever
 8001f2e:	e7fe      	b.n	8001f2e <LoopForever>
   ldr   r0, =_estack
 8001f30:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001f34:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001f38:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001f3c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001f40:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001f44:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001f48:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001f54:	0800217c 	.word	0x0800217c
  ldr r2, =_sbss
 8001f58:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8001f5c:	20000340 	.word	0x20000340

08001f60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_IRQHandler>
	...

08001f64 <__libc_init_array>:
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	2600      	movs	r6, #0
 8001f68:	4c0c      	ldr	r4, [pc, #48]	; (8001f9c <__libc_init_array+0x38>)
 8001f6a:	4d0d      	ldr	r5, [pc, #52]	; (8001fa0 <__libc_init_array+0x3c>)
 8001f6c:	1b64      	subs	r4, r4, r5
 8001f6e:	10a4      	asrs	r4, r4, #2
 8001f70:	42a6      	cmp	r6, r4
 8001f72:	d109      	bne.n	8001f88 <__libc_init_array+0x24>
 8001f74:	2600      	movs	r6, #0
 8001f76:	f000 f819 	bl	8001fac <_init>
 8001f7a:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <__libc_init_array+0x40>)
 8001f7c:	4d0a      	ldr	r5, [pc, #40]	; (8001fa8 <__libc_init_array+0x44>)
 8001f7e:	1b64      	subs	r4, r4, r5
 8001f80:	10a4      	asrs	r4, r4, #2
 8001f82:	42a6      	cmp	r6, r4
 8001f84:	d105      	bne.n	8001f92 <__libc_init_array+0x2e>
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
 8001f88:	00b3      	lsls	r3, r6, #2
 8001f8a:	58eb      	ldr	r3, [r5, r3]
 8001f8c:	4798      	blx	r3
 8001f8e:	3601      	adds	r6, #1
 8001f90:	e7ee      	b.n	8001f70 <__libc_init_array+0xc>
 8001f92:	00b3      	lsls	r3, r6, #2
 8001f94:	58eb      	ldr	r3, [r5, r3]
 8001f96:	4798      	blx	r3
 8001f98:	3601      	adds	r6, #1
 8001f9a:	e7f2      	b.n	8001f82 <__libc_init_array+0x1e>
 8001f9c:	08002174 	.word	0x08002174
 8001fa0:	08002174 	.word	0x08002174
 8001fa4:	08002178 	.word	0x08002178
 8001fa8:	08002174 	.word	0x08002174

08001fac <_init>:
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb2:	bc08      	pop	{r3}
 8001fb4:	469e      	mov	lr, r3
 8001fb6:	4770      	bx	lr

08001fb8 <_fini>:
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fbe:	bc08      	pop	{r3}
 8001fc0:	469e      	mov	lr, r3
 8001fc2:	4770      	bx	lr
