
SunRiseClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800205c  0800205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e4  080021e4  000202e4  2**0
                  CONTENTS
  4 .ARM          00000000  080021e4  080021e4  000202e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021e4  080021e4  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021e4  080021e4  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  080021ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  200002e4  080024d0  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000033c  080024d0  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000136e  00000000  00000000  0002034f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000400  00000000  00000000  000216bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00021abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000df  00000000  00000000  00021bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009b08  00000000  00000000  00021cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015dc  00000000  00000000  0002b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00033c50  00000000  00000000  0002cda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000043c  00000000  00000000  000609f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e4 	.word	0x200002e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002044 	.word	0x08002044

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e8 	.word	0x200002e8
 8000104:	08002044 	.word	0x08002044

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b7f      	cmp	r3, #127	; 0x7f
 8000406:	d809      	bhi.n	800041c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	001a      	movs	r2, r3
 800040e:	231f      	movs	r3, #31
 8000410:	401a      	ands	r2, r3
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <__NVIC_EnableIRQ+0x30>)
 8000414:	2101      	movs	r1, #1
 8000416:	4091      	lsls	r1, r2
 8000418:	000a      	movs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
  }
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}
 8000424:	e000e100 	.word	0xe000e100

08000428 <main>:
void StartMusic(int melody);
void sound (int freq, int time_ms);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
int main(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
//	HAL_Init();

	SystemClock_Config();
 800042e:	f000 f869 	bl	8000504 <SystemClock_Config>
	GPIO_Init();
 8000432:	f000 fb93 	bl	8000b5c <GPIO_Init>
	LPUART1_UART_Init();
 8000436:	f000 f911 	bl	800065c <LPUART1_UART_Init>
	RTC_Init();
 800043a:	f000 f99b 	bl	8000774 <RTC_Init>
	TIM2_Init();
 800043e:	f000 fa09 	bl	8000854 <TIM2_Init>
	TIM21_Init();
 8000442:	f000 fadb 	bl	80009fc <TIM21_Init>

	writeCHARSEG(' ', ' ');
 8000446:	2120      	movs	r1, #32
 8000448:	2020      	movs	r0, #32
 800044a:	f000 fe0b 	bl	8001064 <writeCHARSEG>
	pinEN_OFF();
 800044e:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <main+0xc8>)
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	0612      	lsls	r2, r2, #24
 8000454:	619a      	str	r2, [r3, #24]

	int vmenu = 0; // Змінна, що зберігає дію по вертикалі 1 - вхід в меню, -1 - вихід з меню
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
	int hmenu = 0; // Змінна, що зберігає дію по горизонталі 1 - вправо, -1 - вліво
 800045a:	2300      	movs	r3, #0
 800045c:	60bb      	str	r3, [r7, #8]
	char* tmpValue;

	while(1){
	 if (flagDecrementButton){
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <main+0xcc>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d005      	beq.n	8000472 <main+0x4a>
	  hmenu = 1;// Якщо при спаді лінії A на лінії B лог. одиниця, то обертання в один бік
 8000466:	2301      	movs	r3, #1
 8000468:	60bb      	str	r3, [r7, #8]
	  flagDecrementButton = false;       // Действие обработано - сбрасываем флаг
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <main+0xcc>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
 8000470:	e009      	b.n	8000486 <main+0x5e>
	 }
	  					  // Прапорець обертання за годинниковою стрілкою
	 else if (flagIncrementButton){
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <main+0xd0>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d005      	beq.n	8000486 <main+0x5e>
	  hmenu = -1;	// Якщо при спаді лінії A на лінії B лог. нуль, то обертання в інший бік
 800047a:	2301      	movs	r3, #1
 800047c:	425b      	negs	r3, r3
 800047e:	60bb      	str	r3, [r7, #8]
	  flagIncrementButton = false;       // Действие обработано - сбрасываем флаг
 8000480:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <main+0xd0>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
	 }
	  						// Прапорець обертання проти годинникової стрілки
	 if (flagEnterButton) {           // Кнопка нажата
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <main+0xd4>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d005      	beq.n	800049a <main+0x72>
	  vmenu = 1;                // По нажатию кнопки - переходим на уровень вниз
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
	  flagEnterButton = false;       // Действие обработано - сбрасываем флаг
 8000492:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <main+0xd4>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
 8000498:	e009      	b.n	80004ae <main+0x86>
	 }
	 else if (flagEnterButtonLong){
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <main+0xd8>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d005      	beq.n	80004ae <main+0x86>
	  vmenu = -1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	425b      	negs	r3, r3
 80004a6:	60fb      	str	r3, [r7, #12]
	  flagEnterButtonLong = false;               // Действие обработано - сбрасываем флаг
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <main+0xd8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
	 }
	 if (vmenu != 0 || hmenu != 0) tmpValue = setActualMenu(vmenu, hmenu); // Если было действие - реагируем на него
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <main+0x92>
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d007      	beq.n	80004ca <main+0xa2>
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 f98f 	bl	80017e4 <setActualMenu>
 80004c6:	0003      	movs	r3, r0
 80004c8:	607b      	str	r3, [r7, #4]
	 for(int i = 0; i<4;i++){
 80004ca:	2300      	movs	r3, #0
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	e00b      	b.n	80004e8 <main+0xc0>
		 writeCHARSEG(tmpValue[i], i);
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fdc1 	bl	8001064 <writeCHARSEG>
	 for(int i = 0; i<4;i++){
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	ddf0      	ble.n	80004d0 <main+0xa8>
	 if (flagDecrementButton){
 80004ee:	e7b6      	b.n	800045e <main+0x36>
 80004f0:	50000800 	.word	0x50000800
 80004f4:	20000300 	.word	0x20000300
 80004f8:	20000302 	.word	0x20000302
 80004fc:	20000301 	.word	0x20000301
 8000500:	20000304 	.word	0x20000304

08000504 <SystemClock_Config>:
	 }
	}
}

void SystemClock_Config(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	// Налаштування PWR CR для регулювання напруги
	MODIFY_REG(PWR->CR, PWR_CR_VOS_Msk, 0b01 << PWR_CR_VOS_Pos);
 8000508:	4b49      	ldr	r3, [pc, #292]	; (8000630 <SystemClock_Config+0x12c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a49      	ldr	r2, [pc, #292]	; (8000634 <SystemClock_Config+0x130>)
 800050e:	401a      	ands	r2, r3
 8000510:	4b47      	ldr	r3, [pc, #284]	; (8000630 <SystemClock_Config+0x12c>)
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	0109      	lsls	r1, r1, #4
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]

	// Вимкнення HSI16DIV
	CLEAR_BIT(RCC->CR, RCC_CR_HSIDIVEN);
 800051a:	4b47      	ldr	r3, [pc, #284]	; (8000638 <SystemClock_Config+0x134>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b46      	ldr	r3, [pc, #280]	; (8000638 <SystemClock_Config+0x134>)
 8000520:	2108      	movs	r1, #8
 8000522:	438a      	bics	r2, r1
 8000524:	601a      	str	r2, [r3, #0]

	// Вимкнення MSI
	CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000526:	4b44      	ldr	r3, [pc, #272]	; (8000638 <SystemClock_Config+0x134>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b43      	ldr	r3, [pc, #268]	; (8000638 <SystemClock_Config+0x134>)
 800052c:	4943      	ldr	r1, [pc, #268]	; (800063c <SystemClock_Config+0x138>)
 800052e:	400a      	ands	r2, r1
 8000530:	601a      	str	r2, [r3, #0]

	// Якщо джерело системної частоти не HSI16
	if ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI) {
 8000532:	4b41      	ldr	r3, [pc, #260]	; (8000638 <SystemClock_Config+0x134>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	220c      	movs	r2, #12
 8000538:	4013      	ands	r3, r2
 800053a:	2b04      	cmp	r3, #4
 800053c:	d01b      	beq.n	8000576 <SystemClock_Config+0x72>
		// Увімкнення HSI16
		SET_BIT(RCC->CR, RCC_CR_HSION);
 800053e:	4b3e      	ldr	r3, [pc, #248]	; (8000638 <SystemClock_Config+0x134>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b3d      	ldr	r3, [pc, #244]	; (8000638 <SystemClock_Config+0x134>)
 8000544:	2101      	movs	r1, #1
 8000546:	430a      	orrs	r2, r1
 8000548:	601a      	str	r2, [r3, #0]

		// Очікування стабілізації HSI16
		while (!(RCC->CR & RCC_CR_HSIRDY)) {
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	4b3a      	ldr	r3, [pc, #232]	; (8000638 <SystemClock_Config+0x134>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2204      	movs	r2, #4
 8000552:	4013      	ands	r3, r2
 8000554:	d0fa      	beq.n	800054c <SystemClock_Config+0x48>
		}

		// Перемикання системної тактової частоти на HSI16
		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_HSI);
 8000556:	4b38      	ldr	r3, [pc, #224]	; (8000638 <SystemClock_Config+0x134>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	2203      	movs	r2, #3
 800055c:	4393      	bics	r3, r2
 800055e:	001a      	movs	r2, r3
 8000560:	4b35      	ldr	r3, [pc, #212]	; (8000638 <SystemClock_Config+0x134>)
 8000562:	2101      	movs	r1, #1
 8000564:	430a      	orrs	r2, r1
 8000566:	60da      	str	r2, [r3, #12]

		// Очікування завершення перемикання
		while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI) {
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	4b33      	ldr	r3, [pc, #204]	; (8000638 <SystemClock_Config+0x134>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	220c      	movs	r2, #12
 8000570:	4013      	ands	r3, r2
 8000572:	2b04      	cmp	r3, #4
 8000574:	d1f9      	bne.n	800056a <SystemClock_Config+0x66>
		}
	}

	// Налаштування MCO prescaler і джерела сигналу
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOPRE_Msk, 0b000 << RCC_CFGR_MCOPRE_Pos);
 8000576:	4b30      	ldr	r3, [pc, #192]	; (8000638 <SystemClock_Config+0x134>)
 8000578:	68da      	ldr	r2, [r3, #12]
 800057a:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <SystemClock_Config+0x134>)
 800057c:	4930      	ldr	r1, [pc, #192]	; (8000640 <SystemClock_Config+0x13c>)
 800057e:	400a      	ands	r2, r1
 8000580:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL_Msk, 0b000 << RCC_CFGR_MCOSEL_Pos);
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <SystemClock_Config+0x134>)
 8000584:	68da      	ldr	r2, [r3, #12]
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <SystemClock_Config+0x134>)
 8000588:	492e      	ldr	r1, [pc, #184]	; (8000644 <SystemClock_Config+0x140>)
 800058a:	400a      	ands	r2, r1
 800058c:	60da      	str	r2, [r3, #12]

	// Налаштування PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLDIV_Msk, 0b01 << RCC_CFGR_PLLDIV_Pos);
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <SystemClock_Config+0x134>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	4a2d      	ldr	r2, [pc, #180]	; (8000648 <SystemClock_Config+0x144>)
 8000594:	401a      	ands	r2, r3
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0x134>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	03c9      	lsls	r1, r1, #15
 800059c:	430a      	orrs	r2, r1
 800059e:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL_Msk, 0b0001 << RCC_CFGR_PLLMUL_Pos);
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0x134>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4a29      	ldr	r2, [pc, #164]	; (800064c <SystemClock_Config+0x148>)
 80005a6:	401a      	ands	r2, r3
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <SystemClock_Config+0x134>)
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	02c9      	lsls	r1, r1, #11
 80005ae:	430a      	orrs	r2, r1
 80005b0:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC_Msk, 0b0 << RCC_CFGR_PLLSRC_Pos);
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <SystemClock_Config+0x134>)
 80005b4:	68da      	ldr	r2, [r3, #12]
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <SystemClock_Config+0x134>)
 80005b8:	4925      	ldr	r1, [pc, #148]	; (8000650 <SystemClock_Config+0x14c>)
 80005ba:	400a      	ands	r2, r1
 80005bc:	60da      	str	r2, [r3, #12]

	// Вимкнення системного пробудження від MSI після STOP режиму
	SET_BIT(RCC->CFGR, RCC_CFGR_STOPWUCK);
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <SystemClock_Config+0x134>)
 80005c0:	68da      	ldr	r2, [r3, #12]
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <SystemClock_Config+0x134>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0209      	lsls	r1, r1, #8
 80005c8:	430a      	orrs	r2, r1
 80005ca:	60da      	str	r2, [r3, #12]

	// Налаштування прескалерів для шин APB1, APB2 та AHB
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2_Msk, 0b000 << RCC_CFGR_PPRE2_Pos);
 80005cc:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <SystemClock_Config+0x134>)
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <SystemClock_Config+0x134>)
 80005d2:	4920      	ldr	r1, [pc, #128]	; (8000654 <SystemClock_Config+0x150>)
 80005d4:	400a      	ands	r2, r1
 80005d6:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1_Msk, 0b000 << RCC_CFGR_PPRE1_Pos);
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <SystemClock_Config+0x134>)
 80005da:	68da      	ldr	r2, [r3, #12]
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <SystemClock_Config+0x134>)
 80005de:	491e      	ldr	r1, [pc, #120]	; (8000658 <SystemClock_Config+0x154>)
 80005e0:	400a      	ands	r2, r1
 80005e2:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE_Msk, 0b0000 << RCC_CFGR_HPRE_Pos);
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <SystemClock_Config+0x134>)
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <SystemClock_Config+0x134>)
 80005ea:	21f0      	movs	r1, #240	; 0xf0
 80005ec:	438a      	bics	r2, r1
 80005ee:	60da      	str	r2, [r3, #12]

	// Перемикання на PLL
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <SystemClock_Config+0x134>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <SystemClock_Config+0x134>)
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0449      	lsls	r1, r1, #17
 80005fa:	430a      	orrs	r2, r1
 80005fc:	601a      	str	r2, [r3, #0]

	// Очікування стабілізації PLL
	while (!(RCC->CR & RCC_CR_PLLRDY)) {
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <SystemClock_Config+0x134>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	049b      	lsls	r3, r3, #18
 8000608:	4013      	ands	r3, r2
 800060a:	d0f9      	beq.n	8000600 <SystemClock_Config+0xfc>
	}

	// Перемикання системної частоти на PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, RCC_CFGR_SW_PLL);
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <SystemClock_Config+0x134>)
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <SystemClock_Config+0x134>)
 8000612:	2103      	movs	r1, #3
 8000614:	430a      	orrs	r2, r1
 8000616:	60da      	str	r2, [r3, #12]

	// Очікування завершення перемикання
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL) {
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <SystemClock_Config+0x134>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	220c      	movs	r2, #12
 8000620:	4013      	ands	r3, r2
 8000622:	2b0c      	cmp	r3, #12
 8000624:	d1f9      	bne.n	800061a <SystemClock_Config+0x116>
	}
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40007000 	.word	0x40007000
 8000634:	ffffe7ff 	.word	0xffffe7ff
 8000638:	40021000 	.word	0x40021000
 800063c:	fffffeff 	.word	0xfffffeff
 8000640:	8fffffff 	.word	0x8fffffff
 8000644:	f0ffffff 	.word	0xf0ffffff
 8000648:	ff3fffff 	.word	0xff3fffff
 800064c:	ffc3ffff 	.word	0xffc3ffff
 8000650:	fffeffff 	.word	0xfffeffff
 8000654:	ffffc7ff 	.word	0xffffc7ff
 8000658:	fffff8ff 	.word	0xfffff8ff

0800065c <LPUART1_UART_Init>:

void LPUART1_UART_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	// Увімкнення тактування GPIOB
	RCC->IOPENR |= RCC_IOPENR_IOPBEN;
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <LPUART1_UART_Init+0xfc>)
 8000664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000666:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <LPUART1_UART_Init+0xfc>)
 8000668:	2102      	movs	r1, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин PB6/PB7 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 6, 0b10, 0, 0b11);  // TX
 800066e:	4b3b      	ldr	r3, [pc, #236]	; (800075c <LPUART1_UART_Init+0x100>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a3b      	ldr	r2, [pc, #236]	; (8000760 <LPUART1_UART_Init+0x104>)
 8000674:	401a      	ands	r2, r3
 8000676:	4b39      	ldr	r3, [pc, #228]	; (800075c <LPUART1_UART_Init+0x100>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	0189      	lsls	r1, r1, #6
 800067c:	430a      	orrs	r2, r1
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	4b36      	ldr	r3, [pc, #216]	; (800075c <LPUART1_UART_Init+0x100>)
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	4b35      	ldr	r3, [pc, #212]	; (800075c <LPUART1_UART_Init+0x100>)
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	438a      	bics	r2, r1
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <LPUART1_UART_Init+0x100>)
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	4b32      	ldr	r3, [pc, #200]	; (800075c <LPUART1_UART_Init+0x100>)
 8000692:	21c0      	movs	r1, #192	; 0xc0
 8000694:	0189      	lsls	r1, r1, #6
 8000696:	430a      	orrs	r2, r1
 8000698:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 7, 0b10, 0, 0b11);  // RX
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <LPUART1_UART_Init+0x100>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a31      	ldr	r2, [pc, #196]	; (8000764 <LPUART1_UART_Init+0x108>)
 80006a0:	401a      	ands	r2, r3
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <LPUART1_UART_Init+0x100>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0209      	lsls	r1, r1, #8
 80006a8:	430a      	orrs	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <LPUART1_UART_Init+0x100>)
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <LPUART1_UART_Init+0x100>)
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	438a      	bics	r2, r1
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <LPUART1_UART_Init+0x100>)
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <LPUART1_UART_Init+0x100>)
 80006be:	21c0      	movs	r1, #192	; 0xc0
 80006c0:	0209      	lsls	r1, r1, #8
 80006c2:	430a      	orrs	r2, r1
 80006c4:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AFR для пина PB6/PB7
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_Msk, 0b0110 << GPIO_AFRL_AFSEL6_Pos);
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <LPUART1_UART_Init+0x100>)
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <LPUART1_UART_Init+0x10c>)
 80006cc:	401a      	ands	r2, r3
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <LPUART1_UART_Init+0x100>)
 80006d0:	21c0      	movs	r1, #192	; 0xc0
 80006d2:	04c9      	lsls	r1, r1, #19
 80006d4:	430a      	orrs	r2, r1
 80006d6:	621a      	str	r2, [r3, #32]
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_Msk, 0b0110 << GPIO_AFRL_AFSEL7_Pos);
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <LPUART1_UART_Init+0x100>)
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	091a      	lsrs	r2, r3, #4
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <LPUART1_UART_Init+0x100>)
 80006e2:	21c0      	movs	r1, #192	; 0xc0
 80006e4:	05c9      	lsls	r1, r1, #23
 80006e6:	430a      	orrs	r2, r1
 80006e8:	621a      	str	r2, [r3, #32]
	
    RCC->APB1ENR |= RCC_APB1ENR_LPUART1EN;// Включаємо тактування для LPUART1
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <LPUART1_UART_Init+0xfc>)
 80006ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <LPUART1_UART_Init+0xfc>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	02c9      	lsls	r1, r1, #11
 80006f4:	430a      	orrs	r2, r1
 80006f6:	639a      	str	r2, [r3, #56]	; 0x38
    LPUART1->CR1 &= ~USART_CR1_UE; // Скидаємо налаштування LPUART1 перед конфігуруванням // Вимикаємо UART для конфігурації
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <LPUART1_UART_Init+0x110>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <LPUART1_UART_Init+0x110>)
 80006fe:	2101      	movs	r1, #1
 8000700:	438a      	bics	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
    // Встановлюємо швидкість передачі (Baud rate) = 115200
    // Для LPUART1 швидкість передачі обчислюється за формулою: baud = (ClockFreq) / (PRESC * (USARTDIV+1))
    // У даному випадку PRESC = 1 (немає переддільника), тому:
    // Baud rate = (System clock) / (USARTDIV+1), де USARTDIV = (System clock / Baud) - 1
    uint32_t uartdiv = (SYSCLK / 115200) - 1;
 8000704:	238a      	movs	r3, #138	; 0x8a
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	607b      	str	r3, [r7, #4]
    LPUART1->BRR = uartdiv;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <LPUART1_UART_Init+0x110>)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
    LPUART1->CR1 |= USART_CR1_M1; // Конфігуруємо довжину слова - 7 біт (M1=1, M0=0)
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <LPUART1_UART_Init+0x110>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <LPUART1_UART_Init+0x110>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	0549      	lsls	r1, r1, #21
 800071a:	430a      	orrs	r2, r1
 800071c:	601a      	str	r2, [r3, #0]
    LPUART1->CR2 &= ~USART_CR2_STOP; // Налаштовуємо стоп-біти - 1 стоп-біт (SBK=0)
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <LPUART1_UART_Init+0x110>)
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <LPUART1_UART_Init+0x110>)
 8000724:	490e      	ldr	r1, [pc, #56]	; (8000760 <LPUART1_UART_Init+0x104>)
 8000726:	400a      	ands	r2, r1
 8000728:	605a      	str	r2, [r3, #4]
    LPUART1->CR1 &= ~USART_CR1_PCE; // Встановлюємо парність - без парності (PCE=0)
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <LPUART1_UART_Init+0x110>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <LPUART1_UART_Init+0x110>)
 8000730:	490f      	ldr	r1, [pc, #60]	; (8000770 <LPUART1_UART_Init+0x114>)
 8000732:	400a      	ands	r2, r1
 8000734:	601a      	str	r2, [r3, #0]
    LPUART1->CR1 |= USART_CR1_RE | USART_CR1_TE;// Увімкнення режиму прийому та передачі (RE=1, TE=1)
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <LPUART1_UART_Init+0x110>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <LPUART1_UART_Init+0x110>)
 800073c:	210c      	movs	r1, #12
 800073e:	430a      	orrs	r2, r1
 8000740:	601a      	str	r2, [r3, #0]
    LPUART1->CR1 |= USART_CR1_UE;// Увімкнення LPUART1
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <LPUART1_UART_Init+0x110>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <LPUART1_UART_Init+0x110>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	601a      	str	r2, [r3, #0]

}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40021000 	.word	0x40021000
 800075c:	50000400 	.word	0x50000400
 8000760:	ffffcfff 	.word	0xffffcfff
 8000764:	ffff3fff 	.word	0xffff3fff
 8000768:	f0ffffff 	.word	0xf0ffffff
 800076c:	40004800 	.word	0x40004800
 8000770:	fffffbff 	.word	0xfffffbff

08000774 <RTC_Init>:

void RTC_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    // 1. Enable power and backup domain access
    SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8000778:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <RTC_Init+0xc0>)
 800077a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <RTC_Init+0xc0>)
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	0549      	lsls	r1, r1, #21
 8000782:	430a      	orrs	r2, r1
 8000784:	639a      	str	r2, [r3, #56]	; 0x38
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <RTC_Init+0xc4>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <RTC_Init+0xc4>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0049      	lsls	r1, r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	601a      	str	r2, [r3, #0]

    // 2. Enable LSE Oscillator
    SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <RTC_Init+0xc0>)
 8000796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <RTC_Init+0xc0>)
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	0049      	lsls	r1, r1, #1
 800079e:	430a      	orrs	r2, r1
 80007a0:	651a      	str	r2, [r3, #80]	; 0x50
    while (!(READ_BIT(RCC->CSR, RCC_CSR_LSERDY))) {}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <RTC_Init+0xc0>)
 80007a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4013      	ands	r3, r2
 80007ae:	d0f9      	beq.n	80007a4 <RTC_Init+0x30>

    // 3. Set LSE as RTC clock source and enable RTC
    MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL_Msk, 0b01 << RCC_CSR_RTCSEL_Pos);  // LSE selected as RTC clock
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <RTC_Init+0xc0>)
 80007b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <RTC_Init+0xc8>)
 80007b6:	401a      	ands	r2, r3
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <RTC_Init+0xc0>)
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	0249      	lsls	r1, r1, #9
 80007be:	430a      	orrs	r2, r1
 80007c0:	651a      	str	r2, [r3, #80]	; 0x50
    SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <RTC_Init+0xc0>)
 80007c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <RTC_Init+0xc0>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	02c9      	lsls	r1, r1, #11
 80007cc:	430a      	orrs	r2, r1
 80007ce:	651a      	str	r2, [r3, #80]	; 0x50

    // 4. Disable RTC write protection
    RTC->WPR = 0xCA;  // Step 1
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <RTC_Init+0xcc>)
 80007d2:	22ca      	movs	r2, #202	; 0xca
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;  // Step 2
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <RTC_Init+0xcc>)
 80007d8:	2253      	movs	r2, #83	; 0x53
 80007da:	625a      	str	r2, [r3, #36]	; 0x24

    // 5. Enter initialization mode
    SET_BIT(RTC->ISR, RTC_ISR_INIT);
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <RTC_Init+0xcc>)
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <RTC_Init+0xcc>)
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	430a      	orrs	r2, r1
 80007e6:	60da      	str	r2, [r3, #12]
    while (!(READ_BIT(RTC->ISR, RTC_ISR_INITF))) {}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <RTC_Init+0xcc>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	2240      	movs	r2, #64	; 0x40
 80007f0:	4013      	ands	r3, r2
 80007f2:	d0fa      	beq.n	80007ea <RTC_Init+0x76>

    // 6. Set the time in BCD format (17:36:00)
    MODIFY_REG(RTC->TR,
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <RTC_Init+0xcc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <RTC_Init+0xd0>)
 80007fa:	401a      	ands	r2, r3
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <RTC_Init+0xcc>)
 80007fe:	4912      	ldr	r1, [pc, #72]	; (8000848 <RTC_Init+0xd4>)
 8000800:	430a      	orrs	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
               (0x6 << RTC_TR_MNU_Pos) |   // Minute units (6 -> 36)
               (0x0 << RTC_TR_ST_Pos)  |   // Second tens (0 -> 00)
               (0x0 << RTC_TR_SU_Pos));    // Second units (0 -> 00)

    // 7. Set the date in BCD format (01/02/2024, Monday)
    MODIFY_REG(RTC->DR,
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <RTC_Init+0xcc>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	4a10      	ldr	r2, [pc, #64]	; (800084c <RTC_Init+0xd8>)
 800080a:	401a      	ands	r2, r3
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <RTC_Init+0xcc>)
 800080e:	4910      	ldr	r1, [pc, #64]	; (8000850 <RTC_Init+0xdc>)
 8000810:	430a      	orrs	r2, r1
 8000812:	605a      	str	r2, [r3, #4]
               (0x0 << RTC_DR_DT_Pos)  |  // Day tens (0 -> 01)
               (0x1 << RTC_DR_DU_Pos)  |  // Day units (1 -> 01)
               (0x2 << RTC_DR_WDU_Pos)); // Weekday (3 -> Monday)

    // 8. Exit initialization mode
    CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <RTC_Init+0xcc>)
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <RTC_Init+0xcc>)
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	438a      	bics	r2, r1
 800081e:	60da      	str	r2, [r3, #12]

    // 9. Re-enable RTC write protection  
	RTC->WPR = 0xFE; // Disable write access for RTC register
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <RTC_Init+0xcc>)
 8000822:	22fe      	movs	r2, #254	; 0xfe
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x64; //				-||-
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <RTC_Init+0xcc>)
 8000828:	2264      	movs	r2, #100	; 0x64
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40021000 	.word	0x40021000
 8000838:	40007000 	.word	0x40007000
 800083c:	fffcffff 	.word	0xfffcffff
 8000840:	40002800 	.word	0x40002800
 8000844:	ffc08080 	.word	0xffc08080
 8000848:	00173600 	.word	0x00173600
 800084c:	ff0000c0 	.word	0xff0000c0
 8000850:	00244401 	.word	0x00244401

08000854 <TIM2_Init>:

void TIM2_Init(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

	// Увімкнення тактування GPIOA (для PA15, як PWM вихід)
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 8000858:	4b61      	ldr	r3, [pc, #388]	; (80009e0 <TIM2_Init+0x18c>)
 800085a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085c:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <TIM2_Init+0x18c>)
 800085e:	2101      	movs	r1, #1
 8000860:	430a      	orrs	r2, r1
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин 15 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 15, 0b10, 0, 0b11);  // BuzzerPin
 8000864:	4b5f      	ldr	r3, [pc, #380]	; (80009e4 <TIM2_Init+0x190>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	089a      	lsrs	r2, r3, #2
 800086c:	4b5d      	ldr	r3, [pc, #372]	; (80009e4 <TIM2_Init+0x190>)
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	0609      	lsls	r1, r1, #24
 8000872:	430a      	orrs	r2, r1
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	4b5b      	ldr	r3, [pc, #364]	; (80009e4 <TIM2_Init+0x190>)
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4b5a      	ldr	r3, [pc, #360]	; (80009e4 <TIM2_Init+0x190>)
 800087c:	495a      	ldr	r1, [pc, #360]	; (80009e8 <TIM2_Init+0x194>)
 800087e:	400a      	ands	r2, r1
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <TIM2_Init+0x190>)
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	4b57      	ldr	r3, [pc, #348]	; (80009e4 <TIM2_Init+0x190>)
 8000888:	21c0      	movs	r1, #192	; 0xc0
 800088a:	0609      	lsls	r1, r1, #24
 800088c:	430a      	orrs	r2, r1
 800088e:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AF1 для пина 15
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFSEL15_Msk, 0b0101 << GPIO_AFRH_AFSEL15_Pos);
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	091a      	lsrs	r2, r3, #4
 800089a:	23a0      	movs	r3, #160	; 0xa0
 800089c:	05db      	lsls	r3, r3, #23
 800089e:	21a0      	movs	r1, #160	; 0xa0
 80008a0:	05c9      	lsls	r1, r1, #23
 80008a2:	430a      	orrs	r2, r1
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24

	// Увімкнення тактування TIM2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80008a6:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <TIM2_Init+0x18c>)
 80008a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008aa:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <TIM2_Init+0x18c>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	430a      	orrs	r2, r1
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
	CLEAR_BIT(TIM2->CR1, TIM_CR1_CEN);
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	2101      	movs	r1, #1
 80008be:	438a      	bics	r2, r1
 80008c0:	601a      	str	r2, [r3, #0]

	/*Настройка таймера 2*/
		//TIMx control register 1 (TIMx_CR1)
		//SET_BIT(TIM2->CR1, TIM_CR1_CEN);  //Запуск таймера
		CLEAR_BIT(TIM2->CR1, TIM_CR1_UDIS);//Генерировать событие Update
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	2102      	movs	r1, #2
 80008ce:	438a      	bics	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(TIM2->CR1, TIM_CR1_URS);  //Генерировать прерывание
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2104      	movs	r1, #4
 80008de:	438a      	bics	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(TIM2->CR1, TIM_CR1_OPM); //One pulse mode off(Счетчик не останавливается при обновлении)
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	2108      	movs	r1, #8
 80008ee:	438a      	bics	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(TIM2->CR1, TIM_CR1_DIR);  //Считаем вверх
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2110      	movs	r1, #16
 80008fe:	438a      	bics	r2, r1
 8000900:	601a      	str	r2, [r3, #0]
		MODIFY_REG(TIM2->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); //Выравнивание по краю
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	2160      	movs	r1, #96	; 0x60
 800090e:	438a      	bics	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
		SET_BIT(TIM2->CR1, TIM_CR1_ARPE); //Auto-reload preload enable
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	430a      	orrs	r2, r1
 8000920:	601a      	str	r2, [r3, #0]
		MODIFY_REG(TIM2->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); //Предделение выключено
 8000922:	2380      	movs	r3, #128	; 0x80
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	492f      	ldr	r1, [pc, #188]	; (80009ec <TIM2_Init+0x198>)
 800092e:	400a      	ands	r2, r1
 8000930:	601a      	str	r2, [r3, #0]

		/*Настройка прерываний*/
		//TIMx DMA/Interrupt enable register (TIMx_DIER)
		SET_BIT(TIM2->DIER, TIM_DIER_UIE);//Update interrupt enable
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	68da      	ldr	r2, [r3, #12]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2101      	movs	r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	60da      	str	r2, [r3, #12]

		//TIMx status register (TIMx_SR) - Статусные регистры

		TIM2->PSC = 3200 - 1;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <TIM2_Init+0x19c>)
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
		TIM2->ARR = 10000 - 1;
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	4a29      	ldr	r2, [pc, #164]	; (80009f4 <TIM2_Init+0x1a0>)
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c

		NVIC_EnableIRQ(TIM2_IRQn); //Разрешить прерывания по таймеру 2
 8000952:	200f      	movs	r0, #15
 8000954:	f7ff fd4e 	bl	80003f4 <__NVIC_EnableIRQ>
		/*Настройка шим(Канал 1)*/
		MODIFY_REG(TIM2->CCMR1, TIM_CCMR1_CC1S_Msk, 0b00 << TIM_CCMR1_CC1S_Pos); //CC1 channel is configured as output
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	699a      	ldr	r2, [r3, #24]
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2103      	movs	r1, #3
 8000964:	438a      	bics	r2, r1
 8000966:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIM2->CCMR1, TIM_CCMR1_OC1FE); //Fast mode disable
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2104      	movs	r1, #4
 8000974:	438a      	bics	r2, r1
 8000976:	619a      	str	r2, [r3, #24]
		SET_BIT(TIM2->CCMR1, TIM_CCMR1_OC1PE);  //Preload enable
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	699a      	ldr	r2, [r3, #24]
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2108      	movs	r1, #8
 8000984:	430a      	orrs	r2, r1
 8000986:	619a      	str	r2, [r3, #24]
		MODIFY_REG(TIM2->CCMR1, TIM_CCMR1_OC1M_Msk, 0b110 << TIM_CCMR1_OC1M_Pos); //PWM MODE 1
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	2270      	movs	r2, #112	; 0x70
 8000990:	4393      	bics	r3, r2
 8000992:	001a      	movs	r2, r3
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	2160      	movs	r1, #96	; 0x60
 800099a:	430a      	orrs	r2, r1
 800099c:	619a      	str	r2, [r3, #24]
		CLEAR_BIT(TIM2->CCMR1, TIM_CCMR1_OC1CE); //OC1Ref is not affected by the ETRF input
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	699a      	ldr	r2, [r3, #24]
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	05db      	lsls	r3, r3, #23
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	438a      	bics	r2, r1
 80009ac:	619a      	str	r2, [r3, #24]

		/*Запуск ШИМ*/
		//15.4.9 TIMx capture/compare enable register (TIMx_CCER)
		SET_BIT(TIM2->CCER, TIM_CCER_CC1E);//On - OC1 signal is output on the corresponding output pin.
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	6a1a      	ldr	r2, [r3, #32]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	621a      	str	r2, [r3, #32]
		CLEAR_BIT(TIM21->CCER, TIM_CCER_CC1P); //OC1 active high.
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <TIM2_Init+0x1a4>)
 80009c0:	6a1a      	ldr	r2, [r3, #32]
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <TIM2_Init+0x1a4>)
 80009c4:	2102      	movs	r1, #2
 80009c6:	438a      	bics	r2, r1
 80009c8:	621a      	str	r2, [r3, #32]


		SET_BIT(TIM2->CR1, TIM_CR1_CEN);
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	2101      	movs	r1, #1
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	50000400 	.word	0x50000400
 80009e8:	ffff7fff 	.word	0xffff7fff
 80009ec:	fffffcff 	.word	0xfffffcff
 80009f0:	00000c7f 	.word	0x00000c7f
 80009f4:	0000270f 	.word	0x0000270f
 80009f8:	40010800 	.word	0x40010800

080009fc <TIM21_Init>:

void TIM21_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	// Увімкнення тактування GPIOB (для PB5, як PWM вихід)
	RCC->IOPENR |= RCC_IOPENR_IOPBEN;
 8000a00:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <TIM21_Init+0x144>)
 8000a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a04:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <TIM21_Init+0x144>)
 8000a06:	2102      	movs	r1, #2
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	// Настроить пин 5 на режим альтернативной функции
	CONFIGURE_GPIO(GPIOB, 5, 0b10, 0, 0b11);  // mainLED
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <TIM21_Init+0x148>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a4d      	ldr	r2, [pc, #308]	; (8000b48 <TIM21_Init+0x14c>)
 8000a12:	401a      	ands	r2, r3
 8000a14:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <TIM21_Init+0x148>)
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	0109      	lsls	r1, r1, #4
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	4b49      	ldr	r3, [pc, #292]	; (8000b44 <TIM21_Init+0x148>)
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	4b48      	ldr	r3, [pc, #288]	; (8000b44 <TIM21_Init+0x148>)
 8000a24:	2120      	movs	r1, #32
 8000a26:	438a      	bics	r2, r1
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	4b46      	ldr	r3, [pc, #280]	; (8000b44 <TIM21_Init+0x148>)
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <TIM21_Init+0x148>)
 8000a30:	21c0      	movs	r1, #192	; 0xc0
 8000a32:	0109      	lsls	r1, r1, #4
 8000a34:	430a      	orrs	r2, r1
 8000a36:	609a      	str	r2, [r3, #8]
	// Настроить альтернативную функцию AF1 для пина 5
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFSEL5_Msk, 0b0101 << GPIO_AFRL_AFSEL5_Pos);
 8000a38:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <TIM21_Init+0x148>)
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	4a43      	ldr	r2, [pc, #268]	; (8000b4c <TIM21_Init+0x150>)
 8000a3e:	401a      	ands	r2, r3
 8000a40:	4b40      	ldr	r3, [pc, #256]	; (8000b44 <TIM21_Init+0x148>)
 8000a42:	21a0      	movs	r1, #160	; 0xa0
 8000a44:	03c9      	lsls	r1, r1, #15
 8000a46:	430a      	orrs	r2, r1
 8000a48:	621a      	str	r2, [r3, #32]

	// Увімкнення тактування TIM21
	RCC->APB2ENR |= RCC_APB2ENR_TIM21EN;
 8000a4a:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <TIM21_Init+0x144>)
 8000a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4e:	4b3c      	ldr	r3, [pc, #240]	; (8000b40 <TIM21_Init+0x144>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	430a      	orrs	r2, r1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
	CLEAR_BIT(TIM21->CR1, TIM_CR1_CEN);
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <TIM21_Init+0x154>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <TIM21_Init+0x154>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	438a      	bics	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]

	/*Настройка таймера 21*/
	//TIMx control register 1 (TIMx_CR1)
	//SET_BIT(TIM21->CR1, TIM_CR1_CEN);  //Запуск таймера
	CLEAR_BIT(TIM21->CR1, TIM_CR1_UDIS);//Генерировать событие Update
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <TIM21_Init+0x154>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <TIM21_Init+0x154>)
 8000a68:	2102      	movs	r1, #2
 8000a6a:	438a      	bics	r2, r1
 8000a6c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_URS);  //Генерировать прерывание
 8000a6e:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <TIM21_Init+0x154>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <TIM21_Init+0x154>)
 8000a74:	2104      	movs	r1, #4
 8000a76:	438a      	bics	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_OPM); //One pulse mode off(Счетчик не останавливается при обновлении)
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <TIM21_Init+0x154>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <TIM21_Init+0x154>)
 8000a80:	2108      	movs	r1, #8
 8000a82:	438a      	bics	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIM21->CR1, TIM_CR1_DIR);  //Считаем вверх
 8000a86:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <TIM21_Init+0x154>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <TIM21_Init+0x154>)
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	438a      	bics	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM21->CR1, TIM_CR1_CMS_Msk, 0b00 << TIM_CR1_CMS_Pos); //Выравнивание по краю
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <TIM21_Init+0x154>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <TIM21_Init+0x154>)
 8000a98:	2160      	movs	r1, #96	; 0x60
 8000a9a:	438a      	bics	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM21->CR1, TIM_CR1_ARPE); //Auto-reload preload enable
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <TIM21_Init+0x154>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <TIM21_Init+0x154>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	601a      	str	r2, [r3, #0]
	MODIFY_REG(TIM21->CR1, TIM_CR1_CKD_Msk, 0b00 << TIM_CR1_CKD_Pos); //Предделение выключено
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <TIM21_Init+0x154>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <TIM21_Init+0x154>)
 8000ab0:	4928      	ldr	r1, [pc, #160]	; (8000b54 <TIM21_Init+0x158>)
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]

	/*Настройка прерываний*/
	//TIMx DMA/Interrupt enable register (TIMx_DIER)
	SET_BIT(TIM21->DIER, TIM_DIER_UIE);//Update interrupt enable
 8000ab6:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <TIM21_Init+0x154>)
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <TIM21_Init+0x154>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	60da      	str	r2, [r3, #12]

	//TIMx status register (TIMx_SR) - Статусные регистры
	TIM21->PSC = 32 - 1;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <TIM21_Init+0x154>)
 8000ac4:	221f      	movs	r2, #31
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM21->ARR = 10000 - 1;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <TIM21_Init+0x154>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <TIM21_Init+0x15c>)
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM21_IRQn); //Разрешить прерывания по таймеру 21
 8000ace:	2014      	movs	r0, #20
 8000ad0:	f7ff fc90 	bl	80003f4 <__NVIC_EnableIRQ>

	/*Настройка шим(Канал 1)*/
	MODIFY_REG(TIM21->CCMR1, TIM_CCMR1_CC1S_Msk, 0b00 << TIM_CCMR1_CC1S_Pos); //CC1 channel is configured as output
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <TIM21_Init+0x154>)
 8000ad6:	699a      	ldr	r2, [r3, #24]
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <TIM21_Init+0x154>)
 8000ada:	2103      	movs	r1, #3
 8000adc:	438a      	bics	r2, r1
 8000ade:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM21->CCMR1, TIM_CCMR1_OC1FE); //Fast mode disable
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <TIM21_Init+0x154>)
 8000ae2:	699a      	ldr	r2, [r3, #24]
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <TIM21_Init+0x154>)
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	438a      	bics	r2, r1
 8000aea:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM21->CCMR1, TIM_CCMR1_OC1PE);  //Preload enable
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <TIM21_Init+0x154>)
 8000aee:	699a      	ldr	r2, [r3, #24]
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <TIM21_Init+0x154>)
 8000af2:	2108      	movs	r1, #8
 8000af4:	430a      	orrs	r2, r1
 8000af6:	619a      	str	r2, [r3, #24]
	MODIFY_REG(TIM21->CCMR1, TIM_CCMR1_OC1M_Msk, 0b110 << TIM_CCMR1_OC1M_Pos); //PWM MODE 1
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <TIM21_Init+0x154>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	2270      	movs	r2, #112	; 0x70
 8000afe:	4393      	bics	r3, r2
 8000b00:	001a      	movs	r2, r3
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <TIM21_Init+0x154>)
 8000b04:	2160      	movs	r1, #96	; 0x60
 8000b06:	430a      	orrs	r2, r1
 8000b08:	619a      	str	r2, [r3, #24]
	CLEAR_BIT(TIM21->CCMR1, TIM_CCMR1_OC1CE); //OC1Ref is not affected by the ETRF input
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <TIM21_Init+0x154>)
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <TIM21_Init+0x154>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	438a      	bics	r2, r1
 8000b14:	619a      	str	r2, [r3, #24]

	/*Запуск ШИМ*/
	// TIMx capture/compare enable register (TIMx_CCER)
	SET_BIT(TIM21->CCER, TIM_CCER_CC1E);//On - OC1 signal is output on the corresponding output pin.
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <TIM21_Init+0x154>)
 8000b18:	6a1a      	ldr	r2, [r3, #32]
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <TIM21_Init+0x154>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	621a      	str	r2, [r3, #32]
	SET_BIT(TIM21->CCER, TIM_CCER_CC1P); //OC1 active high.
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <TIM21_Init+0x154>)
 8000b24:	6a1a      	ldr	r2, [r3, #32]
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <TIM21_Init+0x154>)
 8000b28:	2102      	movs	r1, #2
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	621a      	str	r2, [r3, #32]

	SET_BIT(TIM21->CR1, TIM_CR1_CEN);
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <TIM21_Init+0x154>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <TIM21_Init+0x154>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	430a      	orrs	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	50000400 	.word	0x50000400
 8000b48:	fffff3ff 	.word	0xfffff3ff
 8000b4c:	ff0fffff 	.word	0xff0fffff
 8000b50:	40010800 	.word	0x40010800
 8000b54:	fffffcff 	.word	0xfffffcff
 8000b58:	0000270f 	.word	0x0000270f

08000b5c <GPIO_Init>:

void GPIO_Init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	// Включення тактування портів A, B, C
	RCC->IOPENR |= RCC_IOPENR_IOPAEN | RCC_IOPENR_IOPBEN | RCC_IOPENR_IOPCEN;
 8000b60:	4bfd      	ldr	r3, [pc, #1012]	; (8000f58 <GPIO_Init+0x3fc>)
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	4bfc      	ldr	r3, [pc, #1008]	; (8000f58 <GPIO_Init+0x3fc>)
 8000b66:	2107      	movs	r1, #7
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c

	// Налаштування світлодіодів (виводи PA, PB)
	CONFIGURE_GPIO(GPIOA, 7, 0b01, 0, 0b11);  // LEDa
 8000b6c:	23a0      	movs	r3, #160	; 0xa0
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4afa      	ldr	r2, [pc, #1000]	; (8000f5c <GPIO_Init+0x400>)
 8000b74:	401a      	ands	r2, r3
 8000b76:	23a0      	movs	r3, #160	; 0xa0
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	01c9      	lsls	r1, r1, #7
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	438a      	bics	r2, r1
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	23a0      	movs	r3, #160	; 0xa0
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	21c0      	movs	r1, #192	; 0xc0
 8000b9e:	0209      	lsls	r1, r1, #8
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 1, 0b01, 0, 0b11);  // LEDb
 8000ba4:	4bee      	ldr	r3, [pc, #952]	; (8000f60 <GPIO_Init+0x404>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	220c      	movs	r2, #12
 8000baa:	4393      	bics	r3, r2
 8000bac:	001a      	movs	r2, r3
 8000bae:	4bec      	ldr	r3, [pc, #944]	; (8000f60 <GPIO_Init+0x404>)
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	4bea      	ldr	r3, [pc, #936]	; (8000f60 <GPIO_Init+0x404>)
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	4be9      	ldr	r3, [pc, #932]	; (8000f60 <GPIO_Init+0x404>)
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	438a      	bics	r2, r1
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	4be7      	ldr	r3, [pc, #924]	; (8000f60 <GPIO_Init+0x404>)
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	4be6      	ldr	r3, [pc, #920]	; (8000f60 <GPIO_Init+0x404>)
 8000bc8:	210c      	movs	r1, #12
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 6, 0b01, 0, 0b11);  // LEDc
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4ae3      	ldr	r2, [pc, #908]	; (8000f64 <GPIO_Init+0x408>)
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	23a0      	movs	r3, #160	; 0xa0
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	0149      	lsls	r1, r1, #5
 8000be0:	430a      	orrs	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	23a0      	movs	r3, #160	; 0xa0
 8000be6:	05db      	lsls	r3, r3, #23
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	23a0      	movs	r3, #160	; 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	438a      	bics	r2, r1
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	23a0      	movs	r3, #160	; 0xa0
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	23a0      	movs	r3, #160	; 0xa0
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	21c0      	movs	r1, #192	; 0xc0
 8000c00:	0189      	lsls	r1, r1, #6
 8000c02:	430a      	orrs	r2, r1
 8000c04:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 5, 0b01, 0, 0b11);  // LEDd
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4ad6      	ldr	r2, [pc, #856]	; (8000f68 <GPIO_Init+0x40c>)
 8000c0e:	401a      	ands	r2, r3
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	00c9      	lsls	r1, r1, #3
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	23a0      	movs	r3, #160	; 0xa0
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	23a0      	movs	r3, #160	; 0xa0
 8000c24:	05db      	lsls	r3, r3, #23
 8000c26:	2120      	movs	r1, #32
 8000c28:	438a      	bics	r2, r1
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	23a0      	movs	r3, #160	; 0xa0
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	21c0      	movs	r1, #192	; 0xc0
 8000c38:	0109      	lsls	r1, r1, #4
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 11, 0b01, 0, 0b11); // LEDe
 8000c3e:	23a0      	movs	r3, #160	; 0xa0
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4ac9      	ldr	r2, [pc, #804]	; (8000f6c <GPIO_Init+0x410>)
 8000c46:	401a      	ands	r2, r3
 8000c48:	23a0      	movs	r3, #160	; 0xa0
 8000c4a:	05db      	lsls	r3, r3, #23
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	03c9      	lsls	r1, r1, #15
 8000c50:	430a      	orrs	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	23a0      	movs	r3, #160	; 0xa0
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	23a0      	movs	r3, #160	; 0xa0
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	49c4      	ldr	r1, [pc, #784]	; (8000f70 <GPIO_Init+0x414>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	23a0      	movs	r3, #160	; 0xa0
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	23a0      	movs	r3, #160	; 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	21c0      	movs	r1, #192	; 0xc0
 8000c70:	0409      	lsls	r1, r1, #16
 8000c72:	430a      	orrs	r2, r1
 8000c74:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 9, 0b01, 0, 0b11);  // LEDf
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4abd      	ldr	r2, [pc, #756]	; (8000f74 <GPIO_Init+0x418>)
 8000c7e:	401a      	ands	r2, r3
 8000c80:	23a0      	movs	r3, #160	; 0xa0
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	02c9      	lsls	r1, r1, #11
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	23a0      	movs	r3, #160	; 0xa0
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	49b8      	ldr	r1, [pc, #736]	; (8000f78 <GPIO_Init+0x41c>)
 8000c98:	400a      	ands	r2, r1
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	23a0      	movs	r3, #160	; 0xa0
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	23a0      	movs	r3, #160	; 0xa0
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	21c0      	movs	r1, #192	; 0xc0
 8000ca8:	0309      	lsls	r1, r1, #12
 8000caa:	430a      	orrs	r2, r1
 8000cac:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 0, 0b01, 0, 0b11);  // LEDg
 8000cae:	4bac      	ldr	r3, [pc, #688]	; (8000f60 <GPIO_Init+0x404>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	4393      	bics	r3, r2
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	4ba9      	ldr	r3, [pc, #676]	; (8000f60 <GPIO_Init+0x404>)
 8000cba:	2101      	movs	r1, #1
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	4ba7      	ldr	r3, [pc, #668]	; (8000f60 <GPIO_Init+0x404>)
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4ba6      	ldr	r3, [pc, #664]	; (8000f60 <GPIO_Init+0x404>)
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	438a      	bics	r2, r1
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	4ba4      	ldr	r3, [pc, #656]	; (8000f60 <GPIO_Init+0x404>)
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	4ba3      	ldr	r3, [pc, #652]	; (8000f60 <GPIO_Init+0x404>)
 8000cd2:	2103      	movs	r1, #3
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 3, 0b01, 0, 0b11);  // LEDdp
 8000cd8:	4ba1      	ldr	r3, [pc, #644]	; (8000f60 <GPIO_Init+0x404>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	22c0      	movs	r2, #192	; 0xc0
 8000cde:	4393      	bics	r3, r2
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	4b9f      	ldr	r3, [pc, #636]	; (8000f60 <GPIO_Init+0x404>)
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	4b9d      	ldr	r3, [pc, #628]	; (8000f60 <GPIO_Init+0x404>)
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	4b9c      	ldr	r3, [pc, #624]	; (8000f60 <GPIO_Init+0x404>)
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	4b9a      	ldr	r3, [pc, #616]	; (8000f60 <GPIO_Init+0x404>)
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	4b99      	ldr	r3, [pc, #612]	; (8000f60 <GPIO_Init+0x404>)
 8000cfc:	21c0      	movs	r1, #192	; 0xc0
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 3, 0b01, 0, 0b11);  // LEDD1
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	22c0      	movs	r2, #192	; 0xc0
 8000d0a:	4393      	bics	r3, r2
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	23a0      	movs	r3, #160	; 0xa0
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	430a      	orrs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	23a0      	movs	r3, #160	; 0xa0
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	2108      	movs	r1, #8
 8000d24:	438a      	bics	r2, r1
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	23a0      	movs	r3, #160	; 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	23a0      	movs	r3, #160	; 0xa0
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	21c0      	movs	r1, #192	; 0xc0
 8000d34:	430a      	orrs	r2, r1
 8000d36:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 4, 0b01, 0, 0b11);  // LEDD2
 8000d38:	23a0      	movs	r3, #160	; 0xa0
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a8f      	ldr	r2, [pc, #572]	; (8000f7c <GPIO_Init+0x420>)
 8000d40:	401a      	ands	r2, r3
 8000d42:	23a0      	movs	r3, #160	; 0xa0
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	0049      	lsls	r1, r1, #1
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	23a0      	movs	r3, #160	; 0xa0
 8000d56:	05db      	lsls	r3, r3, #23
 8000d58:	2110      	movs	r1, #16
 8000d5a:	438a      	bics	r2, r1
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	23a0      	movs	r3, #160	; 0xa0
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	23a0      	movs	r3, #160	; 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	21c0      	movs	r1, #192	; 0xc0
 8000d6a:	0089      	lsls	r1, r1, #2
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 12, 0b01, 0, 0b11); // LEDD3
 8000d70:	23a0      	movs	r3, #160	; 0xa0
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a82      	ldr	r2, [pc, #520]	; (8000f80 <GPIO_Init+0x424>)
 8000d78:	401a      	ands	r2, r3
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	0449      	lsls	r1, r1, #17
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	23a0      	movs	r3, #160	; 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	23a0      	movs	r3, #160	; 0xa0
 8000d8e:	05db      	lsls	r3, r3, #23
 8000d90:	497c      	ldr	r1, [pc, #496]	; (8000f84 <GPIO_Init+0x428>)
 8000d92:	400a      	ands	r2, r1
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	23a0      	movs	r3, #160	; 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	23a0      	movs	r3, #160	; 0xa0
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	21c0      	movs	r1, #192	; 0xc0
 8000da2:	0489      	lsls	r1, r1, #18
 8000da4:	430a      	orrs	r2, r1
 8000da6:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOB, 4, 0b01, 0, 0b11);  // LEDD4
 8000da8:	4b6d      	ldr	r3, [pc, #436]	; (8000f60 <GPIO_Init+0x404>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a73      	ldr	r2, [pc, #460]	; (8000f7c <GPIO_Init+0x420>)
 8000dae:	401a      	ands	r2, r3
 8000db0:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <GPIO_Init+0x404>)
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	0049      	lsls	r1, r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	4b69      	ldr	r3, [pc, #420]	; (8000f60 <GPIO_Init+0x404>)
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <GPIO_Init+0x404>)
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	438a      	bics	r2, r1
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	4b66      	ldr	r3, [pc, #408]	; (8000f60 <GPIO_Init+0x404>)
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <GPIO_Init+0x404>)
 8000dcc:	21c0      	movs	r1, #192	; 0xc0
 8000dce:	0089      	lsls	r1, r1, #2
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 10, 0b01, 0, 0b11); // LEDl1l2
 8000dd4:	23a0      	movs	r3, #160	; 0xa0
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a6b      	ldr	r2, [pc, #428]	; (8000f88 <GPIO_Init+0x42c>)
 8000ddc:	401a      	ands	r2, r3
 8000dde:	23a0      	movs	r3, #160	; 0xa0
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	0349      	lsls	r1, r1, #13
 8000de6:	430a      	orrs	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	23a0      	movs	r3, #160	; 0xa0
 8000df2:	05db      	lsls	r3, r3, #23
 8000df4:	4965      	ldr	r1, [pc, #404]	; (8000f8c <GPIO_Init+0x430>)
 8000df6:	400a      	ands	r2, r1
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	23a0      	movs	r3, #160	; 0xa0
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	21c0      	movs	r1, #192	; 0xc0
 8000e06:	0389      	lsls	r1, r1, #14
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOA, 8, 0b01, 0, 0b11);  // LEDalarm
 8000e0c:	23a0      	movs	r3, #160	; 0xa0
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a5f      	ldr	r2, [pc, #380]	; (8000f90 <GPIO_Init+0x434>)
 8000e14:	401a      	ands	r2, r3
 8000e16:	23a0      	movs	r3, #160	; 0xa0
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	23a0      	movs	r3, #160	; 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	23a0      	movs	r3, #160	; 0xa0
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	4959      	ldr	r1, [pc, #356]	; (8000f94 <GPIO_Init+0x438>)
 8000e2e:	400a      	ands	r2, r1
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	23a0      	movs	r3, #160	; 0xa0
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	21c0      	movs	r1, #192	; 0xc0
 8000e3e:	0289      	lsls	r1, r1, #10
 8000e40:	430a      	orrs	r2, r1
 8000e42:	609a      	str	r2, [r3, #8]
	CONFIGURE_GPIO(GPIOC, 15, 0b01, 0, 0b11); // pinEN
 8000e44:	4b54      	ldr	r3, [pc, #336]	; (8000f98 <GPIO_Init+0x43c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	089a      	lsrs	r2, r3, #2
 8000e4c:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <GPIO_Init+0x43c>)
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	05c9      	lsls	r1, r1, #23
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <GPIO_Init+0x43c>)
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	4b4f      	ldr	r3, [pc, #316]	; (8000f98 <GPIO_Init+0x43c>)
 8000e5c:	494f      	ldr	r1, [pc, #316]	; (8000f9c <GPIO_Init+0x440>)
 8000e5e:	400a      	ands	r2, r1
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <GPIO_Init+0x43c>)
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <GPIO_Init+0x43c>)
 8000e68:	21c0      	movs	r1, #192	; 0xc0
 8000e6a:	0609      	lsls	r1, r1, #24
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	609a      	str	r2, [r3, #8]

	// Налаштування кнопок із EXTI
	CONFIGURE_GPIO(GPIOA, 0, 0b00, 0, 0b11);  // decrement
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	23a0      	movs	r3, #160	; 0xa0
 8000e78:	05db      	lsls	r3, r3, #23
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	23a0      	movs	r3, #160	; 0xa0
 8000e88:	05db      	lsls	r3, r3, #23
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	23a0      	movs	r3, #160	; 0xa0
 8000e92:	05db      	lsls	r3, r3, #23
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	23a0      	movs	r3, #160	; 0xa0
 8000e98:	05db      	lsls	r3, r3, #23
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(0, 0b000, 0, 1, 0);           // EXTI для decrement
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <GPIO_Init+0x444>)
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <GPIO_Init+0x444>)
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	438a      	bics	r2, r1
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <GPIO_Init+0x448>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <GPIO_Init+0x448>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <GPIO_Init+0x448>)
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <GPIO_Init+0x448>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOA, 1, 0b00, 0, 0b11);  // enter
 8000ec4:	23a0      	movs	r3, #160	; 0xa0
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	210c      	movs	r1, #12
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	23a0      	movs	r3, #160	; 0xa0
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	23a0      	movs	r3, #160	; 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	2102      	movs	r1, #2
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	23a0      	movs	r3, #160	; 0xa0
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	210c      	movs	r1, #12
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(1, 0b000, 0, 1, 0);           // EXTI для enter
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <GPIO_Init+0x444>)
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <GPIO_Init+0x444>)
 8000efa:	21f0      	movs	r1, #240	; 0xf0
 8000efc:	438a      	bics	r2, r1
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <GPIO_Init+0x448>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <GPIO_Init+0x448>)
 8000f06:	2102      	movs	r1, #2
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <GPIO_Init+0x448>)
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <GPIO_Init+0x448>)
 8000f12:	2102      	movs	r1, #2
 8000f14:	430a      	orrs	r2, r1
 8000f16:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOA, 2, 0b00, 0, 0b11);  // increment
 8000f18:	23a0      	movs	r3, #160	; 0xa0
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	2130      	movs	r1, #48	; 0x30
 8000f24:	438a      	bics	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	23a0      	movs	r3, #160	; 0xa0
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	23a0      	movs	r3, #160	; 0xa0
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	2104      	movs	r1, #4
 8000f34:	438a      	bics	r2, r1
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	23a0      	movs	r3, #160	; 0xa0
 8000f3a:	05db      	lsls	r3, r3, #23
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	23a0      	movs	r3, #160	; 0xa0
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	2130      	movs	r1, #48	; 0x30
 8000f44:	430a      	orrs	r2, r1
 8000f46:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(2, 0b000, 0, 1, 0);           // EXTI для increment
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <GPIO_Init+0x444>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <GPIO_Init+0x444>)
 8000f4e:	4916      	ldr	r1, [pc, #88]	; (8000fa8 <GPIO_Init+0x44c>)
 8000f50:	400a      	ands	r2, r1
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e02a      	b.n	8000fac <GPIO_Init+0x450>
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	ffff3fff 	.word	0xffff3fff
 8000f60:	50000400 	.word	0x50000400
 8000f64:	ffffcfff 	.word	0xffffcfff
 8000f68:	fffff3ff 	.word	0xfffff3ff
 8000f6c:	ff3fffff 	.word	0xff3fffff
 8000f70:	fffff7ff 	.word	0xfffff7ff
 8000f74:	fff3ffff 	.word	0xfff3ffff
 8000f78:	fffffdff 	.word	0xfffffdff
 8000f7c:	fffffcff 	.word	0xfffffcff
 8000f80:	fcffffff 	.word	0xfcffffff
 8000f84:	ffffefff 	.word	0xffffefff
 8000f88:	ffcfffff 	.word	0xffcfffff
 8000f8c:	fffffbff 	.word	0xfffffbff
 8000f90:	fffcffff 	.word	0xfffcffff
 8000f94:	fffffeff 	.word	0xfffffeff
 8000f98:	50000800 	.word	0x50000800
 8000f9c:	ffff7fff 	.word	0xffff7fff
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	40010400 	.word	0x40010400
 8000fa8:	fffff0ff 	.word	0xfffff0ff
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <GPIO_Init+0x4cc>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <GPIO_Init+0x4cc>)
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <GPIO_Init+0x4cc>)
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <GPIO_Init+0x4cc>)
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	60da      	str	r2, [r3, #12]

	CONFIGURE_GPIO(GPIOB, 9, 0b00, 0, 0b11);  // pwr
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <GPIO_Init+0x4d0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <GPIO_Init+0x4d0>)
 8000fca:	4919      	ldr	r1, [pc, #100]	; (8001030 <GPIO_Init+0x4d4>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <GPIO_Init+0x4d0>)
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <GPIO_Init+0x4d0>)
 8000fd6:	4917      	ldr	r1, [pc, #92]	; (8001034 <GPIO_Init+0x4d8>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <GPIO_Init+0x4d0>)
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <GPIO_Init+0x4d0>)
 8000fe2:	21c0      	movs	r1, #192	; 0xc0
 8000fe4:	0309      	lsls	r1, r1, #12
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	609a      	str	r2, [r3, #8]
	CONFIGURE_EXTI(9, 0b000, 2, 3, 1);   // EXTI для pwr з обробкою по зростанню
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <GPIO_Init+0x4dc>)
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <GPIO_Init+0x4dc>)
 8000ff0:	21f0      	movs	r1, #240	; 0xf0
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <GPIO_Init+0x4cc>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <GPIO_Init+0x4cc>)
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	0089      	lsls	r1, r1, #2
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <GPIO_Init+0x4cc>)
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <GPIO_Init+0x4cc>)
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0089      	lsls	r1, r1, #2
 800100e:	430a      	orrs	r2, r1
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <GPIO_Init+0x4cc>)
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <GPIO_Init+0x4cc>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0089      	lsls	r1, r1, #2
 800101c:	430a      	orrs	r2, r1
 800101e:	609a      	str	r2, [r3, #8]
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	40010400 	.word	0x40010400
 800102c:	50000400 	.word	0x50000400
 8001030:	fff3ffff 	.word	0xfff3ffff
 8001034:	fffffdff 	.word	0xfffffdff
 8001038:	40010000 	.word	0x40010000

0800103c <Delay_ms>:

void Delay_ms(uint32_t Milliseconds) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <Delay_ms+0x24>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
	while (Delay_counter_ms != 0);
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <Delay_ms+0x24>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1fb      	bne.n	800104c <Delay_ms+0x10>
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b002      	add	sp, #8
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	20000328 	.word	0x20000328

08001064 <writeCHARSEG>:
	default:
		return '?';  // Повертаємо '?' для невідомого числа
	}
}

void writeCHARSEG(char CHAR, int seg) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	0002      	movs	r2, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	701a      	strb	r2, [r3, #0]
	switch (seg) {
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d049      	beq.n	800110c <writeCHARSEG+0xa8>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b03      	cmp	r3, #3
 800107c:	dc59      	bgt.n	8001132 <writeCHARSEG+0xce>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d02f      	beq.n	80010e4 <writeCHARSEG+0x80>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	dc53      	bgt.n	8001132 <writeCHARSEG+0xce>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <writeCHARSEG+0x34>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d013      	beq.n	80010be <writeCHARSEG+0x5a>
 8001096:	e04c      	b.n	8001132 <writeCHARSEG+0xce>
	case 0:
		LEDD1_ON();
 8001098:	23a0      	movs	r3, #160	; 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2208      	movs	r2, #8
 800109e:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 80010a0:	23a0      	movs	r3, #160	; 0xa0
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	0352      	lsls	r2, r2, #13
 80010a8:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 80010aa:	23a0      	movs	r3, #160	; 0xa0
 80010ac:	05db      	lsls	r3, r3, #23
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	0552      	lsls	r2, r2, #21
 80010b2:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 80010b4:	4bee      	ldr	r3, [pc, #952]	; (8001470 <writeCHARSEG+0x40c>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	0352      	lsls	r2, r2, #13
 80010ba:	619a      	str	r2, [r3, #24]
		break;
 80010bc:	e04d      	b.n	800115a <writeCHARSEG+0xf6>
	case 1:
		LEDD1_OFF();
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0312      	lsls	r2, r2, #12
 80010c6:	619a      	str	r2, [r3, #24]
		LEDD2_ON();
 80010c8:	23a0      	movs	r3, #160	; 0xa0
 80010ca:	05db      	lsls	r3, r3, #23
 80010cc:	2210      	movs	r2, #16
 80010ce:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 80010d0:	23a0      	movs	r3, #160	; 0xa0
 80010d2:	05db      	lsls	r3, r3, #23
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	0552      	lsls	r2, r2, #21
 80010d8:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 80010da:	4be5      	ldr	r3, [pc, #916]	; (8001470 <writeCHARSEG+0x40c>)
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	0352      	lsls	r2, r2, #13
 80010e0:	619a      	str	r2, [r3, #24]
		break;
 80010e2:	e03a      	b.n	800115a <writeCHARSEG+0xf6>
	case 2:
		LEDD1_OFF();
 80010e4:	23a0      	movs	r3, #160	; 0xa0
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	0312      	lsls	r2, r2, #12
 80010ec:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 80010ee:	23a0      	movs	r3, #160	; 0xa0
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	0352      	lsls	r2, r2, #13
 80010f6:	619a      	str	r2, [r3, #24]
		LEDD3_ON();
 80010f8:	23a0      	movs	r3, #160	; 0xa0
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	0152      	lsls	r2, r2, #5
 8001100:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 8001102:	4bdb      	ldr	r3, [pc, #876]	; (8001470 <writeCHARSEG+0x40c>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	0352      	lsls	r2, r2, #13
 8001108:	619a      	str	r2, [r3, #24]
		break;
 800110a:	e026      	b.n	800115a <writeCHARSEG+0xf6>
	case 3:
		LEDD1_OFF();
 800110c:	23a0      	movs	r3, #160	; 0xa0
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	0312      	lsls	r2, r2, #12
 8001114:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	0352      	lsls	r2, r2, #13
 800111e:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	0552      	lsls	r2, r2, #21
 8001128:	619a      	str	r2, [r3, #24]
		LEDD4_ON();
 800112a:	4bd1      	ldr	r3, [pc, #836]	; (8001470 <writeCHARSEG+0x40c>)
 800112c:	2210      	movs	r2, #16
 800112e:	619a      	str	r2, [r3, #24]
		break;
 8001130:	e013      	b.n	800115a <writeCHARSEG+0xf6>
	default:
		LEDD1_OFF();
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	0312      	lsls	r2, r2, #12
 800113a:	619a      	str	r2, [r3, #24]
		LEDD2_OFF();
 800113c:	23a0      	movs	r3, #160	; 0xa0
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	0352      	lsls	r2, r2, #13
 8001144:	619a      	str	r2, [r3, #24]
		LEDD3_OFF();
 8001146:	23a0      	movs	r3, #160	; 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	0552      	lsls	r2, r2, #21
 800114e:	619a      	str	r2, [r3, #24]
		LEDD4_OFF();
 8001150:	4bc7      	ldr	r3, [pc, #796]	; (8001470 <writeCHARSEG+0x40c>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	0352      	lsls	r2, r2, #13
 8001156:	619a      	str	r2, [r3, #24]
		break;
 8001158:	46c0      	nop			; (mov r8, r8)
	}
	switch (CHAR) {
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3b2e      	subs	r3, #46	; 0x2e
 8001160:	2b31      	cmp	r3, #49	; 0x31
 8001162:	d900      	bls.n	8001166 <writeCHARSEG+0x102>
 8001164:	e1ed      	b.n	8001542 <writeCHARSEG+0x4de>
 8001166:	009a      	lsls	r2, r3, #2
 8001168:	4bc2      	ldr	r3, [pc, #776]	; (8001474 <writeCHARSEG+0x410>)
 800116a:	18d3      	adds	r3, r2, r3
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	469f      	mov	pc, r3
	case 'A':
		LEDa_ON();
 8001170:	23a0      	movs	r3, #160	; 0xa0
 8001172:	05db      	lsls	r3, r3, #23
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001178:	4bbd      	ldr	r3, [pc, #756]	; (8001470 <writeCHARSEG+0x40c>)
 800117a:	2202      	movs	r2, #2
 800117c:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	03d2      	lsls	r2, r2, #15
 8001186:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001188:	23a0      	movs	r3, #160	; 0xa0
 800118a:	05db      	lsls	r3, r3, #23
 800118c:	2220      	movs	r2, #32
 800118e:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 8001190:	23a0      	movs	r3, #160	; 0xa0
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 800119a:	23a0      	movs	r3, #160	; 0xa0
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80011a4:	4bb2      	ldr	r3, [pc, #712]	; (8001470 <writeCHARSEG+0x40c>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80011aa:	4bb1      	ldr	r3, [pc, #708]	; (8001470 <writeCHARSEG+0x40c>)
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	0312      	lsls	r2, r2, #12
 80011b0:	619a      	str	r2, [r3, #24]
		break;
 80011b2:	e1ec      	b.n	800158e <writeCHARSEG+0x52a>
	case 'P':
		LEDa_ON();
 80011b4:	23a0      	movs	r3, #160	; 0xa0
 80011b6:	05db      	lsls	r3, r3, #23
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80011bc:	4bac      	ldr	r3, [pc, #688]	; (8001470 <writeCHARSEG+0x40c>)
 80011be:	2202      	movs	r2, #2
 80011c0:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	03d2      	lsls	r2, r2, #15
 80011ca:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	0392      	lsls	r2, r2, #14
 80011d4:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 80011d6:	23a0      	movs	r3, #160	; 0xa0
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 80011e0:	23a0      	movs	r3, #160	; 0xa0
 80011e2:	05db      	lsls	r3, r3, #23
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80011ea:	4ba1      	ldr	r3, [pc, #644]	; (8001470 <writeCHARSEG+0x40c>)
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	0252      	lsls	r2, r2, #9
 80011f0:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80011f2:	4b9f      	ldr	r3, [pc, #636]	; (8001470 <writeCHARSEG+0x40c>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	0312      	lsls	r2, r2, #12
 80011f8:	619a      	str	r2, [r3, #24]
		break;
 80011fa:	e1c8      	b.n	800158e <writeCHARSEG+0x52a>
	case '_':
		LEDa_OFF();
 80011fc:	23a0      	movs	r3, #160	; 0xa0
 80011fe:	05db      	lsls	r3, r3, #23
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001206:	4b9a      	ldr	r3, [pc, #616]	; (8001470 <writeCHARSEG+0x40c>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	0292      	lsls	r2, r2, #10
 800120c:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800120e:	23a0      	movs	r3, #160	; 0xa0
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	2240      	movs	r2, #64	; 0x40
 8001214:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	0392      	lsls	r2, r2, #14
 800121e:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001220:	23a0      	movs	r3, #160	; 0xa0
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	0512      	lsls	r2, r2, #20
 8001228:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 800122a:	23a0      	movs	r3, #160	; 0xa0
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	0492      	lsls	r2, r2, #18
 8001232:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001234:	4b8e      	ldr	r3, [pc, #568]	; (8001470 <writeCHARSEG+0x40c>)
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	0252      	lsls	r2, r2, #9
 800123a:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 800123c:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <writeCHARSEG+0x40c>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	0312      	lsls	r2, r2, #12
 8001242:	619a      	str	r2, [r3, #24]
		break;
 8001244:	e1a3      	b.n	800158e <writeCHARSEG+0x52a>
	case '.':
		LEDa_OFF();
 8001246:	23a0      	movs	r3, #160	; 0xa0
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	0412      	lsls	r2, r2, #16
 800124e:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001250:	4b87      	ldr	r3, [pc, #540]	; (8001470 <writeCHARSEG+0x40c>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0292      	lsls	r2, r2, #10
 8001256:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 8001258:	23a0      	movs	r3, #160	; 0xa0
 800125a:	05db      	lsls	r3, r3, #23
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	03d2      	lsls	r2, r2, #15
 8001260:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 8001262:	23a0      	movs	r3, #160	; 0xa0
 8001264:	05db      	lsls	r3, r3, #23
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	0392      	lsls	r2, r2, #14
 800126a:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 800126c:	23a0      	movs	r3, #160	; 0xa0
 800126e:	05db      	lsls	r3, r3, #23
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	0512      	lsls	r2, r2, #20
 8001274:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001276:	23a0      	movs	r3, #160	; 0xa0
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0492      	lsls	r2, r2, #18
 800127e:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 8001280:	4b7b      	ldr	r3, [pc, #492]	; (8001470 <writeCHARSEG+0x40c>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	0252      	lsls	r2, r2, #9
 8001286:	619a      	str	r2, [r3, #24]
		LEDdp_ON();
 8001288:	4b79      	ldr	r3, [pc, #484]	; (8001470 <writeCHARSEG+0x40c>)
 800128a:	2208      	movs	r2, #8
 800128c:	619a      	str	r2, [r3, #24]
		break;
 800128e:	e17e      	b.n	800158e <writeCHARSEG+0x52a>

	case '0':
		LEDa_ON();
 8001290:	23a0      	movs	r3, #160	; 0xa0
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001298:	4b75      	ldr	r3, [pc, #468]	; (8001470 <writeCHARSEG+0x40c>)
 800129a:	2202      	movs	r2, #2
 800129c:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800129e:	23a0      	movs	r3, #160	; 0xa0
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	2220      	movs	r2, #32
 80012ac:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 80012ae:	23a0      	movs	r3, #160	; 0xa0
 80012b0:	05db      	lsls	r3, r3, #23
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 80012b8:	23a0      	movs	r3, #160	; 0xa0
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80012c2:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <writeCHARSEG+0x40c>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	0252      	lsls	r2, r2, #9
 80012c8:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80012ca:	4b69      	ldr	r3, [pc, #420]	; (8001470 <writeCHARSEG+0x40c>)
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0312      	lsls	r2, r2, #12
 80012d0:	619a      	str	r2, [r3, #24]
		break;
 80012d2:	e15c      	b.n	800158e <writeCHARSEG+0x52a>
	case '1':
		LEDa_OFF();
 80012d4:	23a0      	movs	r3, #160	; 0xa0
 80012d6:	05db      	lsls	r3, r3, #23
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	0412      	lsls	r2, r2, #16
 80012dc:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80012de:	4b64      	ldr	r3, [pc, #400]	; (8001470 <writeCHARSEG+0x40c>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80012e4:	23a0      	movs	r3, #160	; 0xa0
 80012e6:	05db      	lsls	r3, r3, #23
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80012ec:	23a0      	movs	r3, #160	; 0xa0
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	0392      	lsls	r2, r2, #14
 80012f4:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80012f6:	23a0      	movs	r3, #160	; 0xa0
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0512      	lsls	r2, r2, #20
 80012fe:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001300:	23a0      	movs	r3, #160	; 0xa0
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	0492      	lsls	r2, r2, #18
 8001308:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <writeCHARSEG+0x40c>)
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	0252      	lsls	r2, r2, #9
 8001310:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001312:	4b57      	ldr	r3, [pc, #348]	; (8001470 <writeCHARSEG+0x40c>)
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	0312      	lsls	r2, r2, #12
 8001318:	619a      	str	r2, [r3, #24]
		break;
 800131a:	e138      	b.n	800158e <writeCHARSEG+0x52a>
	case '2':
		LEDa_ON();
 800131c:	23a0      	movs	r3, #160	; 0xa0
 800131e:	05db      	lsls	r3, r3, #23
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001324:	4b52      	ldr	r3, [pc, #328]	; (8001470 <writeCHARSEG+0x40c>)
 8001326:	2202      	movs	r2, #2
 8001328:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 800132a:	23a0      	movs	r3, #160	; 0xa0
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	03d2      	lsls	r2, r2, #15
 8001332:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001334:	23a0      	movs	r3, #160	; 0xa0
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	2220      	movs	r2, #32
 800133a:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800133c:	23a0      	movs	r3, #160	; 0xa0
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001346:	23a0      	movs	r3, #160	; 0xa0
 8001348:	05db      	lsls	r3, r3, #23
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	0492      	lsls	r2, r2, #18
 800134e:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <writeCHARSEG+0x40c>)
 8001352:	2201      	movs	r2, #1
 8001354:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001356:	4b46      	ldr	r3, [pc, #280]	; (8001470 <writeCHARSEG+0x40c>)
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	0312      	lsls	r2, r2, #12
 800135c:	619a      	str	r2, [r3, #24]
		break;
 800135e:	e116      	b.n	800158e <writeCHARSEG+0x52a>
	case '3':
		LEDa_ON();
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001368:	4b41      	ldr	r3, [pc, #260]	; (8001470 <writeCHARSEG+0x40c>)
 800136a:	2202      	movs	r2, #2
 800136c:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800136e:	23a0      	movs	r3, #160	; 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001376:	23a0      	movs	r3, #160	; 0xa0
 8001378:	05db      	lsls	r3, r3, #23
 800137a:	2220      	movs	r2, #32
 800137c:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 800137e:	23a0      	movs	r3, #160	; 0xa0
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0512      	lsls	r2, r2, #20
 8001386:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001388:	23a0      	movs	r3, #160	; 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	0492      	lsls	r2, r2, #18
 8001390:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001392:	4b37      	ldr	r3, [pc, #220]	; (8001470 <writeCHARSEG+0x40c>)
 8001394:	2201      	movs	r2, #1
 8001396:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001398:	4b35      	ldr	r3, [pc, #212]	; (8001470 <writeCHARSEG+0x40c>)
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	0312      	lsls	r2, r2, #12
 800139e:	619a      	str	r2, [r3, #24]
		break;
 80013a0:	e0f5      	b.n	800158e <writeCHARSEG+0x52a>
	case '4':
		LEDa_OFF();
 80013a2:	23a0      	movs	r3, #160	; 0xa0
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	0412      	lsls	r2, r2, #16
 80013aa:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <writeCHARSEG+0x40c>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80013b2:	23a0      	movs	r3, #160	; 0xa0
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 80013ba:	23a0      	movs	r3, #160	; 0xa0
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0392      	lsls	r2, r2, #14
 80013c2:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 80013c4:	23a0      	movs	r3, #160	; 0xa0
 80013c6:	05db      	lsls	r3, r3, #23
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	0512      	lsls	r2, r2, #20
 80013cc:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 80013ce:	23a0      	movs	r3, #160	; 0xa0
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <writeCHARSEG+0x40c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <writeCHARSEG+0x40c>)
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	0312      	lsls	r2, r2, #12
 80013e4:	619a      	str	r2, [r3, #24]
		break;
 80013e6:	e0d2      	b.n	800158e <writeCHARSEG+0x52a>
	case '5':
		LEDa_ON();
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <writeCHARSEG+0x40c>)
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	0292      	lsls	r2, r2, #10
 80013f6:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80013f8:	23a0      	movs	r3, #160	; 0xa0
 80013fa:	05db      	lsls	r3, r3, #23
 80013fc:	2240      	movs	r2, #64	; 0x40
 80013fe:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	2220      	movs	r2, #32
 8001406:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001408:	23a0      	movs	r3, #160	; 0xa0
 800140a:	05db      	lsls	r3, r3, #23
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	0512      	lsls	r2, r2, #20
 8001410:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001412:	23a0      	movs	r3, #160	; 0xa0
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <writeCHARSEG+0x40c>)
 800141e:	2201      	movs	r2, #1
 8001420:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <writeCHARSEG+0x40c>)
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	0312      	lsls	r2, r2, #12
 8001428:	619a      	str	r2, [r3, #24]
		break;
 800142a:	e0b0      	b.n	800158e <writeCHARSEG+0x52a>
	case '6':
		LEDa_ON();
 800142c:	23a0      	movs	r3, #160	; 0xa0
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <writeCHARSEG+0x40c>)
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0292      	lsls	r2, r2, #10
 800143a:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800143c:	23a0      	movs	r3, #160	; 0xa0
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	2240      	movs	r2, #64	; 0x40
 8001442:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001444:	23a0      	movs	r3, #160	; 0xa0
 8001446:	05db      	lsls	r3, r3, #23
 8001448:	2220      	movs	r2, #32
 800144a:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 800144c:	23a0      	movs	r3, #160	; 0xa0
 800144e:	05db      	lsls	r3, r3, #23
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <writeCHARSEG+0x40c>)
 8001462:	2201      	movs	r2, #1
 8001464:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001466:	4b02      	ldr	r3, [pc, #8]	; (8001470 <writeCHARSEG+0x40c>)
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	0312      	lsls	r2, r2, #12
 800146c:	619a      	str	r2, [r3, #24]
		break;
 800146e:	e08e      	b.n	800158e <writeCHARSEG+0x52a>
 8001470:	50000400 	.word	0x50000400
 8001474:	0800211c 	.word	0x0800211c
	case '7':
		LEDa_ON();
 8001478:	23a0      	movs	r3, #160	; 0xa0
 800147a:	05db      	lsls	r3, r3, #23
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <writeCHARSEG+0x534>)
 8001482:	2202      	movs	r2, #2
 8001484:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	2240      	movs	r2, #64	; 0x40
 800148c:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	0392      	lsls	r2, r2, #14
 8001496:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001498:	23a0      	movs	r3, #160	; 0xa0
 800149a:	05db      	lsls	r3, r3, #23
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	0512      	lsls	r2, r2, #20
 80014a0:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 80014a2:	23a0      	movs	r3, #160	; 0xa0
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	0492      	lsls	r2, r2, #18
 80014aa:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <writeCHARSEG+0x534>)
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	0252      	lsls	r2, r2, #9
 80014b2:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80014b4:	4b38      	ldr	r3, [pc, #224]	; (8001598 <writeCHARSEG+0x534>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	0312      	lsls	r2, r2, #12
 80014ba:	619a      	str	r2, [r3, #24]
		break;
 80014bc:	e067      	b.n	800158e <writeCHARSEG+0x52a>
	case '8':
		LEDa_ON();
 80014be:	23a0      	movs	r3, #160	; 0xa0
 80014c0:	05db      	lsls	r3, r3, #23
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <writeCHARSEG+0x534>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	05db      	lsls	r3, r3, #23
 80014d0:	2240      	movs	r2, #64	; 0x40
 80014d2:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 80014d4:	23a0      	movs	r3, #160	; 0xa0
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	2220      	movs	r2, #32
 80014da:	619a      	str	r2, [r3, #24]
		LEDe_ON();
 80014dc:	23a0      	movs	r3, #160	; 0xa0
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 80014e6:	23a0      	movs	r3, #160	; 0xa0
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <writeCHARSEG+0x534>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <writeCHARSEG+0x534>)
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	0312      	lsls	r2, r2, #12
 80014fc:	619a      	str	r2, [r3, #24]
		break;
 80014fe:	e046      	b.n	800158e <writeCHARSEG+0x52a>
	case '9':
		LEDa_ON();
 8001500:	23a0      	movs	r3, #160	; 0xa0
 8001502:	05db      	lsls	r3, r3, #23
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	619a      	str	r2, [r3, #24]
		LEDb_ON();
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <writeCHARSEG+0x534>)
 800150a:	2202      	movs	r2, #2
 800150c:	619a      	str	r2, [r3, #24]
		LEDc_ON();
 800150e:	23a0      	movs	r3, #160	; 0xa0
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	2240      	movs	r2, #64	; 0x40
 8001514:	619a      	str	r2, [r3, #24]
		LEDd_ON();
 8001516:	23a0      	movs	r3, #160	; 0xa0
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	2220      	movs	r2, #32
 800151c:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 800151e:	23a0      	movs	r3, #160	; 0xa0
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	0512      	lsls	r2, r2, #20
 8001526:	619a      	str	r2, [r3, #24]
		LEDf_ON();
 8001528:	23a0      	movs	r3, #160	; 0xa0
 800152a:	05db      	lsls	r3, r3, #23
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	619a      	str	r2, [r3, #24]
		LEDg_ON();
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <writeCHARSEG+0x534>)
 8001534:	2201      	movs	r2, #1
 8001536:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <writeCHARSEG+0x534>)
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	0312      	lsls	r2, r2, #12
 800153e:	619a      	str	r2, [r3, #24]
		break;
 8001540:	e025      	b.n	800158e <writeCHARSEG+0x52a>
	default:
		LEDa_OFF();
 8001542:	23a0      	movs	r3, #160	; 0xa0
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	0412      	lsls	r2, r2, #16
 800154a:	619a      	str	r2, [r3, #24]
		LEDb_OFF();
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <writeCHARSEG+0x534>)
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	0292      	lsls	r2, r2, #10
 8001552:	619a      	str	r2, [r3, #24]
		LEDc_OFF();
 8001554:	23a0      	movs	r3, #160	; 0xa0
 8001556:	05db      	lsls	r3, r3, #23
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	03d2      	lsls	r2, r2, #15
 800155c:	619a      	str	r2, [r3, #24]
		LEDd_OFF();
 800155e:	23a0      	movs	r3, #160	; 0xa0
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0392      	lsls	r2, r2, #14
 8001566:	619a      	str	r2, [r3, #24]
		LEDe_OFF();
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	0512      	lsls	r2, r2, #20
 8001570:	619a      	str	r2, [r3, #24]
		LEDf_OFF();
 8001572:	23a0      	movs	r3, #160	; 0xa0
 8001574:	05db      	lsls	r3, r3, #23
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	0492      	lsls	r2, r2, #18
 800157a:	619a      	str	r2, [r3, #24]
		LEDg_OFF();
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <writeCHARSEG+0x534>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	0252      	lsls	r2, r2, #9
 8001582:	619a      	str	r2, [r3, #24]
		LEDdp_OFF();
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <writeCHARSEG+0x534>)
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	0312      	lsls	r2, r2, #12
 800158a:	619a      	str	r2, [r3, #24]
		break;
 800158c:	46c0      	nop			; (mov r8, r8)
	}
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	50000400 	.word	0x50000400

0800159c <Clock>:
			CLEAR_BIT(TIM21->CR1, TIM_CR1_CEN);  				//Призупинення таймера
			TIM21->CCR1 = 0;
		}
}

int Clock(){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
	char tmpClock[4]={};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
	int j = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
	tmpClock[0] = READ_BIT(RTC->TR,RTC_TR_HT);
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <Clock+0x104>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	if (tmpClock[0] == 0){j=1;}
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <Clock+0x26>
 80015be:	2301      	movs	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
	tmpClock[1] = READ_BIT(RTC->TR,RTC_TR_HU);
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <Clock+0x104>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	705a      	strb	r2, [r3, #1]
	tmpClock[2] = READ_BIT(RTC->TR,RTC_TR_MNT);
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <Clock+0x104>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	709a      	strb	r2, [r3, #2]
	tmpClock[3] = READ_BIT(RTC->TR,RTC_TR_MNU);
 80015d6:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <Clock+0x104>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	70da      	strb	r2, [r3, #3]

	if(READ_BIT(RTC->TR,RTC_TR_HT)*10+READ_BIT(RTC->TR,RTC_TR_HU) > 5 && READ_BIT(RTC->TR,RTC_TR_HT)*10+READ_BIT(RTC->TR,RTC_TR_HU) < 22 
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <Clock+0x104>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	23c0      	movs	r3, #192	; 0xc0
 80015e6:	039b      	lsls	r3, r3, #14
 80015e8:	401a      	ands	r2, r3
 80015ea:	0013      	movs	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	189b      	adds	r3, r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	0019      	movs	r1, r3
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <Clock+0x104>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	23f0      	movs	r3, #240	; 0xf0
 80015fa:	031b      	lsls	r3, r3, #12
 80015fc:	4013      	ands	r3, r2
 80015fe:	18cb      	adds	r3, r1, r3
 8001600:	2b05      	cmp	r3, #5
 8001602:	d911      	bls.n	8001628 <Clock+0x8c>
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <Clock+0x104>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	23c0      	movs	r3, #192	; 0xc0
 800160a:	039b      	lsls	r3, r3, #14
 800160c:	401a      	ands	r2, r3
 800160e:	0013      	movs	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	189b      	adds	r3, r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	0019      	movs	r1, r3
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <Clock+0x104>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	23f0      	movs	r3, #240	; 0xf0
 800161e:	031b      	lsls	r3, r3, #12
 8001620:	4013      	ands	r3, r2
 8001622:	18cb      	adds	r3, r1, r3
 8001624:	2b15      	cmp	r3, #21
 8001626:	d917      	bls.n	8001658 <Clock+0xbc>
	|| flagDecrementButton || flagEnterButton || flagIncrementButton 
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <Clock+0x108>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d113      	bne.n	8001658 <Clock+0xbc>
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <Clock+0x10c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10f      	bne.n	8001658 <Clock+0xbc>
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <Clock+0x110>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10b      	bne.n	8001658 <Clock+0xbc>
	|| flagDecrementButtonLong || flagEnterButtonLong || flagIncrementButtonLong)
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <Clock+0x114>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <Clock+0xbc>
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <Clock+0x118>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <Clock+0xbc>
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <Clock+0x11c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d014      	beq.n	8001682 <Clock+0xe6>
	{
		for(int i = 0 + j; i<4;i++){
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	e00e      	b.n	800167c <Clock+0xe0>
		 writeCHARSEG(tmpClock[i], i);
 800165e:	1d3a      	adds	r2, r7, #4
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	0011      	movs	r1, r2
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff fcfa 	bl	8001064 <writeCHARSEG>
		 Delay_ms(50);
 8001670:	2032      	movs	r0, #50	; 0x32
 8001672:	f7ff fce3 	bl	800103c <Delay_ms>
		for(int i = 0 + j; i<4;i++){
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b03      	cmp	r3, #3
 8001680:	dded      	ble.n	800165e <Clock+0xc2>
	 }
	}
	return flagDecrementButtonLong&&flagIncrementButtonLong?0:1;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <Clock+0x114>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <Clock+0xf6>
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <Clock+0x11c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <Clock+0xfa>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <Clock+0xfc>
 8001696:	2300      	movs	r3, #0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40002800 	.word	0x40002800
 80016a4:	20000300 	.word	0x20000300
 80016a8:	20000301 	.word	0x20000301
 80016ac:	20000302 	.word	0x20000302
 80016b0:	20000303 	.word	0x20000303
 80016b4:	20000304 	.word	0x20000304
 80016b8:	20000305 	.word	0x20000305

080016bc <setTimeNow>:

void setTimeNow(){
 80016bc:	b5b0      	push	{r4, r5, r7, lr}
 80016be:	af00      	add	r7, sp, #0
    MODIFY_REG(RTC->TR,
 80016c0:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <setTimeNow+0x118>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a44      	ldr	r2, [pc, #272]	; (80017d8 <setTimeNow+0x11c>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	001c      	movs	r4, r3
 80016ca:	4b44      	ldr	r3, [pc, #272]	; (80017dc <setTimeNow+0x120>)
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	210a      	movs	r1, #10
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7fe fda3 	bl	800021c <__divsi3>
 80016d6:	0003      	movs	r3, r0
 80016d8:	051d      	lsls	r5, r3, #20
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <setTimeNow+0x120>)
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	210a      	movs	r1, #10
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7fe fe81 	bl	80003e8 <__aeabi_idivmod>
 80016e6:	000b      	movs	r3, r1
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431d      	orrs	r5, r3
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <setTimeNow+0x120>)
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	210a      	movs	r1, #10
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7fe fd92 	bl	800021c <__divsi3>
 80016f8:	0003      	movs	r3, r0
 80016fa:	031b      	lsls	r3, r3, #12
 80016fc:	431d      	orrs	r5, r3
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <setTimeNow+0x120>)
 8001700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001702:	210a      	movs	r1, #10
 8001704:	0018      	movs	r0, r3
 8001706:	f7fe fe6f 	bl	80003e8 <__aeabi_idivmod>
 800170a:	000b      	movs	r3, r1
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	431d      	orrs	r5, r3
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <setTimeNow+0x120>)
 8001712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001714:	210a      	movs	r1, #10
 8001716:	0018      	movs	r0, r3
 8001718:	f7fe fd80 	bl	800021c <__divsi3>
 800171c:	0003      	movs	r3, r0
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	431d      	orrs	r5, r3
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <setTimeNow+0x120>)
 8001724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001726:	210a      	movs	r1, #10
 8001728:	0018      	movs	r0, r3
 800172a:	f7fe fe5d 	bl	80003e8 <__aeabi_idivmod>
 800172e:	000b      	movs	r3, r1
 8001730:	432b      	orrs	r3, r5
 8001732:	001a      	movs	r2, r3
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <setTimeNow+0x118>)
 8001736:	4322      	orrs	r2, r4
 8001738:	601a      	str	r2, [r3, #0]
               (menu[1].value%10 << RTC_TR_HU_Pos)  |   // Hour units (7 -> 17)
               (menu[2].value/10 << RTC_TR_MNT_Pos) |   // Minute tens (3 -> 36)
               (menu[2].value%10 << RTC_TR_MNU_Pos) |   // Minute units (6 -> 36)
               (menu[3].value/10 << RTC_TR_ST_Pos)  |   // Second tens (0 -> 00)
               (menu[3].value%10 << RTC_TR_SU_Pos));    // Second units (0 -> 00)
    MODIFY_REG(RTC->DR,
 800173a:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <setTimeNow+0x118>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <setTimeNow+0x124>)
 8001740:	4013      	ands	r3, r2
 8001742:	001c      	movs	r4, r3
 8001744:	4b25      	ldr	r3, [pc, #148]	; (80017dc <setTimeNow+0x120>)
 8001746:	22b8      	movs	r2, #184	; 0xb8
 8001748:	589b      	ldr	r3, [r3, r2]
 800174a:	210a      	movs	r1, #10
 800174c:	0018      	movs	r0, r3
 800174e:	f7fe fd65 	bl	800021c <__divsi3>
 8001752:	0003      	movs	r3, r0
 8001754:	051d      	lsls	r5, r3, #20
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <setTimeNow+0x120>)
 8001758:	22b8      	movs	r2, #184	; 0xb8
 800175a:	589b      	ldr	r3, [r3, r2]
 800175c:	210a      	movs	r1, #10
 800175e:	0018      	movs	r0, r3
 8001760:	f7fe fe42 	bl	80003e8 <__aeabi_idivmod>
 8001764:	000b      	movs	r3, r1
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	431d      	orrs	r5, r3
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <setTimeNow+0x120>)
 800176c:	229c      	movs	r2, #156	; 0x9c
 800176e:	589b      	ldr	r3, [r3, r2]
 8001770:	210a      	movs	r1, #10
 8001772:	0018      	movs	r0, r3
 8001774:	f7fe fd52 	bl	800021c <__divsi3>
 8001778:	0003      	movs	r3, r0
 800177a:	031b      	lsls	r3, r3, #12
 800177c:	431d      	orrs	r5, r3
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <setTimeNow+0x120>)
 8001780:	229c      	movs	r2, #156	; 0x9c
 8001782:	589b      	ldr	r3, [r3, r2]
 8001784:	210a      	movs	r1, #10
 8001786:	0018      	movs	r0, r3
 8001788:	f7fe fe2e 	bl	80003e8 <__aeabi_idivmod>
 800178c:	000b      	movs	r3, r1
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	431d      	orrs	r5, r3
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <setTimeNow+0x120>)
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	589b      	ldr	r3, [r3, r2]
 8001798:	210a      	movs	r1, #10
 800179a:	0018      	movs	r0, r3
 800179c:	f7fe fd3e 	bl	800021c <__divsi3>
 80017a0:	0003      	movs	r3, r0
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	431d      	orrs	r5, r3
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <setTimeNow+0x120>)
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	589b      	ldr	r3, [r3, r2]
 80017ac:	210a      	movs	r1, #10
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7fe fe1a 	bl	80003e8 <__aeabi_idivmod>
 80017b4:	000b      	movs	r3, r1
 80017b6:	002a      	movs	r2, r5
 80017b8:	431a      	orrs	r2, r3
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <setTimeNow+0x120>)
 80017bc:	21d4      	movs	r1, #212	; 0xd4
 80017be:	585b      	ldr	r3, [r3, r1]
 80017c0:	035b      	lsls	r3, r3, #13
 80017c2:	4313      	orrs	r3, r2
 80017c4:	001a      	movs	r2, r3
 80017c6:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <setTimeNow+0x118>)
 80017c8:	4322      	orrs	r2, r4
 80017ca:	605a      	str	r2, [r3, #4]
               (menu[5].value/10 << RTC_DR_MT_Pos)  |  // Month tens (1 -> April)
               (menu[5].value%10 << RTC_DR_MU_Pos)  |  // Month units (0 -> April)
               (menu[4].value/10 << RTC_DR_DT_Pos)  |  // Day tens (0 -> 01)
               (menu[4].value%10 << RTC_DR_DU_Pos)  |  // Day units (1 -> 01)
               (menu[7].value << RTC_DR_WDU_Pos)); // Weekday (3 -> Monday)
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40002800 	.word	0x40002800
 80017d8:	ffc08080 	.word	0xffc08080
 80017dc:	2000000c 	.word	0x2000000c
 80017e0:	ff0000c0 	.word	0xff0000c0

080017e4 <setActualMenu>:

char* setActualMenu(int v, int h) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	if (v != 0) {               // Рухаємося по вертикалі
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d100      	bne.n	80017f6 <setActualMenu+0x12>
 80017f4:	e0bd      	b.n	8001972 <setActualMenu+0x18e>
		if (v == -1) {            // Команда ВГОРУ (скасування)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3301      	adds	r3, #1
 80017fa:	d125      	bne.n	8001848 <setActualMenu+0x64>
			if (isParamEditMode) { // Якщо параметр у режимі редагування, то скасовуємо зміни
 80017fc:	4bca      	ldr	r3, [pc, #808]	; (8001b28 <setActualMenu+0x344>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <setActualMenu+0x28>
				isParamEditMode = false;
 8001804:	4bc8      	ldr	r3, [pc, #800]	; (8001b28 <setActualMenu+0x344>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e0b2      	b.n	8001972 <setActualMenu+0x18e>
			} else { // Якщо пункт меню не у режимі редагування, переміщаємося до батька
				if (menu[actualIndex].parentid > 0) { // Якщо є куди переміщатися вгору (ParentID>0)
 800180c:	4bc7      	ldr	r3, [pc, #796]	; (8001b2c <setActualMenu+0x348>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	49c7      	ldr	r1, [pc, #796]	; (8001b30 <setActualMenu+0x34c>)
 8001812:	0013      	movs	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	18cb      	adds	r3, r1, r3
 800181c:	3304      	adds	r3, #4
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	dc00      	bgt.n	8001826 <setActualMenu+0x42>
 8001824:	e0a5      	b.n	8001972 <setActualMenu+0x18e>
					actualIndex = getMenuIndexByID(menu[actualIndex].parentid);
 8001826:	4bc1      	ldr	r3, [pc, #772]	; (8001b2c <setActualMenu+0x348>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	49c1      	ldr	r1, [pc, #772]	; (8001b30 <setActualMenu+0x34c>)
 800182c:	0013      	movs	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	18cb      	adds	r3, r1, r3
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0018      	movs	r0, r3
 800183c:	f000 f97e 	bl	8001b3c <getMenuIndexByID>
 8001840:	0002      	movs	r2, r0
 8001842:	4bba      	ldr	r3, [pc, #744]	; (8001b2c <setActualMenu+0x348>)
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e094      	b.n	8001972 <setActualMenu+0x18e>
				}
			}
		} else {                        // Якщо команда ВН�?З - входу/редагування
			if (menu[actualIndex].isParam && !isParamEditMode) { // Якщо не в режимі редагування, то ...
 8001848:	4bb8      	ldr	r3, [pc, #736]	; (8001b2c <setActualMenu+0x348>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	49b8      	ldr	r1, [pc, #736]	; (8001b30 <setActualMenu+0x34c>)
 800184e:	0013      	movs	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	18cb      	adds	r3, r1, r3
 8001858:	3308      	adds	r3, #8
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d016      	beq.n	800188e <setActualMenu+0xaa>
 8001860:	4bb1      	ldr	r3, [pc, #708]	; (8001b28 <setActualMenu+0x344>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	4053      	eors	r3, r2
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00f      	beq.n	800188e <setActualMenu+0xaa>
				isParamEditMode = true; // Переходимо в режим редагування параметра
 800186e:	4bae      	ldr	r3, [pc, #696]	; (8001b28 <setActualMenu+0x344>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
				tmpVValue = menu[actualIndex].value; // Тимчасовій змінній присвоюємо актуальне значення параметра
 8001874:	4bad      	ldr	r3, [pc, #692]	; (8001b2c <setActualMenu+0x348>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	49ad      	ldr	r1, [pc, #692]	; (8001b30 <setActualMenu+0x34c>)
 800187a:	0013      	movs	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	18cb      	adds	r3, r1, r3
 8001884:	3310      	adds	r3, #16
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4baa      	ldr	r3, [pc, #680]	; (8001b34 <setActualMenu+0x350>)
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e071      	b.n	8001972 <setActualMenu+0x18e>
			} else if (menu[actualIndex].isParam && isParamEditMode) { // Якщо в режимі редагування
 800188e:	4ba7      	ldr	r3, [pc, #668]	; (8001b2c <setActualMenu+0x348>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	49a7      	ldr	r1, [pc, #668]	; (8001b30 <setActualMenu+0x34c>)
 8001894:	0013      	movs	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	18cb      	adds	r3, r1, r3
 800189e:	3308      	adds	r3, #8
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d013      	beq.n	80018ce <setActualMenu+0xea>
 80018a6:	4ba0      	ldr	r3, [pc, #640]	; (8001b28 <setActualMenu+0x344>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00f      	beq.n	80018ce <setActualMenu+0xea>
				menu[actualIndex].value = tmpVValue; // Зберігаємо задане значення
 80018ae:	4b9f      	ldr	r3, [pc, #636]	; (8001b2c <setActualMenu+0x348>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4ba0      	ldr	r3, [pc, #640]	; (8001b34 <setActualMenu+0x350>)
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	489e      	ldr	r0, [pc, #632]	; (8001b30 <setActualMenu+0x34c>)
 80018b8:	0013      	movs	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	18c3      	adds	r3, r0, r3
 80018c2:	3310      	adds	r3, #16
 80018c4:	6019      	str	r1, [r3, #0]
				isParamEditMode = false;      // І виходимо з режиму редагування
 80018c6:	4b98      	ldr	r3, [pc, #608]	; (8001b28 <setActualMenu+0x344>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e051      	b.n	8001972 <setActualMenu+0x18e>

			} else {
				bool nochild = true;  // Прапорець, чи є дочірні елементи
 80018ce:	231f      	movs	r3, #31
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < menuArraySize; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e01d      	b.n	8001918 <setActualMenu+0x134>
					if (menu[i].parentid == menu[actualIndex].id) {
 80018dc:	4994      	ldr	r1, [pc, #592]	; (8001b30 <setActualMenu+0x34c>)
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	0013      	movs	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	18cb      	adds	r3, r1, r3
 80018ea:	3304      	adds	r3, #4
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	4b8f      	ldr	r3, [pc, #572]	; (8001b2c <setActualMenu+0x348>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	488f      	ldr	r0, [pc, #572]	; (8001b30 <setActualMenu+0x34c>)
 80018f4:	0013      	movs	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	581b      	ldr	r3, [r3, r0]
 80018fe:	4299      	cmp	r1, r3
 8001900:	d107      	bne.n	8001912 <setActualMenu+0x12e>
						actualIndex = i; // Якщо є, робимо перший попавшийся актуальним елементом
 8001902:	4b8a      	ldr	r3, [pc, #552]	; (8001b2c <setActualMenu+0x348>)
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	601a      	str	r2, [r3, #0]
						nochild = false;  // Потомки є
 8001908:	231f      	movs	r3, #31
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
						break;            // Виходимо з for
 8001910:	e007      	b.n	8001922 <setActualMenu+0x13e>
				for (int i = 0; i < menuArraySize; i++) {
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	3301      	adds	r3, #1
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	4b87      	ldr	r3, [pc, #540]	; (8001b38 <setActualMenu+0x354>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbdc      	blt.n	80018dc <setActualMenu+0xf8>
					}
				}
				if (nochild) { // Якщо ж потомків немає, воспринимаємо як команду
 8001922:	231f      	movs	r3, #31
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d022      	beq.n	8001972 <setActualMenu+0x18e>
					switch (menu[actualIndex].id) { // Serial.println("Executing command...");         // І тут обробляємо за власним баченням
 800192c:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <setActualMenu+0x348>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	497f      	ldr	r1, [pc, #508]	; (8001b30 <setActualMenu+0x34c>)
 8001932:	0013      	movs	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	585b      	ldr	r3, [r3, r1]
 800193c:	2b11      	cmp	r3, #17
 800193e:	d012      	beq.n	8001966 <setActualMenu+0x182>
 8001940:	dc16      	bgt.n	8001970 <setActualMenu+0x18c>
 8001942:	2b04      	cmp	r3, #4
 8001944:	d002      	beq.n	800194c <setActualMenu+0x168>
 8001946:	2b0d      	cmp	r3, #13
 8001948:	d003      	beq.n	8001952 <setActualMenu+0x16e>
						break;
					case 17:
						while (Clock()){Clock();}
						break;
					default:
						break;
 800194a:	e011      	b.n	8001970 <setActualMenu+0x18c>
						setTimeNow();
 800194c:	f7ff feb6 	bl	80016bc <setTimeNow>
						break;
 8001950:	e00f      	b.n	8001972 <setActualMenu+0x18e>
						StartMusic(menu[19].value);// *19 		P_3.3	Alarm_Melody
 8001952:	4a77      	ldr	r2, [pc, #476]	; (8001b30 <setActualMenu+0x34c>)
 8001954:	2389      	movs	r3, #137	; 0x89
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	58d3      	ldr	r3, [r2, r3]
 800195a:	0018      	movs	r0, r3
 800195c:	f000 f97a 	bl	8001c54 <StartMusic>
						break;
 8001960:	e007      	b.n	8001972 <setActualMenu+0x18e>
						while (Clock()){Clock();}
 8001962:	f7ff fe1b 	bl	800159c <Clock>
 8001966:	f7ff fe19 	bl	800159c <Clock>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d1f9      	bne.n	8001962 <setActualMenu+0x17e>
						break;
 800196e:	e000      	b.n	8001972 <setActualMenu+0x18e>
						break;
 8001970:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if (h != 0) {             // Якщо горизонтальна навігація
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d057      	beq.n	8001a28 <setActualMenu+0x244>
		if (isParamEditMode) {  // У режимі редагування параметра
 8001978:	4b6b      	ldr	r3, [pc, #428]	; (8001b28 <setActualMenu+0x344>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d03a      	beq.n	80019f6 <setActualMenu+0x212>
			tmpVValue += h;        // Змінюємо його значення і ...
 8001980:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <setActualMenu+0x350>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	18d2      	adds	r2, r2, r3
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <setActualMenu+0x350>)
 800198a:	601a      	str	r2, [r3, #0]
			// ... контролюємо, щоб воно залишилося в заданому діапазоні
			if (tmpVValue > menu[actualIndex]._max)
 800198c:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <setActualMenu+0x348>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4967      	ldr	r1, [pc, #412]	; (8001b30 <setActualMenu+0x34c>)
 8001992:	0013      	movs	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	18cb      	adds	r3, r1, r3
 800199c:	3318      	adds	r3, #24
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <setActualMenu+0x350>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	da0b      	bge.n	80019c0 <setActualMenu+0x1dc>
				tmpVValue = menu[actualIndex]._min;
 80019a8:	4b60      	ldr	r3, [pc, #384]	; (8001b2c <setActualMenu+0x348>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4960      	ldr	r1, [pc, #384]	; (8001b30 <setActualMenu+0x34c>)
 80019ae:	0013      	movs	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	18cb      	adds	r3, r1, r3
 80019b8:	3314      	adds	r3, #20
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <setActualMenu+0x350>)
 80019be:	601a      	str	r2, [r3, #0]
			if (tmpVValue < menu[actualIndex]._min)
 80019c0:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <setActualMenu+0x348>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	495a      	ldr	r1, [pc, #360]	; (8001b30 <setActualMenu+0x34c>)
 80019c6:	0013      	movs	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	18cb      	adds	r3, r1, r3
 80019d0:	3314      	adds	r3, #20
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <setActualMenu+0x350>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dd25      	ble.n	8001a28 <setActualMenu+0x244>
				tmpVValue = menu[actualIndex]._max;
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <setActualMenu+0x348>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4953      	ldr	r1, [pc, #332]	; (8001b30 <setActualMenu+0x34c>)
 80019e2:	0013      	movs	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18cb      	adds	r3, r1, r3
 80019ec:	3318      	adds	r3, #24
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <setActualMenu+0x350>)
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e018      	b.n	8001a28 <setActualMenu+0x244>
		} else { // Якщо режим редагування не активний, навігація серед дочірніх одного батька
			actualIndex = getNearMenuIndexByID(menu[actualIndex].parentid,
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <setActualMenu+0x348>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	494d      	ldr	r1, [pc, #308]	; (8001b30 <setActualMenu+0x34c>)
 80019fc:	0013      	movs	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	18cb      	adds	r3, r1, r3
 8001a06:	3304      	adds	r3, #4
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <setActualMenu+0x348>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4948      	ldr	r1, [pc, #288]	; (8001b30 <setActualMenu+0x34c>)
 8001a10:	0013      	movs	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	585b      	ldr	r3, [r3, r1]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	f000 f8b3 	bl	8001b88 <getNearMenuIndexByID>
 8001a22:	0002      	movs	r2, r0
 8001a24:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <setActualMenu+0x348>)
 8001a26:	601a      	str	r2, [r3, #0]
					menu[actualIndex].id, h);
		}
	}
	// Отображаем информацию
	if (isParamEditMode) {
 8001a28:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <setActualMenu+0x344>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d06c      	beq.n	8001b0a <setActualMenu+0x326>
		int tmpV[4] = {};
 8001a30:	2408      	movs	r4, #8
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	0018      	movs	r0, r3
 8001a36:	2310      	movs	r3, #16
 8001a38:	001a      	movs	r2, r3
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f000 fad5 	bl	8001fea <memset>
		tmpV[0]=	tmpVValue/1000;
 8001a40:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <setActualMenu+0x350>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	22fa      	movs	r2, #250	; 0xfa
 8001a46:	0091      	lsls	r1, r2, #2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7fe fbe7 	bl	800021c <__divsi3>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	001a      	movs	r2, r3
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	601a      	str	r2, [r3, #0]
		tmpV[1]=	tmpVValue/100 	- 	tmpV[0]*10;
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <setActualMenu+0x350>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2164      	movs	r1, #100	; 0x64
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7fe fbdd 	bl	800021c <__divsi3>
 8001a62:	0003      	movs	r3, r0
 8001a64:	0019      	movs	r1, r3
 8001a66:	0020      	movs	r0, r4
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	075b      	lsls	r3, r3, #29
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	18ca      	adds	r2, r1, r3
 8001a7a:	0004      	movs	r4, r0
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	605a      	str	r2, [r3, #4]
		tmpV[2]=	tmpVValue/10 	- 	tmpV[0]*100 	- tmpV[1]*10;
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <setActualMenu+0x350>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	210a      	movs	r1, #10
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7fe fbc8 	bl	800021c <__divsi3>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	0019      	movs	r1, r3
 8001a90:	0020      	movs	r0, r4
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	0013      	movs	r3, r2
 8001a98:	065b      	lsls	r3, r3, #25
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	189b      	adds	r3, r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	18c9      	adds	r1, r1, r3
 8001aa8:	183b      	adds	r3, r7, r0
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	0013      	movs	r3, r2
 8001aae:	075b      	lsls	r3, r3, #29
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	18ca      	adds	r2, r1, r3
 8001aba:	183b      	adds	r3, r7, r0
 8001abc:	609a      	str	r2, [r3, #8]
		tmpV[3]=	tmpVValue 		- 	tmpV[0]*1000 	- tmpV[1]*100 	- tmpV[2]*10;
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	059b      	lsls	r3, r3, #22
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	019b      	lsls	r3, r3, #6
 8001aca:	189b      	adds	r3, r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	189b      	adds	r3, r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <setActualMenu+0x350>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	18d1      	adds	r1, r2, r3
 8001ada:	183b      	adds	r3, r7, r0
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	0013      	movs	r3, r2
 8001ae0:	065b      	lsls	r3, r3, #25
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	189b      	adds	r3, r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	18c9      	adds	r1, r1, r3
 8001af0:	183b      	adds	r3, r7, r0
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	0013      	movs	r3, r2
 8001af6:	075b      	lsls	r3, r3, #29
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	18ca      	adds	r2, r1, r3
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	60da      	str	r2, [r3, #12]
		return tmpV;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e00a      	b.n	8001b20 <setActualMenu+0x33c>
	} else {
		return menu[actualIndex]._name;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <setActualMenu+0x348>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	0013      	movs	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	3308      	adds	r3, #8
 8001b18:	001a      	movs	r2, r3
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <setActualMenu+0x34c>)
 8001b1c:	18d3      	adds	r3, r2, r3
 8001b1e:	3301      	adds	r3, #1
	}
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b009      	add	sp, #36	; 0x24
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	2000031c 	.word	0x2000031c
 8001b2c:	20000318 	.word	0x20000318
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	20000320 	.word	0x20000320
 8001b38:	20000008 	.word	0x20000008

08001b3c <getMenuIndexByID>:

int getMenuIndexByID(int id) { // Функція отримання індексу пункту меню за його ID
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menuArraySize; i++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e00e      	b.n	8001b68 <getMenuIndexByID+0x2c>
		if (menu[i].id == id)
 8001b4a:	490d      	ldr	r1, [pc, #52]	; (8001b80 <getMenuIndexByID+0x44>)
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	0013      	movs	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	585b      	ldr	r3, [r3, r1]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d101      	bne.n	8001b62 <getMenuIndexByID+0x26>
			return i;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	e009      	b.n	8001b76 <getMenuIndexByID+0x3a>
	for (int i = 0; i < menuArraySize; i++) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <getMenuIndexByID+0x48>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbeb      	blt.n	8001b4a <getMenuIndexByID+0xe>
	}
	return -1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	425b      	negs	r3, r3
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20000008 	.word	0x20000008

08001b88 <getNearMenuIndexByID>:

int getNearMenuIndexByID(int parentid, int id, int side) { // Функція отримання індексу пункту меню наступного або попереднього від актуального
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
	int prevID = -1;      // Змінна для зберігання індексу попереднього елемента
 8001b94:	2301      	movs	r3, #1
 8001b96:	425b      	negs	r3, r3
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
	int nextID = -1;        // Змінна для зберігання індексу наступного елемента
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	425b      	negs	r3, r3
 8001b9e:	623b      	str	r3, [r7, #32]
	int actualID = -1;     // Змінна для зберігання індексу актуального елемента
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	61fb      	str	r3, [r7, #28]

	int firstID = -1;  // Змінна для зберігання індексу першого елемента
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	425b      	negs	r3, r3
 8001baa:	61bb      	str	r3, [r7, #24]
	int lastID = -1;   // Змінна для зберігання індексу останнього елемента
 8001bac:	2301      	movs	r3, #1
 8001bae:	425b      	negs	r3, r3
 8001bb0:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < menuArraySize; i++) {
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e030      	b.n	8001c1a <getNearMenuIndexByID+0x92>
		if (menu[i].parentid == parentid) { // Перебираємо всі елементи з одним батьківським ID
 8001bb8:	4924      	ldr	r1, [pc, #144]	; (8001c4c <getNearMenuIndexByID+0xc4>)
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	18cb      	adds	r3, r1, r3
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d121      	bne.n	8001c14 <getNearMenuIndexByID+0x8c>
			if (firstID == -1)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	d101      	bne.n	8001bda <getNearMenuIndexByID+0x52>
				firstID = i;     // Запам'ятовуємо перший елемент списку
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	61bb      	str	r3, [r7, #24]

			if (menu[i].id == id) {
 8001bda:	491c      	ldr	r1, [pc, #112]	; (8001c4c <getNearMenuIndexByID+0xc4>)
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	0013      	movs	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	585b      	ldr	r3, [r3, r1]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d102      	bne.n	8001bf4 <getNearMenuIndexByID+0x6c>
				actualID = i;  // Запам'ятовуємо актуальний елемент списку
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	e00d      	b.n	8001c10 <getNearMenuIndexByID+0x88>
			} else {
				if (actualID == -1) { // Якщо зустрівся елемент до актуального, робимо його попереднім
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	d102      	bne.n	8001c00 <getNearMenuIndexByID+0x78>
					prevID = i;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfe:	e007      	b.n	8001c10 <getNearMenuIndexByID+0x88>
				} else if (actualID != -1 && nextID == -1) { // Якщо зустрівся елемент після актуального, робимо його наступним
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	3301      	adds	r3, #1
 8001c04:	d004      	beq.n	8001c10 <getNearMenuIndexByID+0x88>
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <getNearMenuIndexByID+0x88>
					nextID = i;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	623b      	str	r3, [r7, #32]
				}
			}
			lastID = i;  // Кожний наступний елемент - останній
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < menuArraySize; i++) {
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3301      	adds	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <getNearMenuIndexByID+0xc8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbc9      	blt.n	8001bb8 <getNearMenuIndexByID+0x30>
		}
	}

	if (nextID == -1)
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	3301      	adds	r3, #1
 8001c28:	d101      	bne.n	8001c2e <getNearMenuIndexByID+0xa6>
		nextID = firstID; // Якщо наступного елемента немає - по колу видаємо перший
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	623b      	str	r3, [r7, #32]
	if (prevID == -1)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	3301      	adds	r3, #1
 8001c32:	d101      	bne.n	8001c38 <getNearMenuIndexByID+0xb0>
		prevID = lastID; // Якщо попереднього елемента немає - по колу видаємо останній
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
	if (side == -1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <getNearMenuIndexByID+0xba>
		return prevID; // В залежності від напрямку обертання, видаємо потрібний індекс
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	e000      	b.n	8001c44 <getNearMenuIndexByID+0xbc>
	else
		return nextID;
 8001c42:	6a3b      	ldr	r3, [r7, #32]
	return -1;
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b00a      	add	sp, #40	; 0x28
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	20000008 	.word	0x20000008

08001c54 <StartMusic>:

void StartMusic(int melody) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	MusicStep = 0;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <StartMusic+0x3c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	PlayMusic = 1;
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <StartMusic+0x40>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
	sound(Music[MusicStep].freq, Music[MusicStep].time);
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <StartMusic+0x3c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <StartMusic+0x44>)
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	5ad3      	ldrh	r3, [r2, r3]
 8001c72:	0018      	movs	r0, r3
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <StartMusic+0x3c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <StartMusic+0x44>)
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	3302      	adds	r3, #2
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	0019      	movs	r1, r3
 8001c84:	f000 f80a 	bl	8001c9c <sound>
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000032c 	.word	0x2000032c
 8001c94:	20000330 	.word	0x20000330
 8001c98:	0800205c 	.word	0x0800205c

08001c9c <sound>:

void sound (int freq, int time_ms) {
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	if (freq > 0) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	dd18      	ble.n	8001cde <sound+0x42>
		TIM2->ARR = SYSCLK / TIM2->PSC / freq;
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	05db      	lsls	r3, r3, #23
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4826      	ldr	r0, [pc, #152]	; (8001d50 <sound+0xb4>)
 8001cb6:	f7fe fa27 	bl	8000108 <__udivsi3>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	05d4      	lsls	r4, r2, #23
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	f7fe fa1f 	bl	8000108 <__udivsi3>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->CCR1 = TIM2->ARR / 2;
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	05db      	lsls	r3, r3, #23
 8001cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	05db      	lsls	r3, r3, #23
 8001cd8:	0852      	lsrs	r2, r2, #1
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
 8001cdc:	e008      	b.n	8001cf0 <sound+0x54>
	}
	else {
		TIM2->ARR = 1000;
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	05db      	lsls	r3, r3, #23
 8001ce2:	22fa      	movs	r2, #250	; 0xfa
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->CCR1 = 0;
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	05db      	lsls	r3, r3, #23
 8001cec:	2200      	movs	r2, #0
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34
	}
	TIM2->CNT=0;
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	05db      	lsls	r3, r3, #23
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24

	sound_time = ((SYSCLK / TIM2->PSC / TIM2->ARR) * time_ms ) / 1000;
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	05db      	lsls	r3, r3, #23
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	0019      	movs	r1, r3
 8001d00:	4813      	ldr	r0, [pc, #76]	; (8001d50 <sound+0xb4>)
 8001d02:	f7fe fa01 	bl	8000108 <__udivsi3>
 8001d06:	0003      	movs	r3, r0
 8001d08:	001a      	movs	r2, r3
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	05db      	lsls	r3, r3, #23
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	0019      	movs	r1, r3
 8001d12:	0010      	movs	r0, r2
 8001d14:	f7fe f9f8 	bl	8000108 <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4353      	muls	r3, r2
 8001d20:	22fa      	movs	r2, #250	; 0xfa
 8001d22:	0091      	lsls	r1, r2, #2
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7fe f9ef 	bl	8000108 <__udivsi3>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <sound+0xb8>)
 8001d30:	601a      	str	r2, [r3, #0]
	sound_counter = 0;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <sound+0xbc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM2->CR1, TIM_CR1_CEN);  //Запуск таймера;
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	05db      	lsls	r3, r3, #23
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	05db      	lsls	r3, r3, #23
 8001d42:	2101      	movs	r1, #1
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b003      	add	sp, #12
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	01e84800 	.word	0x01e84800
 8001d54:	20000334 	.word	0x20000334
 8001d58:	20000338 	.word	0x20000338

08001d5c <SysTick_Handler>:
/* Handlers--------------------------------------------------------*/
void SysTick_Handler(void) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <SysTick_Handler+0x28>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <SysTick_Handler+0x28>)
 8001d68:	601a      	str	r2, [r3, #0]
	if (Delay_counter_ms) {
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <SysTick_Handler+0x2c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <SysTick_Handler+0x20>
		Delay_counter_ms--;
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Handler+0x2c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <SysTick_Handler+0x2c>)
 8001d7a:	601a      	str	r2, [r3, #0]
	}
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	20000324 	.word	0x20000324
 8001d88:	20000328 	.word	0x20000328

08001d8c <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0){				// Перевірка, чи було переривання від лінії EXTI 0
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <EXTI0_1_IRQHandler+0xb8>)
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	d025      	beq.n	8001de6 <EXTI0_1_IRQHandler+0x5a>
        EXTI->PR = EXTI_PR_PR0;					// Скидаємо прапорець EXTI 0
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <EXTI0_1_IRQHandler+0xb8>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	615a      	str	r2, [r3, #20]
        if (flagDecrementButtonDown){			// Обробка кнопки decrement
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <EXTI0_1_IRQHandler+0xbc>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d018      	beq.n	8001dda <EXTI0_1_IRQHandler+0x4e>
            if ((/*HAL_GetTick()*/ - timeDecrementButtonDown) > timeButtonLongPressed)
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <EXTI0_1_IRQHandler+0xc0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	425a      	negs	r2, r3
 8001dae:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <EXTI0_1_IRQHandler+0xc4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d903      	bls.n	8001dbe <EXTI0_1_IRQHandler+0x32>
            {
                flagDecrementButtonLong = true;
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <EXTI0_1_IRQHandler+0xc8>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e009      	b.n	8001dd2 <EXTI0_1_IRQHandler+0x46>
            }
            else if ((/**HAL_GetTick()*/ - timeDecrementButtonDown) > timeButtonPressed)
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <EXTI0_1_IRQHandler+0xc0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	425a      	negs	r2, r3
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <EXTI0_1_IRQHandler+0xcc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d902      	bls.n	8001dd2 <EXTI0_1_IRQHandler+0x46>
            {
                flagDecrementButton = true;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <EXTI0_1_IRQHandler+0xd0>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
            }
            flagDecrementButtonDown = false;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <EXTI0_1_IRQHandler+0xbc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e005      	b.n	8001de6 <EXTI0_1_IRQHandler+0x5a>
        }else{
            timeDecrementButtonDown = /*HAL_GetTick()*/0;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <EXTI0_1_IRQHandler+0xc0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
            flagDecrementButtonDown = true;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <EXTI0_1_IRQHandler+0xbc>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
        }
    }
    if (EXTI->PR & EXTI_PR_PR1){				// Перевірка, чи було переривання від лінії EXTI 1
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <EXTI0_1_IRQHandler+0xb8>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	d025      	beq.n	8001e3c <EXTI0_1_IRQHandler+0xb0>
		EXTI->PR = EXTI_PR_PR1;					// Скидаємо прапорець EXTI 1 
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <EXTI0_1_IRQHandler+0xb8>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	615a      	str	r2, [r3, #20]
        if (flagEnterButtonDown){				// Обробка кнопки enter
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <EXTI0_1_IRQHandler+0xd4>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d018      	beq.n	8001e30 <EXTI0_1_IRQHandler+0xa4>
            if ((/*HAL_GetTick()*/ - timeEnterButtonDown) > timeButtonLongPressed){
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <EXTI0_1_IRQHandler+0xd8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	425a      	negs	r2, r3
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <EXTI0_1_IRQHandler+0xc4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d903      	bls.n	8001e14 <EXTI0_1_IRQHandler+0x88>
                flagEnterButtonLong = true;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <EXTI0_1_IRQHandler+0xdc>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	e009      	b.n	8001e28 <EXTI0_1_IRQHandler+0x9c>
            }
            else if ((/*HAL_GetTick()*/ - timeEnterButtonDown) > timeButtonPressed){
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <EXTI0_1_IRQHandler+0xd8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	425a      	negs	r2, r3
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <EXTI0_1_IRQHandler+0xcc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d902      	bls.n	8001e28 <EXTI0_1_IRQHandler+0x9c>
                flagEnterButton = true;
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <EXTI0_1_IRQHandler+0xe0>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
            }
            flagEnterButtonDown = false;
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <EXTI0_1_IRQHandler+0xd4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
        }else{
            timeEnterButtonDown = /*HAL_GetTick()*/0;
            flagEnterButtonDown = true;
        }
    }
}
 8001e2e:	e005      	b.n	8001e3c <EXTI0_1_IRQHandler+0xb0>
            timeEnterButtonDown = /*HAL_GetTick()*/0;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <EXTI0_1_IRQHandler+0xd8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
            flagEnterButtonDown = true;
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <EXTI0_1_IRQHandler+0xd4>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	40010400 	.word	0x40010400
 8001e48:	20000306 	.word	0x20000306
 8001e4c:	2000030c 	.word	0x2000030c
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000303 	.word	0x20000303
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	20000300 	.word	0x20000300
 8001e60:	20000307 	.word	0x20000307
 8001e64:	20000310 	.word	0x20000310
 8001e68:	20000304 	.word	0x20000304
 8001e6c:	20000301 	.word	0x20000301

08001e70 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    // Перевірка, чи було переривання від лінії EXTI 2
    if (EXTI->PR & EXTI_PR_PR2)
 8001e74:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <EXTI2_3_IRQHandler+0x60>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d025      	beq.n	8001eca <EXTI2_3_IRQHandler+0x5a>
    {
        // Скидаємо прапорець EXTI 2
        EXTI->PR = EXTI_PR_PR2;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <EXTI2_3_IRQHandler+0x60>)
 8001e80:	2204      	movs	r2, #4
 8001e82:	615a      	str	r2, [r3, #20]

        // Обробка кнопки increment
        if (flagIncrementButtonDown)
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <EXTI2_3_IRQHandler+0x64>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d018      	beq.n	8001ebe <EXTI2_3_IRQHandler+0x4e>
        {
            if ((/*HAL_GetTick()*/ - timeIncrementButtonDown) > timeButtonLongPressed)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <EXTI2_3_IRQHandler+0x68>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	425a      	negs	r2, r3
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <EXTI2_3_IRQHandler+0x6c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d903      	bls.n	8001ea2 <EXTI2_3_IRQHandler+0x32>
            {
                flagIncrementButtonLong = true;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <EXTI2_3_IRQHandler+0x70>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e009      	b.n	8001eb6 <EXTI2_3_IRQHandler+0x46>
            }
            else if ((/*HAL_GetTick()*/ - timeIncrementButtonDown) > timeButtonPressed)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <EXTI2_3_IRQHandler+0x68>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	425a      	negs	r2, r3
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <EXTI2_3_IRQHandler+0x74>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d902      	bls.n	8001eb6 <EXTI2_3_IRQHandler+0x46>
            {
                flagIncrementButton = true;
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <EXTI2_3_IRQHandler+0x78>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
            }
            flagIncrementButtonDown = false;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <EXTI2_3_IRQHandler+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
        {
            timeIncrementButtonDown = /*HAL_GetTick()*/0;
            flagIncrementButtonDown = true;
        }
    }
}
 8001ebc:	e005      	b.n	8001eca <EXTI2_3_IRQHandler+0x5a>
            timeIncrementButtonDown = /*HAL_GetTick()*/0;
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <EXTI2_3_IRQHandler+0x68>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
            flagIncrementButtonDown = true;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <EXTI2_3_IRQHandler+0x64>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010400 	.word	0x40010400
 8001ed4:	20000308 	.word	0x20000308
 8001ed8:	20000314 	.word	0x20000314
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000305 	.word	0x20000305
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	20000302 	.word	0x20000302

08001eec <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
    // Перевірка, чи було переривання від лінії EXTI 9
    if (EXTI->PR & EXTI_PR_PR9)
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <EXTI4_15_IRQHandler+0x20>)
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d003      	beq.n	8001f04 <EXTI4_15_IRQHandler+0x18>
    {
        // Скидаємо прапорець EXTI 9
        EXTI->PR = EXTI_PR_PR9;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <EXTI4_15_IRQHandler+0x20>)
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	615a      	str	r2, [r3, #20]

        // Обробка подій, пов'язаних з EXTI 9
        // Код обробки може бути доданий тут
    }
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	40010400 	.word	0x40010400

08001f10 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM2->SR, TIM_SR_UIF)) {
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	05db      	lsls	r3, r3, #23
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <TIM2_IRQHandler+0x20>
//		CounterTIM2++;
		CLEAR_BIT(TIM2->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	05db      	lsls	r3, r3, #23
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	05db      	lsls	r3, r3, #23
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	611a      	str	r2, [r3, #16]
	}


}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <TIM21_IRQHandler>:

void TIM21_IRQHandler(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	if (READ_BIT(TIM21->SR, TIM_SR_UIF)) {
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <TIM21_IRQHandler+0x20>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d005      	beq.n	8001f52 <TIM21_IRQHandler+0x1a>
//		CounterTIM2++;
		CLEAR_BIT(TIM21->SR, TIM_SR_UIF);  //Сбросим флаг прерывания
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <TIM21_IRQHandler+0x20>)
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <TIM21_IRQHandler+0x20>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	438a      	bics	r2, r1
 8001f50:	611a      	str	r2, [r3, #16]
	}
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40010800 	.word	0x40010800

08001f5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <Reset_Handler>:
 8001f68:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <LoopForever+0x2>)
 8001f6a:	4685      	mov	sp, r0
 8001f6c:	f7ff fff6 	bl	8001f5c <SystemInit>
 8001f70:	4812      	ldr	r0, [pc, #72]	; (8001fbc <LoopForever+0x6>)
 8001f72:	6801      	ldr	r1, [r0, #0]
 8001f74:	0e09      	lsrs	r1, r1, #24
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <LoopForever+0xa>)
 8001f78:	4291      	cmp	r1, r2
 8001f7a:	d105      	bne.n	8001f88 <ApplicationStart>
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <LoopForever+0xe>)
 8001f7e:	4912      	ldr	r1, [pc, #72]	; (8001fc8 <LoopForever+0x12>)
 8001f80:	6001      	str	r1, [r0, #0]
 8001f82:	4812      	ldr	r0, [pc, #72]	; (8001fcc <LoopForever+0x16>)
 8001f84:	4912      	ldr	r1, [pc, #72]	; (8001fd0 <LoopForever+0x1a>)
 8001f86:	6001      	str	r1, [r0, #0]

08001f88 <ApplicationStart>:
 8001f88:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <LoopForever+0x1e>)
 8001f8a:	4913      	ldr	r1, [pc, #76]	; (8001fd8 <LoopForever+0x22>)
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <LoopForever+0x26>)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:
 8001f92:	58d4      	ldr	r4, [r2, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:
 8001f98:	18c4      	adds	r4, r0, r3
 8001f9a:	428c      	cmp	r4, r1
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <LoopForever+0x2a>)
 8001fa0:	4c10      	ldr	r4, [pc, #64]	; (8001fe4 <LoopForever+0x2e>)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:
 8001faa:	42a2      	cmp	r2, r4
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>
 8001fae:	f000 f825 	bl	8001ffc <__libc_init_array>
 8001fb2:	f7fe fa39 	bl	8000428 <main>

08001fb6 <LoopForever>:
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
 8001fb8:	20000800 	.word	0x20000800
 8001fbc:	00000004 	.word	0x00000004
 8001fc0:	0000001f 	.word	0x0000001f
 8001fc4:	40021034 	.word	0x40021034
 8001fc8:	00000001 	.word	0x00000001
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	200002e4 	.word	0x200002e4
 8001fdc:	080021ec 	.word	0x080021ec
 8001fe0:	200002e4 	.word	0x200002e4
 8001fe4:	2000033c 	.word	0x2000033c

08001fe8 <ADC1_IRQHandler>:
 8001fe8:	e7fe      	b.n	8001fe8 <ADC1_IRQHandler>

08001fea <memset>:
 8001fea:	0003      	movs	r3, r0
 8001fec:	1882      	adds	r2, r0, r2
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <memset+0xa>
 8001ff2:	4770      	bx	lr
 8001ff4:	7019      	strb	r1, [r3, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	e7f9      	b.n	8001fee <memset+0x4>
	...

08001ffc <__libc_init_array>:
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	2600      	movs	r6, #0
 8002000:	4c0c      	ldr	r4, [pc, #48]	; (8002034 <__libc_init_array+0x38>)
 8002002:	4d0d      	ldr	r5, [pc, #52]	; (8002038 <__libc_init_array+0x3c>)
 8002004:	1b64      	subs	r4, r4, r5
 8002006:	10a4      	asrs	r4, r4, #2
 8002008:	42a6      	cmp	r6, r4
 800200a:	d109      	bne.n	8002020 <__libc_init_array+0x24>
 800200c:	2600      	movs	r6, #0
 800200e:	f000 f819 	bl	8002044 <_init>
 8002012:	4c0a      	ldr	r4, [pc, #40]	; (800203c <__libc_init_array+0x40>)
 8002014:	4d0a      	ldr	r5, [pc, #40]	; (8002040 <__libc_init_array+0x44>)
 8002016:	1b64      	subs	r4, r4, r5
 8002018:	10a4      	asrs	r4, r4, #2
 800201a:	42a6      	cmp	r6, r4
 800201c:	d105      	bne.n	800202a <__libc_init_array+0x2e>
 800201e:	bd70      	pop	{r4, r5, r6, pc}
 8002020:	00b3      	lsls	r3, r6, #2
 8002022:	58eb      	ldr	r3, [r5, r3]
 8002024:	4798      	blx	r3
 8002026:	3601      	adds	r6, #1
 8002028:	e7ee      	b.n	8002008 <__libc_init_array+0xc>
 800202a:	00b3      	lsls	r3, r6, #2
 800202c:	58eb      	ldr	r3, [r5, r3]
 800202e:	4798      	blx	r3
 8002030:	3601      	adds	r6, #1
 8002032:	e7f2      	b.n	800201a <__libc_init_array+0x1e>
 8002034:	080021e4 	.word	0x080021e4
 8002038:	080021e4 	.word	0x080021e4
 800203c:	080021e8 	.word	0x080021e8
 8002040:	080021e4 	.word	0x080021e4

08002044 <_init>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204a:	bc08      	pop	{r3}
 800204c:	469e      	mov	lr, r3
 800204e:	4770      	bx	lr

08002050 <_fini>:
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002056:	bc08      	pop	{r3}
 8002058:	469e      	mov	lr, r3
 800205a:	4770      	bx	lr
